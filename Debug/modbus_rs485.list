
modbus_rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080072f8  080072f8  000172f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007780  08007780  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007788  08007788  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          000042b8  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200043b4  200043b4  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cf33  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000475a  00000000  00000000  0003d05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  000417c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  00042c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025a34  00000000  00000000  00043ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d0b  00000000  00000000  000698fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6342  00000000  00000000  00083607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00159949  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ab4  00000000  00000000  0015999c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072e0 	.word	0x080072e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	080072e0 	.word	0x080072e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000118 	.word	0x20000118
 8000598:	2000016c 	.word	0x2000016c

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b08e      	sub	sp, #56	; 0x38
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc79 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f837 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f91d 	bl	80007e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 f8fb 	bl	80007a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f8cf 	bl	8000754 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80005b6:	f000 f897 	bl	80006e8 <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ba:	4b13      	ldr	r3, [pc, #76]	; (8000608 <main+0x6c>)
 80005bc:	f107 041c 	add.w	r4, r7, #28
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 f8fe 	bl	80037d6 <osThreadCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <main+0x70>)
 80005de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(ModbusRTUTask, ModbusRTUTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 128);
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <main+0x74>)
 80005e2:	463c      	mov	r4, r7
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mbPollTask_h = osThreadCreate(osThread(ModbusRTUTask), NULL);
 80005f2:	463b      	mov	r3, r7
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 f8ed 	bl	80037d6 <osThreadCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <main+0x78>)
 8000600:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000602:	f003 f8e1 	bl	80037c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x6a>
 8000608:	08007314 	.word	0x08007314
 800060c:	20004150 	.word	0x20004150
 8000610:	08007330 	.word	0x08007330
 8000614:	20004154 	.word	0x20004154

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f005 fec8 	bl	80063bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <SystemClock_Config+0xcc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xcc>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800068c:	2348      	movs	r3, #72	; 0x48
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fa6b 	bl	8001b78 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f90a 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fccd 	bl	8002068 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d4:	f000 f8f4 	bl	80008c0 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_TIM7_Init+0x64>)
 80006f8:	4a15      	ldr	r2, [pc, #84]	; (8000750 <MX_TIM7_Init+0x68>)
 80006fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_TIM7_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_TIM7_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_TIM7_Init+0x64>)
 800070a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_TIM7_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_TIM7_Init+0x64>)
 8000718:	f001 fed4 	bl	80024c4 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000722:	f000 f8cd 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <MX_TIM7_Init+0x64>)
 8000734:	f002 f986 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800073e:	f000 f8bf 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200041fc 	.word	0x200041fc
 8000750:	40001400 	.word	0x40001400

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <MX_USART2_UART_Init+0x50>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000760:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USART2_UART_Init+0x4c>)
 800078c:	f002 f9ea 	bl	8002b64 <HAL_UART_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000796:	f000 f893 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200041b8 	.word	0x200041b8
 80007a4:	40004400 	.word	0x40004400

080007a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_DMA_Init+0x3c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <MX_DMA_Init+0x3c>)
 80007b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_DMA_Init+0x3c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2105      	movs	r1, #5
 80007ce:	2011      	movs	r0, #17
 80007d0:	f000 fc5c 	bl	800108c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007d4:	2011      	movs	r0, #17
 80007d6:	f000 fc75 	bl	80010c4 <HAL_NVIC_EnableIRQ>

}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_GPIO_Init+0x9c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <MX_GPIO_Init+0x9c>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_GPIO_Init+0x9c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_GPIO_Init+0x9c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a18      	ldr	r2, [pc, #96]	; (8000884 <MX_GPIO_Init+0x9c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_GPIO_Init+0x9c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_GPIO_Init+0x9c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <MX_GPIO_Init+0x9c>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_GPIO_Init+0x9c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0xa0>)
 800085a:	f001 f959 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin;
 800085e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0xa0>)
 8000878:	f000 ffae 	bl	80017d8 <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020c00 	.word	0x40020c00

0800088c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f002 ffea 	bl	800386e <osDelay>
 800089a:	e7fb      	b.n	8000894 <StartDefaultTask+0x8>

0800089c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ae:	f000 fb15 	bl	8000edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40001000 	.word	0x40001000

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x54>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a11      	ldr	r2, [pc, #68]	; (8000920 <HAL_MspInit+0x54>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x54>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_MspInit+0x54>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_MspInit+0x54>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x54>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 fbbb 	bl	800108c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_TIM_Base_MspInit+0x48>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d115      	bne.n	8000962 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_TIM_Base_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_TIM_Base_MspInit+0x4c>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_TIM_Base_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 0320 	and.w	r3, r3, #32
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2105      	movs	r1, #5
 8000956:	2037      	movs	r0, #55	; 0x37
 8000958:	f000 fb98 	bl	800108c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800095c:	2037      	movs	r0, #55	; 0x37
 800095e:	f000 fbb1 	bl	80010c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40001400 	.word	0x40001400
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a34      	ldr	r2, [pc, #208]	; (8000a64 <HAL_UART_MspInit+0xf0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d162      	bne.n	8000a5c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_UART_MspInit+0xf4>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <HAL_UART_MspInit+0xf4>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <HAL_UART_MspInit+0xf4>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <HAL_UART_MspInit+0xf4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a2b      	ldr	r2, [pc, #172]	; (8000a68 <HAL_UART_MspInit+0xf4>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b29      	ldr	r3, [pc, #164]	; (8000a68 <HAL_UART_MspInit+0xf4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4820      	ldr	r0, [pc, #128]	; (8000a6c <HAL_UART_MspInit+0xf8>)
 80009ea:	f000 fef5 	bl	80017d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80009ee:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 80009f0:	4a20      	ldr	r2, [pc, #128]	; (8000a74 <HAL_UART_MspInit+0x100>)
 80009f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 80009f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 80009fe:	2240      	movs	r2, #64	; 0x40
 8000a00:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a28:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a32:	f000 fb55 	bl	80010e0 <HAL_DMA_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a3c:	f7ff ff40 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_UART_MspInit+0xfc>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2105      	movs	r1, #5
 8000a50:	2026      	movs	r0, #38	; 0x26
 8000a52:	f000 fb1b 	bl	800108c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a56:	2026      	movs	r0, #38	; 0x26
 8000a58:	f000 fb34 	bl	80010c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40004400 	.word	0x40004400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	20004158 	.word	0x20004158
 8000a74:	400260a0 	.word	0x400260a0

08000a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	2036      	movs	r0, #54	; 0x36
 8000a8e:	f000 fafd 	bl	800108c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a92:	2036      	movs	r0, #54	; 0x36
 8000a94:	f000 fb16 	bl	80010c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <HAL_InitTick+0xa4>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <HAL_InitTick+0xa4>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_InitTick+0xa4>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab4:	f107 0210 	add.w	r2, r7, #16
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fcce 	bl	8002460 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ac4:	f001 fca4 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_InitTick+0xa8>)
 8000ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad6:	0c9b      	lsrs	r3, r3, #18
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_InitTick+0xac>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <HAL_InitTick+0xb0>)
 8000ae0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_InitTick+0xac>)
 8000ae4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aea:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_InitTick+0xac>)
 8000aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_InitTick+0xac>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_InitTick+0xac>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <HAL_InitTick+0xac>)
 8000afe:	f001 fce1 	bl	80024c4 <HAL_TIM_Base_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d104      	bne.n	8000b12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <HAL_InitTick+0xac>)
 8000b0a:	f001 fd2b 	bl	8002564 <HAL_TIM_Base_Start_IT>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	e000      	b.n	8000b14 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3730      	adds	r7, #48	; 0x30
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	431bde83 	.word	0x431bde83
 8000b24:	20004244 	.word	0x20004244
 8000b28:	40001000 	.word	0x40001000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
 // uint32_t tmp_flag = 0;//__HAL_DMA_GET_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF1_6);
  uint32_t tmp_it_source = __HAL_DMA_GET_IT_SOURCE(&hdma_usart2_tx, DMA_IT_TC);
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <DMA1_Stream6_IRQHandler+0x34>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	607b      	str	r3, [r7, #4]

  if((tmp_it_source != RESET)) {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d005      	beq.n	8000b7c <DMA1_Stream6_IRQHandler+0x24>
	  osSignalSet(mbPollTask_h, MB_TX_DMA_COMPLETE_EVT);
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <DMA1_Stream6_IRQHandler+0x38>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fe8e 	bl	8003898 <osSignalSet>
	//  __HAL_DMA_CLEAR_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF1_6);
  }

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <DMA1_Stream6_IRQHandler+0x34>)
 8000b7e:	f000 fbef 	bl	8001360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20004158 	.word	0x20004158
 8000b90:	20004154 	.word	0x20004154

08000b94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <USART2_IRQHandler+0x84>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	2b20      	cmp	r3, #32
 8000ba6:	bf0c      	ite	eq
 8000ba8:	2301      	moveq	r3, #1
 8000baa:	2300      	movne	r3, #0
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <USART2_IRQHandler+0x84>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	f003 0320 	and.w	r3, r3, #32
 8000bba:	60bb      	str	r3, [r7, #8]
  
  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d011      	beq.n	8000be6 <USART2_IRQHandler+0x52>
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00e      	beq.n	8000be6 <USART2_IRQHandler+0x52>
    pxMBFrameCBByteReceived();
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <USART2_IRQHandler+0x88>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4798      	blx	r3
    __HAL_UART_CLEAR_PEFLAG(&huart2);    
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <USART2_IRQHandler+0x84>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <USART2_IRQHandler+0x84>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
    return;
 8000be4:	e014      	b.n	8000c10 <USART2_IRQHandler+0x7c>
  }
  
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET)) {
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <USART2_IRQHandler+0x84>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf0:	2b80      	cmp	r3, #128	; 0x80
 8000bf2:	d10a      	bne.n	8000c0a <USART2_IRQHandler+0x76>
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <USART2_IRQHandler+0x84>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <USART2_IRQHandler+0x76>
    pxMBFrameCBTransmitterEmpty();    
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <USART2_IRQHandler+0x8c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4798      	blx	r3
    return ;
 8000c08:	e002      	b.n	8000c10 <USART2_IRQHandler+0x7c>
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <USART2_IRQHandler+0x84>)
 8000c0c:	f002 f88a 	bl	8002d24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200041b8 	.word	0x200041b8
 8000c1c:	20004298 	.word	0x20004298
 8000c20:	20004290 	.word	0x20004290

08000c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM6_DAC_IRQHandler+0x10>)
 8000c2a:	f001 fd3a 	bl	80026a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20004244 	.word	0x20004244

08000c38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET) {
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <TIM7_IRQHandler+0x50>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d118      	bne.n	8000c7c <TIM7_IRQHandler+0x44>
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <TIM7_IRQHandler+0x50>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d111      	bne.n	8000c7c <TIM7_IRQHandler+0x44>
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <TIM7_IRQHandler+0x50>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f06f 0201 	mvn.w	r2, #1
 8000c60:	611a      	str	r2, [r3, #16]
    if (!--downcounter)
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <TIM7_IRQHandler+0x54>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <TIM7_IRQHandler+0x54>)
 8000c6c:	801a      	strh	r2, [r3, #0]
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <TIM7_IRQHandler+0x54>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <TIM7_IRQHandler+0x44>
      pxMBPortCBTimerExpired();
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <TIM7_IRQHandler+0x58>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4798      	blx	r3
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM7_IRQHandler+0x50>)
 8000c7e:	f001 fd10 	bl	80026a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200041fc 	.word	0x200041fc
 8000c8c:	2000036e 	.word	0x2000036e
 8000c90:	20004294 	.word	0x20004294

08000c94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	return 1;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_kill>:

int _kill(int pid, int sig)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cae:	f005 fb3b 	bl	8006328 <__errno>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2216      	movs	r2, #22
 8000cb6:	601a      	str	r2, [r3, #0]
	return -1;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <_exit>:

void _exit (int status)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffe7 	bl	8000ca4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cd6:	e7fe      	b.n	8000cd6 <_exit+0x12>

08000cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e00a      	b.n	8000d00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cea:	f3af 8000 	nop.w
 8000cee:	4601      	mov	r1, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	60ba      	str	r2, [r7, #8]
 8000cf6:	b2ca      	uxtb	r2, r1
 8000cf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf0      	blt.n	8000cea <_read+0x12>
	}

return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	60f8      	str	r0, [r7, #12]
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e009      	b.n	8000d38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	60ba      	str	r2, [r7, #8]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf1      	blt.n	8000d24 <_write+0x12>
	}
	return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_close>:

int _close(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	return -1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d72:	605a      	str	r2, [r3, #4]
	return 0;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	return 0;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f005 faa0 	bl	8006328 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20020000 	.word	0x20020000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	20000370 	.word	0x20000370
 8000e1c:	200043b8 	.word	0x200043b8

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4a:	490e      	ldr	r1, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e60:	4c0b      	ldr	r4, [pc, #44]	; (8000e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff ffd7 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f005 fa71 	bl	8006358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fb91 	bl	800059c <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e88:	08007790 	.word	0x08007790
  ldr r2, =_sbss
 8000e8c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e90:	200043b4 	.word	0x200043b4

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f8d8 	bl	8001076 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f7ff fdd6 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fcfe 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	2000428c 	.word	0x2000428c

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000428c 	.word	0x2000428c

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	; (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff4c 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109e:	f7ff ff61 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f7ff ffb1 	bl	8001010 <NVIC_EncodePriority>
 80010ae:	4602      	mov	r2, r0
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	4611      	mov	r1, r2
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff80 	bl	8000fbc <__NVIC_SetPriority>
}
 80010bc:	bf00      	nop
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff54 	bl	8000f80 <__NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff ff0a 	bl	8000f04 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e099      	b.n	8001230 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2202      	movs	r2, #2
 8001108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0201 	bic.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800111c:	e00f      	b.n	800113e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111e:	f7ff fef1 	bl	8000f04 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b05      	cmp	r3, #5
 800112a:	d908      	bls.n	800113e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2220      	movs	r2, #32
 8001130:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2203      	movs	r2, #3
 8001136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e078      	b.n	8001230 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e8      	bne.n	800111e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <HAL_DMA_Init+0x158>)
 8001158:	4013      	ands	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800116a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4313      	orrs	r3, r2
 800118e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	2b04      	cmp	r3, #4
 8001196:	d107      	bne.n	80011a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	4313      	orrs	r3, r2
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f023 0307 	bic.w	r3, r3, #7
 80011be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d117      	bne.n	8001202 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00e      	beq.n	8001202 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fa7b 	bl	80016e0 <DMA_CheckFifoParam>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011fe:	2301      	movs	r3, #1
 8001200:	e016      	b.n	8001230 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 fa32 	bl	8001674 <DMA_CalcBaseAndBitshift>
 8001210:	4603      	mov	r3, r0
 8001212:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	223f      	movs	r2, #63	; 0x3f
 800121a:	409a      	lsls	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	f010803f 	.word	0xf010803f

0800123c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001248:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800124a:	f7ff fe5b 	bl	8000f04 <HAL_GetTick>
 800124e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d008      	beq.n	800126e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e052      	b.n	8001314 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0216 	bic.w	r2, r2, #22
 800127c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <HAL_DMA_Abort+0x62>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0208 	bic.w	r2, r2, #8
 80012ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012be:	e013      	b.n	80012e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c0:	f7ff fe20 	bl	8000f04 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d90c      	bls.n	80012e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2220      	movs	r2, #32
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2203      	movs	r2, #3
 80012e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e015      	b.n	8001314 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e4      	bne.n	80012c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fa:	223f      	movs	r2, #63	; 0x3f
 80012fc:	409a      	lsls	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d004      	beq.n	800133a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00c      	b.n	8001354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2205      	movs	r2, #5
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800136c:	4b92      	ldr	r3, [pc, #584]	; (80015b8 <HAL_DMA_IRQHandler+0x258>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a92      	ldr	r2, [pc, #584]	; (80015bc <HAL_DMA_IRQHandler+0x25c>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	0a9b      	lsrs	r3, r3, #10
 8001378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800138a:	2208      	movs	r2, #8
 800138c:	409a      	lsls	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d01a      	beq.n	80013cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d013      	beq.n	80013cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0204 	bic.w	r2, r2, #4
 80013b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	2208      	movs	r2, #8
 80013ba:	409a      	lsls	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d0:	2201      	movs	r2, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d012      	beq.n	8001402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00b      	beq.n	8001402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	2201      	movs	r2, #1
 80013f0:	409a      	lsls	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fa:	f043 0202 	orr.w	r2, r3, #2
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	2204      	movs	r2, #4
 8001408:	409a      	lsls	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d012      	beq.n	8001438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00b      	beq.n	8001438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	2204      	movs	r2, #4
 8001426:	409a      	lsls	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001430:	f043 0204 	orr.w	r2, r3, #4
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143c:	2210      	movs	r2, #16
 800143e:	409a      	lsls	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d043      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d03c      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145a:	2210      	movs	r2, #16
 800145c:	409a      	lsls	r2, r3
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d018      	beq.n	80014a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d108      	bne.n	8001490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	2b00      	cmp	r3, #0
 8001484:	d024      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
 800148e:	e01f      	b.n	80014d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01b      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
 80014a0:	e016      	b.n	80014d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d107      	bne.n	80014c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0208 	bic.w	r2, r2, #8
 80014be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d4:	2220      	movs	r2, #32
 80014d6:	409a      	lsls	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 808e 	beq.w	80015fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8086 	beq.w	80015fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	2220      	movs	r2, #32
 80014f8:	409a      	lsls	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b05      	cmp	r3, #5
 8001508:	d136      	bne.n	8001578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0216 	bic.w	r2, r2, #22
 8001518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	2b00      	cmp	r3, #0
 8001530:	d103      	bne.n	800153a <HAL_DMA_IRQHandler+0x1da>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	2b00      	cmp	r3, #0
 8001538:	d007      	beq.n	800154a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0208 	bic.w	r2, r2, #8
 8001548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	223f      	movs	r2, #63	; 0x3f
 8001550:	409a      	lsls	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800156a:	2b00      	cmp	r3, #0
 800156c:	d07d      	beq.n	800166a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	4798      	blx	r3
        }
        return;
 8001576:	e078      	b.n	800166a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d01c      	beq.n	80015c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d108      	bne.n	80015a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	2b00      	cmp	r3, #0
 800159a:	d030      	beq.n	80015fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	4798      	blx	r3
 80015a4:	e02b      	b.n	80015fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d027      	beq.n	80015fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	4798      	blx	r3
 80015b6:	e022      	b.n	80015fe <HAL_DMA_IRQHandler+0x29e>
 80015b8:	20000000 	.word	0x20000000
 80015bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0210 	bic.w	r2, r2, #16
 80015dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001602:	2b00      	cmp	r3, #0
 8001604:	d032      	beq.n	800166c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d022      	beq.n	8001658 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2205      	movs	r2, #5
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3301      	adds	r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d307      	bcc.n	8001646 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f2      	bne.n	800162a <HAL_DMA_IRQHandler+0x2ca>
 8001644:	e000      	b.n	8001648 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001646:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
 8001668:	e000      	b.n	800166c <HAL_DMA_IRQHandler+0x30c>
        return;
 800166a:	bf00      	nop
    }
  }
}
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop

08001674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3b10      	subs	r3, #16
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <DMA_CalcBaseAndBitshift+0x68>)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d909      	bls.n	80016b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016aa:	f023 0303 	bic.w	r3, r3, #3
 80016ae:	1d1a      	adds	r2, r3, #4
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	659a      	str	r2, [r3, #88]	; 0x58
 80016b4:	e007      	b.n	80016c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	aaaaaaab 	.word	0xaaaaaaab
 80016dc:	08007454 	.word	0x08007454

080016e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d11f      	bne.n	800173a <DMA_CheckFifoParam+0x5a>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d856      	bhi.n	80017ae <DMA_CheckFifoParam+0xce>
 8001700:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <DMA_CheckFifoParam+0x28>)
 8001702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001706:	bf00      	nop
 8001708:	08001719 	.word	0x08001719
 800170c:	0800172b 	.word	0x0800172b
 8001710:	08001719 	.word	0x08001719
 8001714:	080017af 	.word	0x080017af
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d046      	beq.n	80017b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001728:	e043      	b.n	80017b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001732:	d140      	bne.n	80017b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001738:	e03d      	b.n	80017b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001742:	d121      	bne.n	8001788 <DMA_CheckFifoParam+0xa8>
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d837      	bhi.n	80017ba <DMA_CheckFifoParam+0xda>
 800174a:	a201      	add	r2, pc, #4	; (adr r2, 8001750 <DMA_CheckFifoParam+0x70>)
 800174c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001750:	08001761 	.word	0x08001761
 8001754:	08001767 	.word	0x08001767
 8001758:	08001761 	.word	0x08001761
 800175c:	08001779 	.word	0x08001779
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
      break;
 8001764:	e030      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d025      	beq.n	80017be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001776:	e022      	b.n	80017be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001780:	d11f      	bne.n	80017c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001786:	e01c      	b.n	80017c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d903      	bls.n	8001796 <DMA_CheckFifoParam+0xb6>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d003      	beq.n	800179c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001794:	e018      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
      break;
 800179a:	e015      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00e      	beq.n	80017c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
      break;
 80017ac:	e00b      	b.n	80017c6 <DMA_CheckFifoParam+0xe6>
      break;
 80017ae:	bf00      	nop
 80017b0:	e00a      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017b2:	bf00      	nop
 80017b4:	e008      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017b6:	bf00      	nop
 80017b8:	e006      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
 80017bc:	e004      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017be:	bf00      	nop
 80017c0:	e002      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80017c2:	bf00      	nop
 80017c4:	e000      	b.n	80017c8 <DMA_CheckFifoParam+0xe8>
      break;
 80017c6:	bf00      	nop
    }
  } 
  
  return status; 
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e16b      	b.n	8001acc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 815a 	bne.w	8001ac6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80b4 	beq.w	8001ac6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a5f      	ldr	r2, [pc, #380]	; (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a5b      	ldr	r2, [pc, #364]	; (8001ae8 <HAL_GPIO_Init+0x310>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a52      	ldr	r2, [pc, #328]	; (8001aec <HAL_GPIO_Init+0x314>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x226>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a51      	ldr	r2, [pc, #324]	; (8001af0 <HAL_GPIO_Init+0x318>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d025      	beq.n	80019fa <HAL_GPIO_Init+0x222>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a50      	ldr	r2, [pc, #320]	; (8001af4 <HAL_GPIO_Init+0x31c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01f      	beq.n	80019f6 <HAL_GPIO_Init+0x21e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <HAL_GPIO_Init+0x320>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d019      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4e      	ldr	r2, [pc, #312]	; (8001afc <HAL_GPIO_Init+0x324>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0x216>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4d      	ldr	r2, [pc, #308]	; (8001b00 <HAL_GPIO_Init+0x328>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x212>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4c      	ldr	r2, [pc, #304]	; (8001b04 <HAL_GPIO_Init+0x32c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x20e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4b      	ldr	r2, [pc, #300]	; (8001b08 <HAL_GPIO_Init+0x330>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x20a>
 80019de:	2307      	movs	r3, #7
 80019e0:	e00e      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019e2:	2308      	movs	r3, #8
 80019e4:	e00c      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019e6:	2306      	movs	r3, #6
 80019e8:	e00a      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	; (8001ae8 <HAL_GPIO_Init+0x310>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a42:	4a32      	ldr	r2, [pc, #200]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6c:	4a27      	ldr	r2, [pc, #156]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac0:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <HAL_GPIO_Init+0x334>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f ae90 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	; 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40021c00 	.word	0x40021c00
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b54:	887a      	ldrh	r2, [r7, #2]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	041a      	lsls	r2, r3, #16
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	400b      	ands	r3, r1
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	619a      	str	r2, [r3, #24]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e264      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d075      	beq.n	8001c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b96:	4ba3      	ldr	r3, [pc, #652]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d00c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba2:	4ba0      	ldr	r3, [pc, #640]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d112      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b9d      	ldr	r3, [pc, #628]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bba:	d10b      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	4b99      	ldr	r3, [pc, #612]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d05b      	beq.n	8001c80 <HAL_RCC_OscConfig+0x108>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d157      	bne.n	8001c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e23f      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_OscConfig+0x74>
 8001bde:	4b91      	ldr	r3, [pc, #580]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a90      	ldr	r2, [pc, #576]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e01d      	b.n	8001c28 <HAL_RCC_OscConfig+0xb0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x98>
 8001bf6:	4b8b      	ldr	r3, [pc, #556]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a8a      	ldr	r2, [pc, #552]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a87      	ldr	r2, [pc, #540]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0xb0>
 8001c10:	4b84      	ldr	r3, [pc, #528]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a83      	ldr	r2, [pc, #524]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a80      	ldr	r2, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f968 	bl	8000f04 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff f964 	bl	8000f04 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e204      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0xc0>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f954 	bl	8000f04 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff f950 	bl	8000f04 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1f0      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	4b6c      	ldr	r3, [pc, #432]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0xe8>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d063      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c8e:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9a:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d11c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	4b5f      	ldr	r3, [pc, #380]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d116      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	4b5c      	ldr	r3, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x152>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e1c4      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b56      	ldr	r3, [pc, #344]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4952      	ldr	r1, [pc, #328]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cde:	e03a      	b.n	8001d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce8:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff f909 	bl	8000f04 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f905 	bl	8000f04 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1a5      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4940      	ldr	r1, [pc, #256]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b3f      	ldr	r3, [pc, #252]	; (8001e28 <HAL_RCC_OscConfig+0x2b0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f8e8 	bl	8000f04 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d38:	f7ff f8e4 	bl	8000f04 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e184      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d030      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d016      	beq.n	8001d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6a:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <HAL_RCC_OscConfig+0x2b4>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff f8c8 	bl	8000f04 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff f8c4 	bl	8000f04 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e164      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x200>
 8001d96:	e015      	b.n	8001dc4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b24      	ldr	r3, [pc, #144]	; (8001e2c <HAL_RCC_OscConfig+0x2b4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f8b1 	bl	8000f04 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da6:	f7ff f8ad 	bl	8000f04 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e14d      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a0 	beq.w	8001f12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_OscConfig+0x2b8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d121      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <HAL_RCC_OscConfig+0x2b8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <HAL_RCC_OscConfig+0x2b8>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f873 	bl	8000f04 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e011      	b.n	8001e46 <HAL_RCC_OscConfig+0x2ce>
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	42470000 	.word	0x42470000
 8001e2c:	42470e80 	.word	0x42470e80
 8001e30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e34:	f7ff f866 	bl	8000f04 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e106      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_OscConfig+0x4e4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
 8001e5a:	4b81      	ldr	r3, [pc, #516]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a80      	ldr	r2, [pc, #512]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
 8001e66:	e01c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x32a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x312>
 8001e70:	4b7b      	ldr	r3, [pc, #492]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	4a7a      	ldr	r2, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7c:	4b78      	ldr	r3, [pc, #480]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4a77      	ldr	r2, [pc, #476]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6713      	str	r3, [r2, #112]	; 0x70
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x32a>
 8001e8a:	4b75      	ldr	r3, [pc, #468]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8e:	4a74      	ldr	r2, [pc, #464]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6713      	str	r3, [r2, #112]	; 0x70
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9a:	4a71      	ldr	r2, [pc, #452]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d015      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f82b 	bl	8000f04 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff f827 	bl	8000f04 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0c5      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	4b65      	ldr	r3, [pc, #404]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ee      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x33a>
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff f815 	bl	8000f04 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff f811 	bl	8000f04 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0af      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	4b5a      	ldr	r3, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ee      	bne.n	8001ede <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b56      	ldr	r3, [pc, #344]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a55      	ldr	r2, [pc, #340]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 809b 	beq.w	8002052 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d05c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d141      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x4ec>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe ffe5 	bl	8000f04 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7fe ffe1 	bl	8000f04 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e081      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69da      	ldr	r2, [r3, #28]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	019b      	lsls	r3, r3, #6
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	3b01      	subs	r3, #1
 8001f76:	041b      	lsls	r3, r3, #16
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	4937      	ldr	r1, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f86:	4b37      	ldr	r3, [pc, #220]	; (8002064 <HAL_RCC_OscConfig+0x4ec>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe ffba 	bl	8000f04 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe ffb6 	bl	8000f04 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e056      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x41c>
 8001fb2:	e04e      	b.n	8002052 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_RCC_OscConfig+0x4ec>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7fe ffa3 	bl	8000f04 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7fe ff9f 	bl	8000f04 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e03f      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x44a>
 8001fe0:	e037      	b.n	8002052 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e032      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_RCC_OscConfig+0x4e8>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d028      	beq.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d121      	bne.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d11a      	bne.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002024:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002026:	4293      	cmp	r3, r2
 8002028:	d111      	bne.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d107      	bne.n	800204e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40007000 	.word	0x40007000
 8002060:	40023800 	.word	0x40023800
 8002064:	42470060 	.word	0x42470060

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0cc      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d90c      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b65      	ldr	r3, [pc, #404]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d044      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d119      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d003      	beq.n	8002126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	2b03      	cmp	r3, #3
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e067      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b37      	ldr	r3, [pc, #220]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4934      	ldr	r1, [pc, #208]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7fe fed4 	bl	8000f04 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe fed0 	bl	8000f04 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e04f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d20c      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	490a      	ldr	r1, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fc32 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00
 8002224:	40023800 	.word	0x40023800
 8002228:	0800743c 	.word	0x0800743c
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	2300      	movs	r3, #0
 8002246:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800224c:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d00d      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x40>
 8002258:	2b08      	cmp	r3, #8
 800225a:	f200 80bd 	bhi.w	80023d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x34>
 8002262:	2b04      	cmp	r3, #4
 8002264:	d003      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x3a>
 8002266:	e0b7      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800226a:	60bb      	str	r3, [r7, #8]
       break;
 800226c:	e0b7      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002270:	60bb      	str	r3, [r7, #8]
      break;
 8002272:	e0b4      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002274:	4b5d      	ldr	r3, [pc, #372]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800227c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800227e:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04d      	beq.n	8002326 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228a:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	461a      	mov	r2, r3
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	ea02 0800 	and.w	r8, r2, r0
 80022a2:	ea03 0901 	and.w	r9, r3, r1
 80022a6:	4640      	mov	r0, r8
 80022a8:	4649      	mov	r1, r9
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	014b      	lsls	r3, r1, #5
 80022b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022b8:	0142      	lsls	r2, r0, #5
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	ebb0 0008 	subs.w	r0, r0, r8
 80022c2:	eb61 0109 	sbc.w	r1, r1, r9
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	018b      	lsls	r3, r1, #6
 80022d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022d4:	0182      	lsls	r2, r0, #6
 80022d6:	1a12      	subs	r2, r2, r0
 80022d8:	eb63 0301 	sbc.w	r3, r3, r1
 80022dc:	f04f 0000 	mov.w	r0, #0
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	00d9      	lsls	r1, r3, #3
 80022e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022ea:	00d0      	lsls	r0, r2, #3
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	eb12 0208 	adds.w	r2, r2, r8
 80022f4:	eb43 0309 	adc.w	r3, r3, r9
 80022f8:	f04f 0000 	mov.w	r0, #0
 80022fc:	f04f 0100 	mov.w	r1, #0
 8002300:	0259      	lsls	r1, r3, #9
 8002302:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002306:	0250      	lsls	r0, r2, #9
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	461a      	mov	r2, r3
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	f7fd ffaa 	bl	8000270 <__aeabi_uldivmod>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4613      	mov	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	e04a      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	461a      	mov	r2, r3
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	ea02 0400 	and.w	r4, r2, r0
 800233e:	ea03 0501 	and.w	r5, r3, r1
 8002342:	4620      	mov	r0, r4
 8002344:	4629      	mov	r1, r5
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	014b      	lsls	r3, r1, #5
 8002350:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002354:	0142      	lsls	r2, r0, #5
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	1b00      	subs	r0, r0, r4
 800235c:	eb61 0105 	sbc.w	r1, r1, r5
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	018b      	lsls	r3, r1, #6
 800236a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800236e:	0182      	lsls	r2, r0, #6
 8002370:	1a12      	subs	r2, r2, r0
 8002372:	eb63 0301 	sbc.w	r3, r3, r1
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	00d9      	lsls	r1, r3, #3
 8002380:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002384:	00d0      	lsls	r0, r2, #3
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	1912      	adds	r2, r2, r4
 800238c:	eb45 0303 	adc.w	r3, r5, r3
 8002390:	f04f 0000 	mov.w	r0, #0
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	0299      	lsls	r1, r3, #10
 800239a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800239e:	0290      	lsls	r0, r2, #10
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	f7fd ff5e 	bl	8000270 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	3301      	adds	r3, #1
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	60bb      	str	r3, [r7, #8]
      break;
 80023d6:	e002      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023da:	60bb      	str	r3, [r7, #8]
      break;
 80023dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023de:	68bb      	ldr	r3, [r7, #8]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	007a1200 	.word	0x007a1200

080023f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_RCC_GetHCLKFreq+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002414:	f7ff fff0 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40023800 	.word	0x40023800
 8002434:	0800744c 	.word	0x0800744c

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243c:	f7ff ffdc 	bl	80023f8 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	0800744c 	.word	0x0800744c

08002460 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	220f      	movs	r2, #15
 800246e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_RCC_GetClockConfig+0x60>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0207 	and.w	r2, r3, #7
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	601a      	str	r2, [r3, #0]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40023c00 	.word	0x40023c00

080024c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e041      	b.n	800255a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fa1a 	bl	8000924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f000 f9fe 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d001      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e04e      	b.n	800261a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a23      	ldr	r2, [pc, #140]	; (8002628 <HAL_TIM_Base_Start_IT+0xc4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d022      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a6:	d01d      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_TIM_Base_Start_IT+0xc8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d018      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1e      	ldr	r2, [pc, #120]	; (8002630 <HAL_TIM_Base_Start_IT+0xcc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d013      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_TIM_Base_Start_IT+0xd0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00e      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_TIM_Base_Start_IT+0xd4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d009      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a19      	ldr	r2, [pc, #100]	; (800263c <HAL_TIM_Base_Start_IT+0xd8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d004      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x80>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_TIM_Base_Start_IT+0xdc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d111      	bne.n	8002608 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d010      	beq.n	8002618 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002606:	e007      	b.n	8002618 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40010000 	.word	0x40010000
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800
 8002634:	40000c00 	.word	0x40000c00
 8002638:	40010400 	.word	0x40010400
 800263c:	40014000 	.word	0x40014000
 8002640:	40001800 	.word	0x40001800

08002644 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a1a      	ldr	r2, [r3, #32]
 8002662:	f241 1311 	movw	r3, #4369	; 0x1111
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <HAL_TIM_Base_Stop_IT+0x48>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6a1a      	ldr	r2, [r3, #32]
 8002672:	f240 4344 	movw	r3, #1092	; 0x444
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <HAL_TIM_Base_Stop_IT+0x48>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d122      	bne.n	80026fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d11b      	bne.n	80026fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f06f 0202 	mvn.w	r2, #2
 80026ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8ee 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 80026ea:	e005      	b.n	80026f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f8e0 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8f1 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b04      	cmp	r3, #4
 800270a:	d122      	bne.n	8002752 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d11b      	bne.n	8002752 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f06f 0204 	mvn.w	r2, #4
 8002722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f8c4 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 800273e:	e005      	b.n	800274c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f8b6 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8c7 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b08      	cmp	r3, #8
 800275e:	d122      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b08      	cmp	r3, #8
 800276c:	d11b      	bne.n	80027a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f06f 0208 	mvn.w	r2, #8
 8002776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2204      	movs	r2, #4
 800277c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f89a 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 8002792:	e005      	b.n	80027a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f88c 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f89d 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d122      	bne.n	80027fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d11b      	bne.n	80027fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0210 	mvn.w	r2, #16
 80027ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2208      	movs	r2, #8
 80027d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f870 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 80027e6:	e005      	b.n	80027f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f862 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f873 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10e      	bne.n	8002826 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d107      	bne.n	8002826 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f06f 0201 	mvn.w	r2, #1
 800281e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7fe f83b 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d10e      	bne.n	8002852 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d107      	bne.n	8002852 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800284a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f97f 	bl	8002b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d10e      	bne.n	800287e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d107      	bne.n	800287e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f838 	bl	80028ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b20      	cmp	r3, #32
 800288a:	d10e      	bne.n	80028aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d107      	bne.n	80028aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0220 	mvn.w	r2, #32
 80028a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f949 	bl	8002b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <TIM_Base_SetConfig+0x114>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d013      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d00f      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a3d      	ldr	r2, [pc, #244]	; (8002a1c <TIM_Base_SetConfig+0x118>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00b      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a3c      	ldr	r2, [pc, #240]	; (8002a20 <TIM_Base_SetConfig+0x11c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a3b      	ldr	r2, [pc, #236]	; (8002a24 <TIM_Base_SetConfig+0x120>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <TIM_Base_SetConfig+0x40>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a3a      	ldr	r2, [pc, #232]	; (8002a28 <TIM_Base_SetConfig+0x124>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d108      	bne.n	8002956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a2f      	ldr	r2, [pc, #188]	; (8002a18 <TIM_Base_SetConfig+0x114>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d02b      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002964:	d027      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <TIM_Base_SetConfig+0x118>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d023      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a2b      	ldr	r2, [pc, #172]	; (8002a20 <TIM_Base_SetConfig+0x11c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a2a      	ldr	r2, [pc, #168]	; (8002a24 <TIM_Base_SetConfig+0x120>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01b      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <TIM_Base_SetConfig+0x124>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d017      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <TIM_Base_SetConfig+0x128>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <TIM_Base_SetConfig+0x12c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00f      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a26      	ldr	r2, [pc, #152]	; (8002a34 <TIM_Base_SetConfig+0x130>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00b      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a25      	ldr	r2, [pc, #148]	; (8002a38 <TIM_Base_SetConfig+0x134>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <TIM_Base_SetConfig+0x138>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a23      	ldr	r2, [pc, #140]	; (8002a40 <TIM_Base_SetConfig+0x13c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d108      	bne.n	80029c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <TIM_Base_SetConfig+0x114>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_Base_SetConfig+0xf8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <TIM_Base_SetConfig+0x124>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d103      	bne.n	8002a04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	615a      	str	r2, [r3, #20]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40010400 	.word	0x40010400
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40014400 	.word	0x40014400
 8002a34:	40014800 	.word	0x40014800
 8002a38:	40001800 	.word	0x40001800
 8002a3c:	40001c00 	.word	0x40001c00
 8002a40:	40002000 	.word	0x40002000

08002a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e05a      	b.n	8002b12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d022      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d01d      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d018      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a18      	ldr	r2, [pc, #96]	; (8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a17      	ldr	r2, [pc, #92]	; (8002b34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	; (8002b38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10c      	bne.n	8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40010000 	.word	0x40010000
 8002b24:	40000400 	.word	0x40000400
 8002b28:	40000800 	.word	0x40000800
 8002b2c:	40000c00 	.word	0x40000c00
 8002b30:	40010400 	.word	0x40010400
 8002b34:	40014000 	.word	0x40014000
 8002b38:	40001800 	.word	0x40001800

08002b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e03f      	b.n	8002bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7fd fef2 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fc1b 	bl	80033e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08a      	sub	sp, #40	; 0x28
 8002c02:	af02      	add	r7, sp, #8
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d17c      	bne.n	8002d18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <HAL_UART_Transmit+0x2c>
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e075      	b.n	8002d1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_UART_Transmit+0x3e>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e06e      	b.n	8002d1a <HAL_UART_Transmit+0x11c>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2221      	movs	r2, #33	; 0x21
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c52:	f7fe f957 	bl	8000f04 <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d108      	bne.n	8002c80 <HAL_UART_Transmit+0x82>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e003      	b.n	8002c88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c90:	e02a      	b.n	8002ce8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fa17 	bl	80030d0 <UART_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e036      	b.n	8002d1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10b      	bne.n	8002cca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	3302      	adds	r3, #2
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	e007      	b.n	8002cda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	781a      	ldrb	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1cf      	bne.n	8002c92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2140      	movs	r1, #64	; 0x40
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f9e7 	bl	80030d0 <UART_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e006      	b.n	8002d1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e000      	b.n	8002d1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10d      	bne.n	8002d76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_UART_IRQHandler+0x52>
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 faa1 	bl	80032b6 <UART_Receive_IT>
      return;
 8002d74:	e17c      	b.n	8003070 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80b1 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x1bc>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_UART_IRQHandler+0x70>
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80a6 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_UART_IRQHandler+0x90>
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_UART_IRQHandler+0xb0>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f043 0202 	orr.w	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_UART_IRQHandler+0xd0>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f043 0204 	orr.w	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00f      	beq.n	8002e1e <HAL_UART_IRQHandler+0xfa>
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_UART_IRQHandler+0xee>
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0208 	orr.w	r2, r3, #8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 811f 	beq.w	8003066 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_UART_IRQHandler+0x11e>
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fa3a 	bl	80032b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_UART_IRQHandler+0x146>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d031      	beq.n	8002ece <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f97a 	bl	8003164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d123      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d013      	beq.n	8002ebe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	4a77      	ldr	r2, [pc, #476]	; (8003078 <HAL_UART_IRQHandler+0x354>)
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fa3a 	bl	800131c <HAL_DMA_Abort_IT>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebc:	e00e      	b.n	8002edc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8f0 	bl	80030a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	e00a      	b.n	8002edc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f8ec 	bl	80030a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	e006      	b.n	8002edc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8e8 	bl	80030a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002eda:	e0c4      	b.n	8003066 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002edc:	bf00      	nop
    return;
 8002ede:	e0c2      	b.n	8003066 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	f040 80a2 	bne.w	800302e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 809c 	beq.w	800302e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8096 	beq.w	800302e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d14f      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f30:	8a3b      	ldrh	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8099 	beq.w	800306a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f3c:	8a3a      	ldrh	r2, [r7, #16]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	f080 8093 	bcs.w	800306a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	8a3a      	ldrh	r2, [r7, #16]
 8002f48:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f54:	d02b      	beq.n	8002fae <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f64:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695a      	ldr	r2, [r3, #20]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f84:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0210 	bic.w	r2, r2, #16
 8002fa2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe f947 	bl	800123c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f87a 	bl	80030b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002fc4:	e051      	b.n	800306a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d047      	beq.n	800306e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8002fde:	8a7b      	ldrh	r3, [r7, #18]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d044      	beq.n	800306e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ff2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0210 	bic.w	r2, r2, #16
 8003020:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003022:	8a7b      	ldrh	r3, [r7, #18]
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f846 	bl	80030b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800302c:	e01f      	b.n	800306e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_UART_IRQHandler+0x326>
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8cf 	bl	80031e6 <UART_Transmit_IT>
    return;
 8003048:	e012      	b.n	8003070 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00d      	beq.n	8003070 <HAL_UART_IRQHandler+0x34c>
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f911 	bl	8003286 <UART_EndTransmit_IT>
    return;
 8003064:	e004      	b.n	8003070 <HAL_UART_IRQHandler+0x34c>
    return;
 8003066:	bf00      	nop
 8003068:	e002      	b.n	8003070 <HAL_UART_IRQHandler+0x34c>
      return;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <HAL_UART_IRQHandler+0x34c>
      return;
 800306e:	bf00      	nop
  }
}
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	080031bf 	.word	0x080031bf

0800307c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e0:	e02c      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d028      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0x30>
 80030f0:	f7fd ff08 	bl	8000f04 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d21d      	bcs.n	800313c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800310e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e00f      	b.n	800315c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	429a      	cmp	r2, r3
 8003158:	d0c3      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800317a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0201 	bic.w	r2, r2, #1
 800318a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	2b01      	cmp	r3, #1
 8003192:	d107      	bne.n	80031a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0210 	bic.w	r2, r2, #16
 80031a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f7ff ff63 	bl	80030a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b21      	cmp	r3, #33	; 0x21
 80031f8:	d13e      	bne.n	8003278 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003202:	d114      	bne.n	800322e <UART_Transmit_IT+0x48>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d110      	bne.n	800322e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003220:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	1c9a      	adds	r2, r3, #2
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	621a      	str	r2, [r3, #32]
 800322c:	e008      	b.n	8003240 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6211      	str	r1, [r2, #32]
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29b      	uxth	r3, r3
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	4619      	mov	r1, r3
 800324e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10f      	bne.n	8003274 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003262:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003272:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	e000      	b.n	800327a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fee8 	bl	800307c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b084      	sub	sp, #16
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b22      	cmp	r3, #34	; 0x22
 80032c8:	f040 8087 	bne.w	80033da <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d4:	d117      	bne.n	8003306 <UART_Receive_IT+0x50>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d113      	bne.n	8003306 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	1c9a      	adds	r2, r3, #2
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
 8003304:	e026      	b.n	8003354 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003318:	d007      	beq.n	800332a <UART_Receive_IT+0x74>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <UART_Receive_IT+0x82>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	e008      	b.n	800334a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29b      	uxth	r3, r3
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4619      	mov	r1, r3
 8003362:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003364:	2b00      	cmp	r3, #0
 8003366:	d136      	bne.n	80033d6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0220 	bic.w	r2, r2, #32
 8003376:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003386:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d10e      	bne.n	80033c6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0210 	bic.w	r2, r2, #16
 80033b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fe7a 	bl	80030b8 <HAL_UARTEx_RxEventCallback>
 80033c4:	e002      	b.n	80033cc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff fe62 	bl	8003090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e002      	b.n	80033dc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e8:	b09f      	sub	sp, #124	; 0x7c
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fa:	68d9      	ldr	r1, [r3, #12]
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	ea40 0301 	orr.w	r3, r0, r1
 8003404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	431a      	orrs	r2, r3
 8003410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	431a      	orrs	r2, r3
 8003416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4313      	orrs	r3, r2
 800341c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003428:	f021 010c 	bic.w	r1, r1, #12
 800342c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003432:	430b      	orrs	r3, r1
 8003434:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	6999      	ldr	r1, [r3, #24]
 8003444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	ea40 0301 	orr.w	r3, r0, r1
 800344c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4bc5      	ldr	r3, [pc, #788]	; (8003768 <UART_SetConfig+0x384>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d004      	beq.n	8003462 <UART_SetConfig+0x7e>
 8003458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4bc3      	ldr	r3, [pc, #780]	; (800376c <UART_SetConfig+0x388>)
 800345e:	429a      	cmp	r2, r3
 8003460:	d103      	bne.n	800346a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003462:	f7fe ffe9 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8003466:	6778      	str	r0, [r7, #116]	; 0x74
 8003468:	e002      	b.n	8003470 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800346a:	f7fe ffd1 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 800346e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003478:	f040 80b6 	bne.w	80035e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800347c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800347e:	461c      	mov	r4, r3
 8003480:	f04f 0500 	mov.w	r5, #0
 8003484:	4622      	mov	r2, r4
 8003486:	462b      	mov	r3, r5
 8003488:	1891      	adds	r1, r2, r2
 800348a:	6439      	str	r1, [r7, #64]	; 0x40
 800348c:	415b      	adcs	r3, r3
 800348e:	647b      	str	r3, [r7, #68]	; 0x44
 8003490:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003494:	1912      	adds	r2, r2, r4
 8003496:	eb45 0303 	adc.w	r3, r5, r3
 800349a:	f04f 0000 	mov.w	r0, #0
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	00d9      	lsls	r1, r3, #3
 80034a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034a8:	00d0      	lsls	r0, r2, #3
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	1911      	adds	r1, r2, r4
 80034b0:	6639      	str	r1, [r7, #96]	; 0x60
 80034b2:	416b      	adcs	r3, r5
 80034b4:	667b      	str	r3, [r7, #100]	; 0x64
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	461a      	mov	r2, r3
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80034c4:	415b      	adcs	r3, r3
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80034d0:	f7fc fece 	bl	8000270 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4ba5      	ldr	r3, [pc, #660]	; (8003770 <UART_SetConfig+0x38c>)
 80034da:	fba3 2302 	umull	r2, r3, r3, r2
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	011e      	lsls	r6, r3, #4
 80034e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034e4:	461c      	mov	r4, r3
 80034e6:	f04f 0500 	mov.w	r5, #0
 80034ea:	4622      	mov	r2, r4
 80034ec:	462b      	mov	r3, r5
 80034ee:	1891      	adds	r1, r2, r2
 80034f0:	6339      	str	r1, [r7, #48]	; 0x30
 80034f2:	415b      	adcs	r3, r3
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
 80034f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034fa:	1912      	adds	r2, r2, r4
 80034fc:	eb45 0303 	adc.w	r3, r5, r3
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	00d9      	lsls	r1, r3, #3
 800350a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800350e:	00d0      	lsls	r0, r2, #3
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	1911      	adds	r1, r2, r4
 8003516:	65b9      	str	r1, [r7, #88]	; 0x58
 8003518:	416b      	adcs	r3, r5
 800351a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	461a      	mov	r2, r3
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	1891      	adds	r1, r2, r2
 8003528:	62b9      	str	r1, [r7, #40]	; 0x28
 800352a:	415b      	adcs	r3, r3
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800352e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003532:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003536:	f7fc fe9b 	bl	8000270 <__aeabi_uldivmod>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4b8c      	ldr	r3, [pc, #560]	; (8003770 <UART_SetConfig+0x38c>)
 8003540:	fba3 1302 	umull	r1, r3, r3, r2
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	2164      	movs	r1, #100	; 0x64
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	3332      	adds	r3, #50	; 0x32
 8003552:	4a87      	ldr	r2, [pc, #540]	; (8003770 <UART_SetConfig+0x38c>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003560:	441e      	add	r6, r3
 8003562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003564:	4618      	mov	r0, r3
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	1894      	adds	r4, r2, r2
 8003570:	623c      	str	r4, [r7, #32]
 8003572:	415b      	adcs	r3, r3
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
 8003576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800357a:	1812      	adds	r2, r2, r0
 800357c:	eb41 0303 	adc.w	r3, r1, r3
 8003580:	f04f 0400 	mov.w	r4, #0
 8003584:	f04f 0500 	mov.w	r5, #0
 8003588:	00dd      	lsls	r5, r3, #3
 800358a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800358e:	00d4      	lsls	r4, r2, #3
 8003590:	4622      	mov	r2, r4
 8003592:	462b      	mov	r3, r5
 8003594:	1814      	adds	r4, r2, r0
 8003596:	653c      	str	r4, [r7, #80]	; 0x50
 8003598:	414b      	adcs	r3, r1
 800359a:	657b      	str	r3, [r7, #84]	; 0x54
 800359c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	1891      	adds	r1, r2, r2
 80035a8:	61b9      	str	r1, [r7, #24]
 80035aa:	415b      	adcs	r3, r3
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80035b6:	f7fc fe5b 	bl	8000270 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4b6c      	ldr	r3, [pc, #432]	; (8003770 <UART_SetConfig+0x38c>)
 80035c0:	fba3 1302 	umull	r1, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	2164      	movs	r1, #100	; 0x64
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	3332      	adds	r3, #50	; 0x32
 80035d2:	4a67      	ldr	r2, [pc, #412]	; (8003770 <UART_SetConfig+0x38c>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	f003 0207 	and.w	r2, r3, #7
 80035de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4432      	add	r2, r6
 80035e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035e6:	e0b9      	b.n	800375c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ea:	461c      	mov	r4, r3
 80035ec:	f04f 0500 	mov.w	r5, #0
 80035f0:	4622      	mov	r2, r4
 80035f2:	462b      	mov	r3, r5
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	6139      	str	r1, [r7, #16]
 80035f8:	415b      	adcs	r3, r3
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003600:	1912      	adds	r2, r2, r4
 8003602:	eb45 0303 	adc.w	r3, r5, r3
 8003606:	f04f 0000 	mov.w	r0, #0
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	00d9      	lsls	r1, r3, #3
 8003610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003614:	00d0      	lsls	r0, r2, #3
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	eb12 0804 	adds.w	r8, r2, r4
 800361e:	eb43 0905 	adc.w	r9, r3, r5
 8003622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4618      	mov	r0, r3
 8003628:	f04f 0100 	mov.w	r1, #0
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	008b      	lsls	r3, r1, #2
 8003636:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800363a:	0082      	lsls	r2, r0, #2
 800363c:	4640      	mov	r0, r8
 800363e:	4649      	mov	r1, r9
 8003640:	f7fc fe16 	bl	8000270 <__aeabi_uldivmod>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4b49      	ldr	r3, [pc, #292]	; (8003770 <UART_SetConfig+0x38c>)
 800364a:	fba3 2302 	umull	r2, r3, r3, r2
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	011e      	lsls	r6, r3, #4
 8003652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003654:	4618      	mov	r0, r3
 8003656:	f04f 0100 	mov.w	r1, #0
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	1894      	adds	r4, r2, r2
 8003660:	60bc      	str	r4, [r7, #8]
 8003662:	415b      	adcs	r3, r3
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800366a:	1812      	adds	r2, r2, r0
 800366c:	eb41 0303 	adc.w	r3, r1, r3
 8003670:	f04f 0400 	mov.w	r4, #0
 8003674:	f04f 0500 	mov.w	r5, #0
 8003678:	00dd      	lsls	r5, r3, #3
 800367a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800367e:	00d4      	lsls	r4, r2, #3
 8003680:	4622      	mov	r2, r4
 8003682:	462b      	mov	r3, r5
 8003684:	1814      	adds	r4, r2, r0
 8003686:	64bc      	str	r4, [r7, #72]	; 0x48
 8003688:	414b      	adcs	r3, r1
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4618      	mov	r0, r3
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	f04f 0300 	mov.w	r3, #0
 800369e:	008b      	lsls	r3, r1, #2
 80036a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036a4:	0082      	lsls	r2, r0, #2
 80036a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036aa:	f7fc fde1 	bl	8000270 <__aeabi_uldivmod>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4b2f      	ldr	r3, [pc, #188]	; (8003770 <UART_SetConfig+0x38c>)
 80036b4:	fba3 1302 	umull	r1, r3, r3, r2
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	2164      	movs	r1, #100	; 0x64
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	3332      	adds	r3, #50	; 0x32
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <UART_SetConfig+0x38c>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036d2:	441e      	add	r6, r3
 80036d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d6:	4618      	mov	r0, r3
 80036d8:	f04f 0100 	mov.w	r1, #0
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	1894      	adds	r4, r2, r2
 80036e2:	603c      	str	r4, [r7, #0]
 80036e4:	415b      	adcs	r3, r3
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ec:	1812      	adds	r2, r2, r0
 80036ee:	eb41 0303 	adc.w	r3, r1, r3
 80036f2:	f04f 0400 	mov.w	r4, #0
 80036f6:	f04f 0500 	mov.w	r5, #0
 80036fa:	00dd      	lsls	r5, r3, #3
 80036fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003700:	00d4      	lsls	r4, r2, #3
 8003702:	4622      	mov	r2, r4
 8003704:	462b      	mov	r3, r5
 8003706:	eb12 0a00 	adds.w	sl, r2, r0
 800370a:	eb43 0b01 	adc.w	fp, r3, r1
 800370e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	f04f 0200 	mov.w	r2, #0
 800371c:	f04f 0300 	mov.w	r3, #0
 8003720:	008b      	lsls	r3, r1, #2
 8003722:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003726:	0082      	lsls	r2, r0, #2
 8003728:	4650      	mov	r0, sl
 800372a:	4659      	mov	r1, fp
 800372c:	f7fc fda0 	bl	8000270 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <UART_SetConfig+0x38c>)
 8003736:	fba3 1302 	umull	r1, r3, r3, r2
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2164      	movs	r1, #100	; 0x64
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	3332      	adds	r3, #50	; 0x32
 8003748:	4a09      	ldr	r2, [pc, #36]	; (8003770 <UART_SetConfig+0x38c>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	f003 020f 	and.w	r2, r3, #15
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4432      	add	r2, r6
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	bf00      	nop
 800375e:	377c      	adds	r7, #124	; 0x7c
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop
 8003768:	40011000 	.word	0x40011000
 800376c:	40011400 	.word	0x40011400
 8003770:	51eb851f 	.word	0x51eb851f

08003774 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003786:	2b84      	cmp	r3, #132	; 0x84
 8003788:	d005      	beq.n	8003796 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800378a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4413      	add	r3, r2
 8003792:	3303      	adds	r3, #3
 8003794:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037aa:	f3ef 8305 	mrs	r3, IPSR
 80037ae:	607b      	str	r3, [r7, #4]
  return(result);
 80037b0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bf14      	ite	ne
 80037b6:	2301      	movne	r3, #1
 80037b8:	2300      	moveq	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037cc:	f000 fcd2 	bl	8004174 <vTaskStartScheduler>
  
  return osOK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d8:	b089      	sub	sp, #36	; 0x24
 80037da:	af04      	add	r7, sp, #16
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d020      	beq.n	800382a <osThreadCreate+0x54>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01c      	beq.n	800382a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685c      	ldr	r4, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681d      	ldr	r5, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691e      	ldr	r6, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ffb6 	bl	8003774 <makeFreeRtosPriority>
 8003808:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003812:	9202      	str	r2, [sp, #8]
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	9100      	str	r1, [sp, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4632      	mov	r2, r6
 800381c:	4629      	mov	r1, r5
 800381e:	4620      	mov	r0, r4
 8003820:	f000 fae1 	bl	8003de6 <xTaskCreateStatic>
 8003824:	4603      	mov	r3, r0
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e01c      	b.n	8003864 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685c      	ldr	r4, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003836:	b29e      	uxth	r6, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ff98 	bl	8003774 <makeFreeRtosPriority>
 8003844:	4602      	mov	r2, r0
 8003846:	f107 030c 	add.w	r3, r7, #12
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	4632      	mov	r2, r6
 8003852:	4629      	mov	r1, r5
 8003854:	4620      	mov	r0, r4
 8003856:	f000 fb23 	bl	8003ea0 <xTaskCreate>
 800385a:	4603      	mov	r3, r0
 800385c:	2b01      	cmp	r3, #1
 800385e:	d001      	beq.n	8003864 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003864:	68fb      	ldr	r3, [r7, #12]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800386e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <osDelay+0x16>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	e000      	b.n	8003886 <osDelay+0x18>
 8003884:	2301      	movs	r3, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fc40 	bl	800410c <vTaskDelay>
  
  return osOK;
 800388c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80038aa:	f7ff ff7b 	bl	80037a4 <inHandlerMode>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01c      	beq.n	80038ee <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	f107 0208 	add.w	r2, r7, #8
 80038ba:	f107 030c 	add.w	r3, r7, #12
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	4613      	mov	r3, r2
 80038c2:	2201      	movs	r2, #1
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f001 f8d3 	bl	8004a70 <xTaskGenericNotifyFromISR>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d002      	beq.n	80038d6 <osSignalSet+0x3e>
      return 0x80000000;
 80038d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038d4:	e019      	b.n	800390a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d015      	beq.n	8003908 <osSignalSet+0x70>
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <osSignalSet+0x7c>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	e00c      	b.n	8003908 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 80038ee:	6839      	ldr	r1, [r7, #0]
 80038f0:	f107 0308 	add.w	r3, r7, #8
 80038f4:	2201      	movs	r2, #1
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f001 f804 	bl	8004904 <xTaskGenericNotify>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d002      	beq.n	8003908 <osSignalSet+0x70>
    return 0x80000000;
 8003902:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003906:	e000      	b.n	800390a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003908:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	e000ed04 	.word	0xe000ed04

08003918 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800393c:	231c      	movs	r3, #28
 800393e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b1c      	cmp	r3, #28
 8003944:	d00a      	beq.n	800395c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	60fb      	str	r3, [r7, #12]
}
 8003958:	bf00      	nop
 800395a:	e7fe      	b.n	800395a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3304      	adds	r3, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f000 f984 	bl	8003c7e <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2201      	movs	r2, #1
 800397a:	761a      	strb	r2, [r3, #24]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800397c:	697b      	ldr	r3, [r7, #20]
	}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b090      	sub	sp, #64	; 0x40
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800399e:	2300      	movs	r3, #0
 80039a0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xEventGroupWaitBits+0x36>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	623b      	str	r3, [r7, #32]
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <xEventGroupWaitBits+0x56>
	__asm volatile
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	61fb      	str	r3, [r7, #28]
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <xEventGroupWaitBits+0x72>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61bb      	str	r3, [r7, #24]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039fa:	f000 ff4d 	bl	8004898 <xTaskGetSchedulerState>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d102      	bne.n	8003a0a <xEventGroupWaitBits+0x82>
 8003a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <xEventGroupWaitBits+0x86>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xEventGroupWaitBits+0x88>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	617b      	str	r3, [r7, #20]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003a2a:	f000 fc03 	bl	8004234 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	68b9      	ldr	r1, [r7, #8]
 8003a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a3a:	f000 f8fe 	bl	8003c3a <prvTestWaitCondition>
 8003a3e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00e      	beq.n	8003a64 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d028      	beq.n	8003aa6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	e020      	b.n	8003aa6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
 8003a72:	e018      	b.n	8003aa6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a80:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	1d18      	adds	r0, r3, #4
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f000 fd87 	bl	80045b0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003aa6:	f000 fbd3 	bl	8004250 <xTaskResumeAll>
 8003aaa:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d031      	beq.n	8003b16 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <xEventGroupWaitBits+0x198>)
 8003aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003ac8:	f000 ff04 	bl	80048d4 <uxTaskResetEventItemValue>
 8003acc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11a      	bne.n	8003b0e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003ad8:	f001 fa34 	bl	8004f44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ae8:	f000 f8a7 	bl	8003c3a <prvTestWaitCondition>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d006      	beq.n	8003b06 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	401a      	ands	r2, r3
 8003b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b04:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003b0a:	f001 fa4b 	bl	8004fa4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3740      	adds	r7, #64	; 0x40
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	e000ed04 	.word	0xe000ed04

08003b24 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08e      	sub	sp, #56	; 0x38
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10a      	bne.n	8003b56 <xEventGroupSetBits+0x32>
	__asm volatile
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	613b      	str	r3, [r7, #16]
}
 8003b52:	bf00      	nop
 8003b54:	e7fe      	b.n	8003b54 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <xEventGroupSetBits+0x52>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	60fb      	str	r3, [r7, #12]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	3304      	adds	r3, #4
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	3308      	adds	r3, #8
 8003b80:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003b82:	f000 fb57 	bl	8004234 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003b98:	e03c      	b.n	8003c14 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bb0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003bb8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d108      	bne.n	8003bd6 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd4:	e008      	b.n	8003be8 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d101      	bne.n	8003be8 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d010      	beq.n	8003c10 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d003      	beq.n	8003c00 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c08:	4619      	mov	r1, r3
 8003c0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c0c:	f000 fd0c 	bl	8004628 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1be      	bne.n	8003b9a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	43db      	mvns	r3, r3
 8003c24:	401a      	ands	r2, r3
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003c2a:	f000 fb11 	bl	8004250 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	681b      	ldr	r3, [r3, #0]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3738      	adds	r7, #56	; 0x38
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b087      	sub	sp, #28
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d107      	bne.n	8003c60 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e007      	b.n	8003c70 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4013      	ands	r3, r2
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d101      	bne.n	8003c70 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003c70:	697b      	ldr	r3, [r7, #20]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f103 0208 	add.w	r2, r3, #8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f04f 32ff 	mov.w	r2, #4294967295
 8003c96:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f103 0208 	add.w	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f103 0208 	add.w	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d103      	bne.n	8003d40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	e00c      	b.n	8003d5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3308      	adds	r3, #8
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e002      	b.n	8003d4e <vListInsert+0x2e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d2f6      	bcs.n	8003d48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	601a      	str	r2, [r3, #0]
}
 8003d86:	bf00      	nop
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6892      	ldr	r2, [r2, #8]
 8003da8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6852      	ldr	r2, [r2, #4]
 8003db2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d103      	bne.n	8003dc6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1e5a      	subs	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b08e      	sub	sp, #56	; 0x38
 8003dea:	af04      	add	r7, sp, #16
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	607a      	str	r2, [r7, #4]
 8003df2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10a      	bne.n	8003e10 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	623b      	str	r3, [r7, #32]
}
 8003e0c:	bf00      	nop
 8003e0e:	e7fe      	b.n	8003e0e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <xTaskCreateStatic+0x46>
	__asm volatile
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	f383 8811 	msr	BASEPRI, r3
 8003e1e:	f3bf 8f6f 	isb	sy
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	61fb      	str	r3, [r7, #28]
}
 8003e28:	bf00      	nop
 8003e2a:	e7fe      	b.n	8003e2a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e2c:	2354      	movs	r3, #84	; 0x54
 8003e2e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b54      	cmp	r3, #84	; 0x54
 8003e34:	d00a      	beq.n	8003e4c <xTaskCreateStatic+0x66>
	__asm volatile
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	61bb      	str	r3, [r7, #24]
}
 8003e48:	bf00      	nop
 8003e4a:	e7fe      	b.n	8003e4a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01e      	beq.n	8003e92 <xTaskCreateStatic+0xac>
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d01b      	beq.n	8003e92 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9303      	str	r3, [sp, #12]
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f850 	bl	8003f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e8c:	f000 f8d4 	bl	8004038 <prvAddNewTaskToReadyList>
 8003e90:	e001      	b.n	8003e96 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e96:	697b      	ldr	r3, [r7, #20]
	}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08c      	sub	sp, #48	; 0x30
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 f967 	bl	8005188 <pvPortMalloc>
 8003eba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00e      	beq.n	8003ee0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ec2:	2054      	movs	r0, #84	; 0x54
 8003ec4:	f001 f960 	bl	8005188 <pvPortMalloc>
 8003ec8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed6:	e005      	b.n	8003ee4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ed8:	6978      	ldr	r0, [r7, #20]
 8003eda:	f001 fa21 	bl	8005320 <vPortFree>
 8003ede:	e001      	b.n	8003ee4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d017      	beq.n	8003f1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9303      	str	r3, [sp, #12]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	9302      	str	r3, [sp, #8]
 8003efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f80e 	bl	8003f2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f0e:	69f8      	ldr	r0, [r7, #28]
 8003f10:	f000 f892 	bl	8004038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f14:	2301      	movs	r3, #1
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e002      	b.n	8003f20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f20:	69bb      	ldr	r3, [r7, #24]
	}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b088      	sub	sp, #32
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f42:	3b01      	subs	r3, #1
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f023 0307 	bic.w	r3, r3, #7
 8003f50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	617b      	str	r3, [r7, #20]
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01f      	beq.n	8003fb8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	e012      	b.n	8003fa4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	7819      	ldrb	r1, [r3, #0]
 8003f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3334      	adds	r3, #52	; 0x34
 8003f8e:	460a      	mov	r2, r1
 8003f90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	4413      	add	r3, r2
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d006      	beq.n	8003fac <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	d9e9      	bls.n	8003f7e <prvInitialiseNewTask+0x54>
 8003faa:	e000      	b.n	8003fae <prvInitialiseNewTask+0x84>
			{
				break;
 8003fac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fb6:	e003      	b.n	8003fc0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	d901      	bls.n	8003fca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fc6:	2306      	movs	r3, #6
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2200      	movs	r2, #0
 8003fda:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fe6c 	bl	8003cbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	3318      	adds	r3, #24
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fe67 	bl	8003cbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	f1c3 0207 	rsb	r2, r3, #7
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004004:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	2200      	movs	r2, #0
 800400a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	69b8      	ldr	r0, [r7, #24]
 800401a:	f000 fe69 	bl	8004cf0 <pxPortInitialiseStack>
 800401e:	4602      	mov	r2, r0
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800402e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004030:	bf00      	nop
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004040:	f000 ff80 	bl	8004f44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004044:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <prvAddNewTaskToReadyList+0xb8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <prvAddNewTaskToReadyList+0xb8>)
 800404c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800404e:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <prvAddNewTaskToReadyList+0xbc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004056:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <prvAddNewTaskToReadyList+0xbc>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <prvAddNewTaskToReadyList+0xb8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d110      	bne.n	8004086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004064:	f000 fb5a 	bl	800471c <prvInitialiseTaskLists>
 8004068:	e00d      	b.n	8004086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <prvAddNewTaskToReadyList+0xc0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004072:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <prvAddNewTaskToReadyList+0xbc>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	429a      	cmp	r2, r3
 800407e:	d802      	bhi.n	8004086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <prvAddNewTaskToReadyList+0xbc>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <prvAddNewTaskToReadyList+0xc4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <prvAddNewTaskToReadyList+0xc4>)
 800408e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <prvAddNewTaskToReadyList+0xc8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	4a18      	ldr	r2, [pc, #96]	; (8004100 <prvAddNewTaskToReadyList+0xc8>)
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <prvAddNewTaskToReadyList+0xcc>)
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f7ff fe0d 	bl	8003cd8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040be:	f000 ff71 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <prvAddNewTaskToReadyList+0xc0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00e      	beq.n	80040e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <prvAddNewTaskToReadyList+0xbc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d207      	bcs.n	80040e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <prvAddNewTaskToReadyList+0xd0>)
 80040da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000474 	.word	0x20000474
 80040f4:	20000374 	.word	0x20000374
 80040f8:	20000480 	.word	0x20000480
 80040fc:	20000490 	.word	0x20000490
 8004100:	2000047c 	.word	0x2000047c
 8004104:	20000378 	.word	0x20000378
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d017      	beq.n	800414e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800411e:	4b13      	ldr	r3, [pc, #76]	; (800416c <vTaskDelay+0x60>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <vTaskDelay+0x30>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60bb      	str	r3, [r7, #8]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800413c:	f000 f87a 	bl	8004234 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004140:	2100      	movs	r1, #0
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fd6e 	bl	8004c24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004148:	f000 f882 	bl	8004250 <xTaskResumeAll>
 800414c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d107      	bne.n	8004164 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <vTaskDelay+0x64>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004164:	bf00      	nop
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	2000049c 	.word	0x2000049c
 8004170:	e000ed04 	.word	0xe000ed04

08004174 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004182:	463a      	mov	r2, r7
 8004184:	1d39      	adds	r1, r7, #4
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc f9ec 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004190:	6839      	ldr	r1, [r7, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	9202      	str	r2, [sp, #8]
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	2300      	movs	r3, #0
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	460a      	mov	r2, r1
 80041a2:	491e      	ldr	r1, [pc, #120]	; (800421c <vTaskStartScheduler+0xa8>)
 80041a4:	481e      	ldr	r0, [pc, #120]	; (8004220 <vTaskStartScheduler+0xac>)
 80041a6:	f7ff fe1e 	bl	8003de6 <xTaskCreateStatic>
 80041aa:	4603      	mov	r3, r0
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <vTaskStartScheduler+0xb0>)
 80041ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041b0:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <vTaskStartScheduler+0xb0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041b8:	2301      	movs	r3, #1
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e001      	b.n	80041c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d116      	bne.n	80041f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	613b      	str	r3, [r7, #16]
}
 80041da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <vTaskStartScheduler+0xb4>)
 80041de:	f04f 32ff 	mov.w	r2, #4294967295
 80041e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <vTaskStartScheduler+0xb8>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <vTaskStartScheduler+0xbc>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041f0:	f000 fe06 	bl	8004e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041f4:	e00e      	b.n	8004214 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d10a      	bne.n	8004214 <vTaskStartScheduler+0xa0>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	60fb      	str	r3, [r7, #12]
}
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <vTaskStartScheduler+0x9e>
}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	0800734c 	.word	0x0800734c
 8004220:	080046ed 	.word	0x080046ed
 8004224:	20000498 	.word	0x20000498
 8004228:	20000494 	.word	0x20000494
 800422c:	20000480 	.word	0x20000480
 8004230:	20000478 	.word	0x20000478

08004234 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <vTaskSuspendAll+0x18>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	4a03      	ldr	r2, [pc, #12]	; (800424c <vTaskSuspendAll+0x18>)
 8004240:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004242:	bf00      	nop
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	2000049c 	.word	0x2000049c

08004250 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800425e:	4b41      	ldr	r3, [pc, #260]	; (8004364 <xTaskResumeAll+0x114>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10a      	bne.n	800427c <xTaskResumeAll+0x2c>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	603b      	str	r3, [r7, #0]
}
 8004278:	bf00      	nop
 800427a:	e7fe      	b.n	800427a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800427c:	f000 fe62 	bl	8004f44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004280:	4b38      	ldr	r3, [pc, #224]	; (8004364 <xTaskResumeAll+0x114>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3b01      	subs	r3, #1
 8004286:	4a37      	ldr	r2, [pc, #220]	; (8004364 <xTaskResumeAll+0x114>)
 8004288:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <xTaskResumeAll+0x114>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d161      	bne.n	8004356 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004292:	4b35      	ldr	r3, [pc, #212]	; (8004368 <xTaskResumeAll+0x118>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d05d      	beq.n	8004356 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800429a:	e02e      	b.n	80042fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800429c:	4b33      	ldr	r3, [pc, #204]	; (800436c <xTaskResumeAll+0x11c>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3318      	adds	r3, #24
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fd72 	bl	8003d92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fd6d 	bl	8003d92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <xTaskResumeAll+0x120>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	4a2a      	ldr	r2, [pc, #168]	; (8004370 <xTaskResumeAll+0x120>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4a27      	ldr	r2, [pc, #156]	; (8004374 <xTaskResumeAll+0x124>)
 80042d8:	441a      	add	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7ff fcf9 	bl	8003cd8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	4b23      	ldr	r3, [pc, #140]	; (8004378 <xTaskResumeAll+0x128>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d302      	bcc.n	80042fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80042f4:	4b21      	ldr	r3, [pc, #132]	; (800437c <xTaskResumeAll+0x12c>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042fa:	4b1c      	ldr	r3, [pc, #112]	; (800436c <xTaskResumeAll+0x11c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1cc      	bne.n	800429c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004308:	f000 faa6 	bl	8004858 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800430c:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <xTaskResumeAll+0x130>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d010      	beq.n	800433a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004318:	f000 f836 	bl	8004388 <xTaskIncrementTick>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004322:	4b16      	ldr	r3, [pc, #88]	; (800437c <xTaskResumeAll+0x12c>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f1      	bne.n	8004318 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004334:	4b12      	ldr	r3, [pc, #72]	; (8004380 <xTaskResumeAll+0x130>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800433a:	4b10      	ldr	r3, [pc, #64]	; (800437c <xTaskResumeAll+0x12c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d009      	beq.n	8004356 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004342:	2301      	movs	r3, #1
 8004344:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <xTaskResumeAll+0x134>)
 8004348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004356:	f000 fe25 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 800435a:	68bb      	ldr	r3, [r7, #8]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	2000049c 	.word	0x2000049c
 8004368:	20000474 	.word	0x20000474
 800436c:	20000434 	.word	0x20000434
 8004370:	2000047c 	.word	0x2000047c
 8004374:	20000378 	.word	0x20000378
 8004378:	20000374 	.word	0x20000374
 800437c:	20000488 	.word	0x20000488
 8004380:	20000484 	.word	0x20000484
 8004384:	e000ed04 	.word	0xe000ed04

08004388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004392:	4b4e      	ldr	r3, [pc, #312]	; (80044cc <xTaskIncrementTick+0x144>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 808e 	bne.w	80044b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800439c:	4b4c      	ldr	r3, [pc, #304]	; (80044d0 <xTaskIncrementTick+0x148>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043a4:	4a4a      	ldr	r2, [pc, #296]	; (80044d0 <xTaskIncrementTick+0x148>)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d120      	bne.n	80043f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043b0:	4b48      	ldr	r3, [pc, #288]	; (80044d4 <xTaskIncrementTick+0x14c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	603b      	str	r3, [r7, #0]
}
 80043cc:	bf00      	nop
 80043ce:	e7fe      	b.n	80043ce <xTaskIncrementTick+0x46>
 80043d0:	4b40      	ldr	r3, [pc, #256]	; (80044d4 <xTaskIncrementTick+0x14c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <xTaskIncrementTick+0x150>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a3e      	ldr	r2, [pc, #248]	; (80044d4 <xTaskIncrementTick+0x14c>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4a3e      	ldr	r2, [pc, #248]	; (80044d8 <xTaskIncrementTick+0x150>)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b3d      	ldr	r3, [pc, #244]	; (80044dc <xTaskIncrementTick+0x154>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a3c      	ldr	r2, [pc, #240]	; (80044dc <xTaskIncrementTick+0x154>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	f000 fa33 	bl	8004858 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043f2:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <xTaskIncrementTick+0x158>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d348      	bcc.n	800448e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043fc:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <xTaskIncrementTick+0x14c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d104      	bne.n	8004410 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004406:	4b36      	ldr	r3, [pc, #216]	; (80044e0 <xTaskIncrementTick+0x158>)
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	601a      	str	r2, [r3, #0]
					break;
 800440e:	e03e      	b.n	800448e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <xTaskIncrementTick+0x14c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	429a      	cmp	r2, r3
 8004426:	d203      	bcs.n	8004430 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004428:	4a2d      	ldr	r2, [pc, #180]	; (80044e0 <xTaskIncrementTick+0x158>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800442e:	e02e      	b.n	800448e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	3304      	adds	r3, #4
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fcac 	bl	8003d92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	3318      	adds	r3, #24
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fca3 	bl	8003d92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	2201      	movs	r2, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <xTaskIncrementTick+0x15c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4313      	orrs	r3, r2
 800445a:	4a22      	ldr	r2, [pc, #136]	; (80044e4 <xTaskIncrementTick+0x15c>)
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <xTaskIncrementTick+0x160>)
 800446c:	441a      	add	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3304      	adds	r3, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f7ff fc2f 	bl	8003cd8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <xTaskIncrementTick+0x164>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	429a      	cmp	r2, r3
 8004486:	d3b9      	bcc.n	80043fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800448c:	e7b6      	b.n	80043fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <xTaskIncrementTick+0x164>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004494:	4914      	ldr	r1, [pc, #80]	; (80044e8 <xTaskIncrementTick+0x160>)
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d901      	bls.n	80044aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <xTaskIncrementTick+0x168>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80044b2:	2301      	movs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e004      	b.n	80044c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <xTaskIncrementTick+0x16c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <xTaskIncrementTick+0x16c>)
 80044c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80044c2:	697b      	ldr	r3, [r7, #20]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	2000049c 	.word	0x2000049c
 80044d0:	20000478 	.word	0x20000478
 80044d4:	2000042c 	.word	0x2000042c
 80044d8:	20000430 	.word	0x20000430
 80044dc:	2000048c 	.word	0x2000048c
 80044e0:	20000494 	.word	0x20000494
 80044e4:	2000047c 	.word	0x2000047c
 80044e8:	20000378 	.word	0x20000378
 80044ec:	20000374 	.word	0x20000374
 80044f0:	20000488 	.word	0x20000488
 80044f4:	20000484 	.word	0x20000484

080044f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044fe:	4b27      	ldr	r3, [pc, #156]	; (800459c <vTaskSwitchContext+0xa4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <vTaskSwitchContext+0xa8>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800450c:	e03f      	b.n	800458e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800450e:	4b24      	ldr	r3, [pc, #144]	; (80045a0 <vTaskSwitchContext+0xa8>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004514:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <vTaskSwitchContext+0xac>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	fab3 f383 	clz	r3, r3
 8004520:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	f1c3 031f 	rsb	r3, r3, #31
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	491f      	ldr	r1, [pc, #124]	; (80045a8 <vTaskSwitchContext+0xb0>)
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <vTaskSwitchContext+0x5c>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <vTaskSwitchContext+0x5a>
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <vTaskSwitchContext+0xb0>)
 8004560:	4413      	add	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3308      	adds	r3, #8
 8004576:	429a      	cmp	r2, r3
 8004578:	d104      	bne.n	8004584 <vTaskSwitchContext+0x8c>
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <vTaskSwitchContext+0xb4>)
 800458c:	6013      	str	r3, [r2, #0]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	2000049c 	.word	0x2000049c
 80045a0:	20000488 	.word	0x20000488
 80045a4:	2000047c 	.word	0x2000047c
 80045a8:	20000378 	.word	0x20000378
 80045ac:	20000374 	.word	0x20000374

080045b0 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	617b      	str	r3, [r7, #20]
}
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <vTaskPlaceOnUnorderedEventList+0x70>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	613b      	str	r3, [r7, #16]
}
 80045f2:	bf00      	nop
 80045f4:	e7fe      	b.n	80045f4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <vTaskPlaceOnUnorderedEventList+0x74>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004600:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <vTaskPlaceOnUnorderedEventList+0x74>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3318      	adds	r3, #24
 8004608:	4619      	mov	r1, r3
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff fb64 	bl	8003cd8 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004610:	2101      	movs	r1, #1
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fb06 	bl	8004c24 <prvAddCurrentTaskToDelayedList>
}
 8004618:	bf00      	nop
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	2000049c 	.word	0x2000049c
 8004624:	20000374 	.word	0x20000374

08004628 <vTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004632:	4b29      	ldr	r3, [pc, #164]	; (80046d8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	613b      	str	r3, [r7, #16]
}
 800464c:	bf00      	nop
 800464e:	e7fe      	b.n	800464e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10a      	bne.n	800467c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60fb      	str	r3, [r7, #12]
}
 8004678:	bf00      	nop
 800467a:	e7fe      	b.n	800467a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fb88 	bl	8003d92 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	3304      	adds	r3, #4
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fb83 	bl	8003d92 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	4b11      	ldr	r3, [pc, #68]	; (80046dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4313      	orrs	r3, r2
 800469a:	4a10      	ldr	r2, [pc, #64]	; (80046dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4a0d      	ldr	r2, [pc, #52]	; (80046e0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80046ac:	441a      	add	r2, r3
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f7ff fb0f 	bl	8003cd8 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046be:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d902      	bls.n	80046ce <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]
	}
}
 80046ce:	bf00      	nop
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	2000049c 	.word	0x2000049c
 80046dc:	2000047c 	.word	0x2000047c
 80046e0:	20000378 	.word	0x20000378
 80046e4:	20000374 	.word	0x20000374
 80046e8:	20000488 	.word	0x20000488

080046ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046f4:	f000 f852 	bl	800479c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <prvIdleTask+0x28>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d9f9      	bls.n	80046f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004700:	4b05      	ldr	r3, [pc, #20]	; (8004718 <prvIdleTask+0x2c>)
 8004702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004710:	e7f0      	b.n	80046f4 <prvIdleTask+0x8>
 8004712:	bf00      	nop
 8004714:	20000378 	.word	0x20000378
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	e00c      	b.n	8004742 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4a12      	ldr	r2, [pc, #72]	; (800477c <prvInitialiseTaskLists+0x60>)
 8004734:	4413      	add	r3, r2
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff faa1 	bl	8003c7e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3301      	adds	r3, #1
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b06      	cmp	r3, #6
 8004746:	d9ef      	bls.n	8004728 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004748:	480d      	ldr	r0, [pc, #52]	; (8004780 <prvInitialiseTaskLists+0x64>)
 800474a:	f7ff fa98 	bl	8003c7e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800474e:	480d      	ldr	r0, [pc, #52]	; (8004784 <prvInitialiseTaskLists+0x68>)
 8004750:	f7ff fa95 	bl	8003c7e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004754:	480c      	ldr	r0, [pc, #48]	; (8004788 <prvInitialiseTaskLists+0x6c>)
 8004756:	f7ff fa92 	bl	8003c7e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800475a:	480c      	ldr	r0, [pc, #48]	; (800478c <prvInitialiseTaskLists+0x70>)
 800475c:	f7ff fa8f 	bl	8003c7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004760:	480b      	ldr	r0, [pc, #44]	; (8004790 <prvInitialiseTaskLists+0x74>)
 8004762:	f7ff fa8c 	bl	8003c7e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <prvInitialiseTaskLists+0x78>)
 8004768:	4a05      	ldr	r2, [pc, #20]	; (8004780 <prvInitialiseTaskLists+0x64>)
 800476a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <prvInitialiseTaskLists+0x7c>)
 800476e:	4a05      	ldr	r2, [pc, #20]	; (8004784 <prvInitialiseTaskLists+0x68>)
 8004770:	601a      	str	r2, [r3, #0]
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000378 	.word	0x20000378
 8004780:	20000404 	.word	0x20000404
 8004784:	20000418 	.word	0x20000418
 8004788:	20000434 	.word	0x20000434
 800478c:	20000448 	.word	0x20000448
 8004790:	20000460 	.word	0x20000460
 8004794:	2000042c 	.word	0x2000042c
 8004798:	20000430 	.word	0x20000430

0800479c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047a2:	e019      	b.n	80047d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047a4:	f000 fbce 	bl	8004f44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <prvCheckTasksWaitingTermination+0x50>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff faec 	bl	8003d92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <prvCheckTasksWaitingTermination+0x54>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3b01      	subs	r3, #1
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <prvCheckTasksWaitingTermination+0x54>)
 80047c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <prvCheckTasksWaitingTermination+0x58>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <prvCheckTasksWaitingTermination+0x58>)
 80047cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047ce:	f000 fbe9 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f810 	bl	80047f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <prvCheckTasksWaitingTermination+0x58>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e1      	bne.n	80047a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000448 	.word	0x20000448
 80047f0:	20000474 	.word	0x20000474
 80047f4:	2000045c 	.word	0x2000045c

080047f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004806:	2b00      	cmp	r3, #0
 8004808:	d108      	bne.n	800481c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fd86 	bl	8005320 <vPortFree>
				vPortFree( pxTCB );
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fd83 	bl	8005320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800481a:	e018      	b.n	800484e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004822:	2b01      	cmp	r3, #1
 8004824:	d103      	bne.n	800482e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fd7a 	bl	8005320 <vPortFree>
	}
 800482c:	e00f      	b.n	800484e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004834:	2b02      	cmp	r3, #2
 8004836:	d00a      	beq.n	800484e <prvDeleteTCB+0x56>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <prvDeleteTCB+0x54>
	}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <prvResetNextTaskUnblockTime+0x38>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d104      	bne.n	8004872 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <prvResetNextTaskUnblockTime+0x3c>)
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004870:	e008      	b.n	8004884 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004872:	4b07      	ldr	r3, [pc, #28]	; (8004890 <prvResetNextTaskUnblockTime+0x38>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <prvResetNextTaskUnblockTime+0x3c>)
 8004882:	6013      	str	r3, [r2, #0]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	2000042c 	.word	0x2000042c
 8004894:	20000494 	.word	0x20000494

08004898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800489e:	4b0b      	ldr	r3, [pc, #44]	; (80048cc <xTaskGetSchedulerState+0x34>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d102      	bne.n	80048ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048a6:	2301      	movs	r3, #1
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	e008      	b.n	80048be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ac:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <xTaskGetSchedulerState+0x38>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048b4:	2302      	movs	r3, #2
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	e001      	b.n	80048be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048ba:	2300      	movs	r3, #0
 80048bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048be:	687b      	ldr	r3, [r7, #4]
	}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	20000480 	.word	0x20000480
 80048d0:	2000049c 	.word	0x2000049c

080048d4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <uxTaskResetEventItemValue+0x2c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <uxTaskResetEventItemValue+0x2c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <uxTaskResetEventItemValue+0x2c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1c2 0207 	rsb	r2, r2, #7
 80048f0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80048f2:	687b      	ldr	r3, [r7, #4]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000374 	.word	0x20000374

08004904 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	; 0x28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004914:	2301      	movs	r3, #1
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10a      	bne.n	8004934 <xTaskGenericNotify+0x30>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	61bb      	str	r3, [r7, #24]
}
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004938:	f000 fb04 	bl	8004f44 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004950:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d828      	bhi.n	80049b2 <xTaskGenericNotify+0xae>
 8004960:	a201      	add	r2, pc, #4	; (adr r2, 8004968 <xTaskGenericNotify+0x64>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	080049d3 	.word	0x080049d3
 800496c:	0800497d 	.word	0x0800497d
 8004970:	0800498b 	.word	0x0800498b
 8004974:	08004997 	.word	0x08004997
 8004978:	0800499f 	.word	0x0800499f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	431a      	orrs	r2, r3
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004988:	e026      	b.n	80049d8 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004994:	e020      	b.n	80049d8 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800499c:	e01c      	b.n	80049d8 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800499e:	7ffb      	ldrb	r3, [r7, #31]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d003      	beq.n	80049ac <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80049aa:	e015      	b.n	80049d8 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80049b0:	e012      	b.n	80049d8 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	d00c      	beq.n	80049d6 <xTaskGenericNotify+0xd2>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	617b      	str	r3, [r7, #20]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xTaskGenericNotify+0xcc>
					break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <xTaskGenericNotify+0xd4>

					break;
 80049d6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80049d8:	7ffb      	ldrb	r3, [r7, #31]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d139      	bne.n	8004a52 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff f9d5 	bl	8003d92 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	2201      	movs	r2, #1
 80049ee:	409a      	lsls	r2, r3
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <xTaskGenericNotify+0x15c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <xTaskGenericNotify+0x15c>)
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4a17      	ldr	r2, [pc, #92]	; (8004a64 <xTaskGenericNotify+0x160>)
 8004a08:	441a      	add	r2, r3
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f7ff f961 	bl	8003cd8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <xTaskGenericNotify+0x130>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	613b      	str	r3, [r7, #16]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <xTaskGenericNotify+0x164>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d907      	bls.n	8004a52 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004a42:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <xTaskGenericNotify+0x168>)
 8004a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004a52:	f000 faa7 	bl	8004fa4 <vPortExitCritical>

		return xReturn;
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3728      	adds	r7, #40	; 0x28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	2000047c 	.word	0x2000047c
 8004a64:	20000378 	.word	0x20000378
 8004a68:	20000374 	.word	0x20000374
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08e      	sub	sp, #56	; 0x38
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004a80:	2301      	movs	r3, #1
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a9c:	bf00      	nop
 8004a9e:	e7fe      	b.n	8004a9e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aa0:	f000 fb32 	bl	8005108 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aa8:	f3ef 8211 	mrs	r2, BASEPRI
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	623a      	str	r2, [r7, #32]
 8004abe:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ac0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d828      	bhi.n	8004b3c <xTaskGenericNotifyFromISR+0xcc>
 8004aea:	a201      	add	r2, pc, #4	; (adr r2, 8004af0 <xTaskGenericNotifyFromISR+0x80>)
 8004aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af0:	08004b5d 	.word	0x08004b5d
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b13 	.word	0x08004b13
 8004afc:	08004b1f 	.word	0x08004b1f
 8004b00:	08004b27 	.word	0x08004b27
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004b10:	e027      	b.n	8004b62 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004b1c:	e021      	b.n	8004b62 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004b24:	e01d      	b.n	8004b62 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004b26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d003      	beq.n	8004b36 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004b34:	e015      	b.n	8004b62 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004b3a:	e012      	b.n	8004b62 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d00c      	beq.n	8004b60 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	61bb      	str	r3, [r7, #24]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <xTaskGenericNotifyFromISR+0xea>
					break;
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <xTaskGenericNotifyFromISR+0xf2>
					break;
 8004b60:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004b62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d145      	bne.n	8004bf6 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	617b      	str	r3, [r7, #20]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b88:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <xTaskGenericNotifyFromISR+0x19c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d11c      	bne.n	8004bca <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	3304      	adds	r3, #4
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff f8fc 	bl	8003d92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	409a      	lsls	r2, r3
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <xTaskGenericNotifyFromISR+0x1a0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <xTaskGenericNotifyFromISR+0x1a0>)
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <xTaskGenericNotifyFromISR+0x1a4>)
 8004bba:	441a      	add	r2, r3
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f7ff f888 	bl	8003cd8 <vListInsertEnd>
 8004bc8:	e005      	b.n	8004bd6 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	3318      	adds	r3, #24
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4811      	ldr	r0, [pc, #68]	; (8004c18 <xTaskGenericNotifyFromISR+0x1a8>)
 8004bd2:	f7ff f881 	bl	8003cd8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <xTaskGenericNotifyFromISR+0x1ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d908      	bls.n	8004bf6 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <xTaskGenericNotifyFromISR+0x1b0>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c00:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3738      	adds	r7, #56	; 0x38
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	2000049c 	.word	0x2000049c
 8004c10:	2000047c 	.word	0x2000047c
 8004c14:	20000378 	.word	0x20000378
 8004c18:	20000434 	.word	0x20000434
 8004c1c:	20000374 	.word	0x20000374
 8004c20:	20000488 	.word	0x20000488

08004c24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c34:	4b28      	ldr	r3, [pc, #160]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f8a9 	bl	8003d92 <uxListRemove>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43da      	mvns	r2, r3
 8004c54:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c64:	d10a      	bne.n	8004c7c <prvAddCurrentTaskToDelayedList+0x58>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c6c:	4b1a      	ldr	r3, [pc, #104]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	481a      	ldr	r0, [pc, #104]	; (8004ce0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004c76:	f7ff f82f 	bl	8003cd8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c7a:	e026      	b.n	8004cca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c84:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d209      	bcs.n	8004ca8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f7ff f83d 	bl	8003d20 <vListInsert>
}
 8004ca6:	e010      	b.n	8004cca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f7ff f833 	bl	8003d20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d202      	bcs.n	8004cca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <prvAddCurrentTaskToDelayedList+0xc8>)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6013      	str	r3, [r2, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000478 	.word	0x20000478
 8004cd8:	20000374 	.word	0x20000374
 8004cdc:	2000047c 	.word	0x2000047c
 8004ce0:	20000460 	.word	0x20000460
 8004ce4:	20000430 	.word	0x20000430
 8004ce8:	2000042c 	.word	0x2000042c
 8004cec:	20000494 	.word	0x20000494

08004cf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3b04      	subs	r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3b04      	subs	r3, #4
 8004d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f023 0201 	bic.w	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3b04      	subs	r3, #4
 8004d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d20:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <pxPortInitialiseStack+0x64>)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3b14      	subs	r3, #20
 8004d2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3b04      	subs	r3, #4
 8004d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f06f 0202 	mvn.w	r2, #2
 8004d3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3b20      	subs	r3, #32
 8004d44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	08004d59 	.word	0x08004d59

08004d58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <prvTaskExitError+0x54>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d00a      	beq.n	8004d82 <prvTaskExitError+0x2a>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60fb      	str	r3, [r7, #12]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <prvTaskExitError+0x28>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	60bb      	str	r3, [r7, #8]
}
 8004d94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d96:	bf00      	nop
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0fc      	beq.n	8004d98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d9e:	bf00      	nop
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	20000374 	.word	0x20000374
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dfa:	bf00      	nop
 8004dfc:	e000ed08 	.word	0xe000ed08

08004e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e06:	4b46      	ldr	r3, [pc, #280]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <xPortStartScheduler+0x124>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x26>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e26:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <xPortStartScheduler+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3f      	ldr	r2, [pc, #252]	; (8004f28 <xPortStartScheduler+0x128>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10a      	bne.n	8004e46 <xPortStartScheduler+0x46>
	__asm volatile
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	60fb      	str	r3, [r7, #12]
}
 8004e42:	bf00      	nop
 8004e44:	e7fe      	b.n	8004e44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e46:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <xPortStartScheduler+0x12c>)
 8004e48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	22ff      	movs	r2, #255	; 0xff
 8004e56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <xPortStartScheduler+0x130>)
 8004e6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e74:	e009      	b.n	8004e8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	2b80      	cmp	r3, #128	; 0x80
 8004e94:	d0ef      	beq.n	8004e76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <xPortStartScheduler+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d00a      	beq.n	8004eb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60bb      	str	r3, [r7, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	e7fe      	b.n	8004eb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eb8:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <xPortStartScheduler+0x134>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eca:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <xPortStartScheduler+0x134>)
 8004ecc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ed6:	4b18      	ldr	r3, [pc, #96]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <xPortStartScheduler+0x138>)
 8004edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ee2:	4b15      	ldr	r3, [pc, #84]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <xPortStartScheduler+0x138>)
 8004ee8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004eec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004eee:	f000 f8dd 	bl	80050ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <xPortStartScheduler+0x13c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ef8:	f000 f8fc 	bl	80050f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <xPortStartScheduler+0x140>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <xPortStartScheduler+0x140>)
 8004f02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f08:	f7ff ff66 	bl	8004dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f0c:	f7ff faf4 	bl	80044f8 <vTaskSwitchContext>
	prvTaskExitError();
 8004f10:	f7ff ff22 	bl	8004d58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	410fc271 	.word	0x410fc271
 8004f28:	410fc270 	.word	0x410fc270
 8004f2c:	e000e400 	.word	0xe000e400
 8004f30:	200004a0 	.word	0x200004a0
 8004f34:	200004a4 	.word	0x200004a4
 8004f38:	e000ed20 	.word	0xe000ed20
 8004f3c:	2000000c 	.word	0x2000000c
 8004f40:	e000ef34 	.word	0xe000ef34

08004f44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	607b      	str	r3, [r7, #4]
}
 8004f5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <vPortEnterCritical+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10f      	bne.n	8004f90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <vPortEnterCritical+0x5c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vPortEnterCritical+0x4a>
	}
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <vPortExitCritical+0x24>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	607b      	str	r3, [r7, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fd2:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <vPortExitCritical+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d105      	bne.n	8004fe6 <vPortExitCritical+0x42>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c
	...

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7ff fa62 	bl	80044f8 <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	20000374 	.word	0x20000374
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
}
 8005080:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7ff f981 	bl	8004388 <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <SysTick_Handler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
}
 800509e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005102:	bf00      	nop
 8005104:	e000ed88 	.word	0xe000ed88

08005108 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800510e:	f3ef 8305 	mrs	r3, IPSR
 8005112:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	d914      	bls.n	8005144 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <vPortValidateInterruptPriority+0x70>)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005124:	4b15      	ldr	r3, [pc, #84]	; (800517c <vPortValidateInterruptPriority+0x74>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	7afa      	ldrb	r2, [r7, #11]
 800512a:	429a      	cmp	r2, r3
 800512c:	d20a      	bcs.n	8005144 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	607b      	str	r3, [r7, #4]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <vPortValidateInterruptPriority+0x78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800514c:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <vPortValidateInterruptPriority+0x7c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <vPortValidateInterruptPriority+0x60>
	}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	e000e3f0 	.word	0xe000e3f0
 800517c:	200004a0 	.word	0x200004a0
 8005180:	e000ed0c 	.word	0xe000ed0c
 8005184:	200004a4 	.word	0x200004a4

08005188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005194:	f7ff f84e 	bl	8004234 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005198:	4b5b      	ldr	r3, [pc, #364]	; (8005308 <pvPortMalloc+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a0:	f000 f920 	bl	80053e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051a4:	4b59      	ldr	r3, [pc, #356]	; (800530c <pvPortMalloc+0x184>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8093 	bne.w	80052d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01d      	beq.n	80051f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80051b8:	2208      	movs	r2, #8
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4413      	add	r3, r2
 80051be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d014      	beq.n	80051f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f023 0307 	bic.w	r3, r3, #7
 80051d0:	3308      	adds	r3, #8
 80051d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <pvPortMalloc+0x6c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	617b      	str	r3, [r7, #20]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06e      	beq.n	80052d8 <pvPortMalloc+0x150>
 80051fa:	4b45      	ldr	r3, [pc, #276]	; (8005310 <pvPortMalloc+0x188>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d869      	bhi.n	80052d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005204:	4b43      	ldr	r3, [pc, #268]	; (8005314 <pvPortMalloc+0x18c>)
 8005206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005208:	4b42      	ldr	r3, [pc, #264]	; (8005314 <pvPortMalloc+0x18c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800520e:	e004      	b.n	800521a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d903      	bls.n	800522c <pvPortMalloc+0xa4>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f1      	bne.n	8005210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <pvPortMalloc+0x180>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005232:	429a      	cmp	r2, r3
 8005234:	d050      	beq.n	80052d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2208      	movs	r2, #8
 800523c:	4413      	add	r3, r2
 800523e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	2308      	movs	r3, #8
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	429a      	cmp	r2, r3
 8005256:	d91f      	bls.n	8005298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4413      	add	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00a      	beq.n	8005280 <pvPortMalloc+0xf8>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	613b      	str	r3, [r7, #16]
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1ad2      	subs	r2, r2, r3
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005292:	69b8      	ldr	r0, [r7, #24]
 8005294:	f000 f908 	bl	80054a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <pvPortMalloc+0x188>)
 80052a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <pvPortMalloc+0x188>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <pvPortMalloc+0x190>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d203      	bcs.n	80052ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052b2:	4b17      	ldr	r3, [pc, #92]	; (8005310 <pvPortMalloc+0x188>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a18      	ldr	r2, [pc, #96]	; (8005318 <pvPortMalloc+0x190>)
 80052b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <pvPortMalloc+0x184>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ce:	4b13      	ldr	r3, [pc, #76]	; (800531c <pvPortMalloc+0x194>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3301      	adds	r3, #1
 80052d4:	4a11      	ldr	r2, [pc, #68]	; (800531c <pvPortMalloc+0x194>)
 80052d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052d8:	f7fe ffba 	bl	8004250 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <pvPortMalloc+0x174>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <pvPortMalloc+0x172>
	return pvReturn;
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200040b0 	.word	0x200040b0
 800530c:	200040c4 	.word	0x200040c4
 8005310:	200040b4 	.word	0x200040b4
 8005314:	200040a8 	.word	0x200040a8
 8005318:	200040b8 	.word	0x200040b8
 800531c:	200040bc 	.word	0x200040bc

08005320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d04d      	beq.n	80053ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005332:	2308      	movs	r3, #8
 8005334:	425b      	negs	r3, r3
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <vPortFree+0xb8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10a      	bne.n	8005364 <vPortFree+0x44>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	60fb      	str	r3, [r7, #12]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <vPortFree+0x62>
	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <vPortFree+0xb8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4013      	ands	r3, r2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01e      	beq.n	80053ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11a      	bne.n	80053ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <vPortFree+0xb8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	43db      	mvns	r3, r3
 80053a2:	401a      	ands	r2, r3
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053a8:	f7fe ff44 	bl	8004234 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b0a      	ldr	r3, [pc, #40]	; (80053dc <vPortFree+0xbc>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4413      	add	r3, r2
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <vPortFree+0xbc>)
 80053b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ba:	6938      	ldr	r0, [r7, #16]
 80053bc:	f000 f874 	bl	80054a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053c0:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ca:	f7fe ff41 	bl	8004250 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200040c4 	.word	0x200040c4
 80053dc:	200040b4 	.word	0x200040b4
 80053e0:	200040c0 	.word	0x200040c0

080053e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053f0:	4b27      	ldr	r3, [pc, #156]	; (8005490 <prvHeapInit+0xac>)
 80053f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00c      	beq.n	8005418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3307      	adds	r3, #7
 8005402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	4a1f      	ldr	r2, [pc, #124]	; (8005490 <prvHeapInit+0xac>)
 8005414:	4413      	add	r3, r2
 8005416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800541c:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <prvHeapInit+0xb0>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <prvHeapInit+0xb0>)
 8005424:	2200      	movs	r2, #0
 8005426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	4413      	add	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005430:	2208      	movs	r2, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a15      	ldr	r2, [pc, #84]	; (8005498 <prvHeapInit+0xb4>)
 8005444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <prvHeapInit+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <prvHeapInit+0xb4>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005464:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <prvHeapInit+0xb4>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <prvHeapInit+0xb8>)
 8005472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <prvHeapInit+0xbc>)
 800547a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800547c:	4b09      	ldr	r3, [pc, #36]	; (80054a4 <prvHeapInit+0xc0>)
 800547e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	200004a8 	.word	0x200004a8
 8005494:	200040a8 	.word	0x200040a8
 8005498:	200040b0 	.word	0x200040b0
 800549c:	200040b8 	.word	0x200040b8
 80054a0:	200040b4 	.word	0x200040b4
 80054a4:	200040c4 	.word	0x200040c4

080054a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <prvInsertBlockIntoFreeList+0xac>)
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	e002      	b.n	80054bc <prvInsertBlockIntoFreeList+0x14>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d8f7      	bhi.n	80054b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d108      	bne.n	80054ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	441a      	add	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d118      	bne.n	8005530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b15      	ldr	r3, [pc, #84]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d00d      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	441a      	add	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e008      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <prvInsertBlockIntoFreeList+0xb0>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e003      	b.n	8005538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	429a      	cmp	r2, r3
 800553e:	d002      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	200040a8 	.word	0x200040a8
 8005558:	200040b0 	.word	0x200040b0

0800555c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	2b05      	cmp	r3, #5
 8005570:	d122      	bne.n	80055b8 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3301      	adds	r3, #1
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3302      	adds	r3, #2
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b29a      	uxth	r2, r3
 8005586:	89bb      	ldrh	r3, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800558c:	89bb      	ldrh	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	1cd8      	adds	r0, r3, #3
 8005596:	89b9      	ldrh	r1, [r7, #12]
 8005598:	2301      	movs	r3, #1
 800559a:	2201      	movs	r2, #1
 800559c:	f000 fe92 	bl	80062c4 <eMBRegHoldingCB>
 80055a0:	4603      	mov	r3, r0
 80055a2:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 80055a4:	7afb      	ldrb	r3, [r7, #11]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d008      	beq.n	80055bc <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 80055aa:	7afb      	ldrb	r3, [r7, #11]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f90b 	bl	80057c8 <prveMBError2Exception>
 80055b2:	4603      	mov	r3, r0
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	e001      	b.n	80055bc <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80055b8:	2303      	movs	r3, #3
 80055ba:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	2b05      	cmp	r3, #5
 80055da:	d15f      	bne.n	800569c <eMBFuncReadHoldingRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3301      	adds	r3, #1
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3302      	adds	r3, #2
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	8abb      	ldrh	r3, [r7, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80055f6:	8abb      	ldrh	r3, [r7, #20]
 80055f8:	3301      	adds	r3, #1
 80055fa:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3303      	adds	r3, #3
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3304      	adds	r3, #4
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	b29a      	uxth	r2, r3
 8005610:	8a7b      	ldrh	r3, [r7, #18]
 8005612:	4313      	orrs	r3, r2
 8005614:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8005616:	8a7b      	ldrh	r3, [r7, #18]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d03c      	beq.n	8005696 <eMBFuncReadHoldingRegister+0xd0>
 800561c:	8a7b      	ldrh	r3, [r7, #18]
 800561e:	2b7d      	cmp	r3, #125	; 0x7d
 8005620:	d839      	bhi.n	8005696 <eMBFuncReadHoldingRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2200      	movs	r2, #0
 800562a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	60fa      	str	r2, [r7, #12]
 8005632:	2203      	movs	r2, #3
 8005634:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	3301      	adds	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 8005642:	8a7b      	ldrh	r3, [r7, #18]
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1c59      	adds	r1, r3, #1
 800564a:	60f9      	str	r1, [r7, #12]
 800564c:	0052      	lsls	r2, r2, #1
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	b29a      	uxth	r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 800565e:	8a7a      	ldrh	r2, [r7, #18]
 8005660:	8ab9      	ldrh	r1, [r7, #20]
 8005662:	2300      	movs	r3, #0
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fe2d 	bl	80062c4 <eMBRegHoldingCB>
 800566a:	4603      	mov	r3, r0
 800566c:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800566e:	7afb      	ldrb	r3, [r7, #11]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d006      	beq.n	8005682 <eMBFuncReadHoldingRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8005674:	7afb      	ldrb	r3, [r7, #11]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f8a6 	bl	80057c8 <prveMBError2Exception>
 800567c:	4603      	mov	r3, r0
 800567e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8005680:	e00e      	b.n	80056a0 <eMBFuncReadHoldingRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	881a      	ldrh	r2, [r3, #0]
 8005686:	8a7b      	ldrh	r3, [r7, #18]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	b29b      	uxth	r3, r3
 800568c:	4413      	add	r3, r2
 800568e:	b29a      	uxth	r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8005694:	e004      	b.n	80056a0 <eMBFuncReadHoldingRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005696:	2303      	movs	r3, #3
 8005698:	75fb      	strb	r3, [r7, #23]
 800569a:	e001      	b.n	80056a0 <eMBFuncReadHoldingRegister+0xda>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800569c:	2303      	movs	r3, #3
 800569e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80056b4:	2300      	movs	r3, #0
 80056b6:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	2b05      	cmp	r3, #5
 80056be:	d15f      	bne.n	8005780 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3301      	adds	r3, #1
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3302      	adds	r3, #2
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	8abb      	ldrh	r3, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80056da:	8abb      	ldrh	r3, [r7, #20]
 80056dc:	3301      	adds	r3, #1
 80056de:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	3303      	adds	r3, #3
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	8a7b      	ldrh	r3, [r7, #18]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80056fa:	8a7b      	ldrh	r3, [r7, #18]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d03c      	beq.n	800577a <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8005700:	8a7b      	ldrh	r3, [r7, #18]
 8005702:	2b7c      	cmp	r3, #124	; 0x7c
 8005704:	d839      	bhi.n	800577a <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2200      	movs	r2, #0
 800570e:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	60fa      	str	r2, [r7, #12]
 8005716:	2204      	movs	r2, #4
 8005718:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8005726:	8a7b      	ldrh	r3, [r7, #18]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	60f9      	str	r1, [r7, #12]
 8005730:	0052      	lsls	r2, r2, #1
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8005742:	8a7a      	ldrh	r2, [r7, #18]
 8005744:	8abb      	ldrh	r3, [r7, #20]
 8005746:	4619      	mov	r1, r3
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fd6b 	bl	8006224 <eMBRegInputCB>
 800574e:	4603      	mov	r3, r0
 8005750:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005752:	7afb      	ldrb	r3, [r7, #11]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8005758:	7afb      	ldrb	r3, [r7, #11]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f834 	bl	80057c8 <prveMBError2Exception>
 8005760:	4603      	mov	r3, r0
 8005762:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8005764:	e00e      	b.n	8005784 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	881a      	ldrh	r2, [r3, #0]
 800576a:	8a7b      	ldrh	r3, [r7, #18]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	b29b      	uxth	r3, r3
 8005770:	4413      	add	r3, r2
 8005772:	b29a      	uxth	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8005778:	e004      	b.n	8005784 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800577a:	2303      	movs	r3, #3
 800577c:	75fb      	strb	r3, [r7, #23]
 800577e:	e001      	b.n	8005784 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005780:	2303      	movs	r3, #3
 8005782:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3301      	adds	r3, #1
 800579e:	4a08      	ldr	r2, [pc, #32]	; (80057c0 <eMBFuncReportSlaveID+0x30>)
 80057a0:	8812      	ldrh	r2, [r2, #0]
 80057a2:	4908      	ldr	r1, [pc, #32]	; (80057c4 <eMBFuncReportSlaveID+0x34>)
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fdfb 	bl	80063a0 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <eMBFuncReportSlaveID+0x30>)
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	3301      	adds	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200040e8 	.word	0x200040e8
 80057c4:	200040c8 	.word	0x200040c8

080057c8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	2b07      	cmp	r3, #7
 80057d6:	d00c      	beq.n	80057f2 <prveMBError2Exception+0x2a>
 80057d8:	2b07      	cmp	r3, #7
 80057da:	dc0d      	bgt.n	80057f8 <prveMBError2Exception+0x30>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <prveMBError2Exception+0x1e>
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d003      	beq.n	80057ec <prveMBError2Exception+0x24>
 80057e4:	e008      	b.n	80057f8 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	73fb      	strb	r3, [r7, #15]
            break;
 80057ea:	e008      	b.n	80057fe <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80057ec:	2302      	movs	r3, #2
 80057ee:	73fb      	strb	r3, [r7, #15]
            break;
 80057f0:	e005      	b.n	80057fe <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80057f2:	2306      	movs	r3, #6
 80057f4:	73fb      	strb	r3, [r7, #15]
            break;
 80057f6:	e002      	b.n	80057fe <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80057f8:	2304      	movs	r3, #4
 80057fa:	73fb      	strb	r3, [r7, #15]
            break;
 80057fc:	bf00      	nop
    }

    return eStatus;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4603      	mov	r3, r0
 8005816:	71fb      	strb	r3, [r7, #7]
 8005818:	460b      	mov	r3, r1
 800581a:	71bb      	strb	r3, [r7, #6]
 800581c:	4613      	mov	r3, r2
 800581e:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005820:	2300      	movs	r3, #0
 8005822:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8005824:	79bb      	ldrb	r3, [r7, #6]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <eMBInit+0x2a>
 800582a:	79bb      	ldrb	r3, [r7, #6]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8005830:	79bb      	ldrb	r3, [r7, #6]
 8005832:	2bf7      	cmp	r3, #247	; 0xf7
 8005834:	d902      	bls.n	800583c <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8005836:	2302      	movs	r3, #2
 8005838:	73fb      	strb	r3, [r7, #15]
 800583a:	e03b      	b.n	80058b4 <eMBInit+0xa8>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 800583c:	4a20      	ldr	r2, [pc, #128]	; (80058c0 <eMBInit+0xb4>)
 800583e:	79bb      	ldrb	r3, [r7, #6]
 8005840:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d121      	bne.n	800588c <eMBInit+0x80>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8005848:	4b1e      	ldr	r3, [pc, #120]	; (80058c4 <eMBInit+0xb8>)
 800584a:	4a1f      	ldr	r2, [pc, #124]	; (80058c8 <eMBInit+0xbc>)
 800584c:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800584e:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <eMBInit+0xc0>)
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <eMBInit+0xc4>)
 8005852:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8005854:	4b1f      	ldr	r3, [pc, #124]	; (80058d4 <eMBInit+0xc8>)
 8005856:	4a20      	ldr	r2, [pc, #128]	; (80058d8 <eMBInit+0xcc>)
 8005858:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 800585a:	4b20      	ldr	r3, [pc, #128]	; (80058dc <eMBInit+0xd0>)
 800585c:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <eMBInit+0xd4>)
 800585e:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8005860:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <eMBInit+0xd8>)
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8005866:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <eMBInit+0xdc>)
 8005868:	4a20      	ldr	r2, [pc, #128]	; (80058ec <eMBInit+0xe0>)
 800586a:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 800586c:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <eMBInit+0xe4>)
 800586e:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <eMBInit+0xe8>)
 8005870:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8005872:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <eMBInit+0xec>)
 8005874:	4a21      	ldr	r2, [pc, #132]	; (80058fc <eMBInit+0xf0>)
 8005876:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <eMBInit+0xb4>)
 800587a:	7818      	ldrb	r0, [r3, #0]
 800587c:	7e3b      	ldrb	r3, [r7, #24]
 800587e:	7979      	ldrb	r1, [r7, #5]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	f000 fa89 	bl	8005d98 <eMBRTUInit>
 8005886:	4603      	mov	r3, r0
 8005888:	73fb      	strb	r3, [r7, #15]
            break;
 800588a:	e002      	b.n	8005892 <eMBInit+0x86>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 800588c:	2302      	movs	r3, #2
 800588e:	73fb      	strb	r3, [r7, #15]
            break;
 8005890:	bf00      	nop
        }

        if( eStatus == MB_ENOERR )
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10d      	bne.n	80058b4 <eMBInit+0xa8>
        {
            if( !xMBPortEventInit(  ) )
 8005898:	f000 f918 	bl	8005acc <xMBPortEventInit>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <eMBInit+0x9c>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 80058a2:	2303      	movs	r3, #3
 80058a4:	73fb      	strb	r3, [r7, #15]
 80058a6:	e005      	b.n	80058b4 <eMBInit+0xa8>
            }
            else
            {
                eMBCurrentMode = eMode;
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <eMBInit+0xf4>)
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 80058ae:	4b15      	ldr	r3, [pc, #84]	; (8005904 <eMBInit+0xf8>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200040ea 	.word	0x200040ea
 80058c4:	200040f0 	.word	0x200040f0
 80058c8:	08005e11 	.word	0x08005e11
 80058cc:	200040f4 	.word	0x200040f4
 80058d0:	08005e39 	.word	0x08005e39
 80058d4:	200040ec 	.word	0x200040ec
 80058d8:	08005ef1 	.word	0x08005ef1
 80058dc:	200040f8 	.word	0x200040f8
 80058e0:	08005e55 	.word	0x08005e55
 80058e4:	200040fc 	.word	0x200040fc
 80058e8:	20004298 	.word	0x20004298
 80058ec:	08005fb9 	.word	0x08005fb9
 80058f0:	20004290 	.word	0x20004290
 80058f4:	08006089 	.word	0x08006089
 80058f8:	20004294 	.word	0x20004294
 80058fc:	08006139 	.word	0x08006139
 8005900:	200040eb 	.word	0x200040eb
 8005904:	20000010 	.word	0x20000010

08005908 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800590e:	2300      	movs	r3, #0
 8005910:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <eMBEnable+0x30>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d106      	bne.n	8005928 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 800591a:	4b08      	ldr	r3, [pc, #32]	; (800593c <eMBEnable+0x34>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <eMBEnable+0x30>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	e001      	b.n	800592c <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8005928:	2306      	movs	r3, #6
 800592a:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 800592c:	79fb      	ldrb	r3, [r7, #7]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000010 	.word	0x20000010
 800593c:	200040f0 	.word	0x200040f0

08005940 <eMBPoll>:
    }
    return eStatus;
}

eMBErrorCode eMBPoll( void )
{
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8005946:	2300      	movs	r3, #0
 8005948:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 800594a:	4b56      	ldr	r3, [pc, #344]	; (8005aa4 <eMBPoll+0x164>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8005952:	2306      	movs	r3, #6
 8005954:	e0a1      	b.n	8005a9a <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8005956:	1cbb      	adds	r3, r7, #2
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f8d9 	bl	8005b10 <xMBPortEventGet>
 800595e:	4603      	mov	r3, r0
 8005960:	2b01      	cmp	r3, #1
 8005962:	f040 8094 	bne.w	8005a8e <eMBPoll+0x14e>
    {
        switch ( eEvent )
 8005966:	78bb      	ldrb	r3, [r7, #2]
 8005968:	3b01      	subs	r3, #1
 800596a:	2b07      	cmp	r3, #7
 800596c:	f200 8094 	bhi.w	8005a98 <eMBPoll+0x158>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <eMBPoll+0x38>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	08005a99 	.word	0x08005a99
 800597c:	08005999 	.word	0x08005999
 8005980:	08005a99 	.word	0x08005a99
 8005984:	080059cb 	.word	0x080059cb
 8005988:	08005a99 	.word	0x08005a99
 800598c:	08005a99 	.word	0x08005a99
 8005990:	08005a99 	.word	0x08005a99
 8005994:	08005a99 	.word	0x08005a99
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8005998:	4b43      	ldr	r3, [pc, #268]	; (8005aa8 <eMBPoll+0x168>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a43      	ldr	r2, [pc, #268]	; (8005aac <eMBPoll+0x16c>)
 800599e:	4944      	ldr	r1, [pc, #272]	; (8005ab0 <eMBPoll+0x170>)
 80059a0:	4844      	ldr	r0, [pc, #272]	; (8005ab4 <eMBPoll+0x174>)
 80059a2:	4798      	blx	r3
 80059a4:	4603      	mov	r3, r0
 80059a6:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d171      	bne.n	8005a92 <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 80059ae:	4b41      	ldr	r3, [pc, #260]	; (8005ab4 <eMBPoll+0x174>)
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	4b41      	ldr	r3, [pc, #260]	; (8005ab8 <eMBPoll+0x178>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d003      	beq.n	80059c2 <eMBPoll+0x82>
 80059ba:	4b3e      	ldr	r3, [pc, #248]	; (8005ab4 <eMBPoll+0x174>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d167      	bne.n	8005a92 <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 80059c2:	2004      	movs	r0, #4
 80059c4:	f000 f892 	bl	8005aec <xMBPortEventPost>
                }
            }
            break;
 80059c8:	e063      	b.n	8005a92 <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80059ca:	4b39      	ldr	r3, [pc, #228]	; (8005ab0 <eMBPoll+0x170>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	781a      	ldrb	r2, [r3, #0]
 80059d0:	4b3a      	ldr	r3, [pc, #232]	; (8005abc <eMBPoll+0x17c>)
 80059d2:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80059d4:	4b3a      	ldr	r3, [pc, #232]	; (8005ac0 <eMBPoll+0x180>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80059da:	2300      	movs	r3, #0
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	e01f      	b.n	8005a20 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 80059e0:	4a38      	ldr	r2, [pc, #224]	; (8005ac4 <eMBPoll+0x184>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01d      	beq.n	8005a28 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 80059ec:	4a35      	ldr	r2, [pc, #212]	; (8005ac4 <eMBPoll+0x184>)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80059f4:	4b31      	ldr	r3, [pc, #196]	; (8005abc <eMBPoll+0x17c>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d10e      	bne.n	8005a1a <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80059fc:	4a31      	ldr	r2, [pc, #196]	; (8005ac4 <eMBPoll+0x184>)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <eMBPoll+0x170>)
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	4928      	ldr	r1, [pc, #160]	; (8005aac <eMBPoll+0x16c>)
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	4603      	mov	r3, r0
 8005a12:	461a      	mov	r2, r3
 8005a14:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <eMBPoll+0x180>)
 8005a16:	701a      	strb	r2, [r3, #0]
                    break;
 8005a18:	e007      	b.n	8005a2a <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b0f      	cmp	r3, #15
 8005a24:	dddc      	ble.n	80059e0 <eMBPoll+0xa0>
 8005a26:	e000      	b.n	8005a2a <eMBPoll+0xea>
                    break;
 8005a28:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <eMBPoll+0x174>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d031      	beq.n	8005a96 <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 8005a32:	4b23      	ldr	r3, [pc, #140]	; (8005ac0 <eMBPoll+0x180>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d01d      	beq.n	8005a76 <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8005a3a:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <eMBPoll+0x16c>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8005a40:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <eMBPoll+0x17c>)
 8005a42:	781a      	ldrb	r2, [r3, #0]
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <eMBPoll+0x170>)
 8005a46:	6819      	ldr	r1, [r3, #0]
 8005a48:	4b18      	ldr	r3, [pc, #96]	; (8005aac <eMBPoll+0x16c>)
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	1c58      	adds	r0, r3, #1
 8005a4e:	b284      	uxth	r4, r0
 8005a50:	4816      	ldr	r0, [pc, #88]	; (8005aac <eMBPoll+0x16c>)
 8005a52:	8004      	strh	r4, [r0, #0]
 8005a54:	440b      	add	r3, r1
 8005a56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8005a5e:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <eMBPoll+0x170>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <eMBPoll+0x16c>)
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	1c59      	adds	r1, r3, #1
 8005a68:	b288      	uxth	r0, r1
 8005a6a:	4910      	ldr	r1, [pc, #64]	; (8005aac <eMBPoll+0x16c>)
 8005a6c:	8008      	strh	r0, [r1, #0]
 8005a6e:	4413      	add	r3, r2
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <eMBPoll+0x180>)
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	701a      	strb	r2, [r3, #0]
                }
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <eMBPoll+0x188>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a0f      	ldr	r2, [pc, #60]	; (8005ab8 <eMBPoll+0x178>)
 8005a7c:	7810      	ldrb	r0, [r2, #0]
 8005a7e:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <eMBPoll+0x170>)
 8005a80:	6811      	ldr	r1, [r2, #0]
 8005a82:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <eMBPoll+0x16c>)
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	4798      	blx	r3
 8005a88:	4603      	mov	r3, r0
 8005a8a:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8005a8c:	e003      	b.n	8005a96 <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 8005a8e:	bf00      	nop
 8005a90:	e002      	b.n	8005a98 <eMBPoll+0x158>
            break;
 8005a92:	bf00      	nop
 8005a94:	e000      	b.n	8005a98 <eMBPoll+0x158>
            break;
 8005a96:	bf00      	nop
    return MB_ENOERR;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd90      	pop	{r4, r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000010 	.word	0x20000010
 8005aa8:	200040f8 	.word	0x200040f8
 8005aac:	20004108 	.word	0x20004108
 8005ab0:	20004104 	.word	0x20004104
 8005ab4:	20004100 	.word	0x20004100
 8005ab8:	200040ea 	.word	0x200040ea
 8005abc:	2000410a 	.word	0x2000410a
 8005ac0:	2000410b 	.word	0x2000410b
 8005ac4:	20000014 	.word	0x20000014
 8005ac8:	200040ec 	.word	0x200040ec

08005acc <xMBPortEventInit>:
static StaticEventGroup_t xSlaveOsEventGroup;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
    xSlaveOsEvent_h = xEventGroupCreateStatic( &xSlaveOsEventGroup );
 8005ad0:	4804      	ldr	r0, [pc, #16]	; (8005ae4 <xMBPortEventInit+0x18>)
 8005ad2:	f7fd ff21 	bl	8003918 <xEventGroupCreateStatic>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	4a03      	ldr	r2, [pc, #12]	; (8005ae8 <xMBPortEventInit+0x1c>)
 8005ada:	6013      	str	r3, [r2, #0]

    return TRUE;
 8005adc:	2301      	movs	r3, #1
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20004110 	.word	0x20004110
 8005ae8:	2000410c 	.word	0x2000410c

08005aec <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	71fb      	strb	r3, [r7, #7]
    xEventGroupSetBits(&xSlaveOsEventGroup, eEvent);
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	4619      	mov	r1, r3
 8005afa:	4804      	ldr	r0, [pc, #16]	; (8005b0c <xMBPortEventPost+0x20>)
 8005afc:	f7fe f812 	bl	8003b24 <xEventGroupSetBits>
    return TRUE;
 8005b00:	2301      	movs	r3, #1
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20004110 	.word	0x20004110

08005b10 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	6078      	str	r0, [r7, #4]
    EventBits_t uxBits;
    const TickType_t xTicksToWait = 100 / portTICK_PERIOD_MS;
 8005b18:	2364      	movs	r3, #100	; 0x64
 8005b1a:	60fb      	str	r3, [r7, #12]

    /* waiting forever OS event */
    uxBits  = xEventGroupWaitBits(&xSlaveOsEventGroup,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	2300      	movs	r3, #0
 8005b22:	2201      	movs	r2, #1
 8005b24:	210f      	movs	r1, #15
 8005b26:	4816      	ldr	r0, [pc, #88]	; (8005b80 <xMBPortEventGet+0x70>)
 8005b28:	f7fd ff2e 	bl	8003988 <xEventGroupWaitBits>
 8005b2c:	60b8      	str	r0, [r7, #8]
            EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,
            pdTRUE,
            pdFALSE,
            xTicksToWait );

    if (uxBits & EV_READY) {
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <xMBPortEventGet+0x30>
        *eEvent = EV_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e019      	b.n	8005b74 <xMBPortEventGet+0x64>
    }else if (uxBits &EV_FRAME_RECEIVED) {
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <xMBPortEventGet+0x42>
        *eEvent = EV_FRAME_RECEIVED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e010      	b.n	8005b74 <xMBPortEventGet+0x64>
    }else if (uxBits & EV_EXECUTE){
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <xMBPortEventGet+0x54>
        *eEvent = EV_EXECUTE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e007      	b.n	8005b74 <xMBPortEventGet+0x64>
    }else if (uxBits & EV_FRAME_SENT) {
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <xMBPortEventGet+0x64>
        *eEvent = EV_FRAME_SENT;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2208      	movs	r2, #8
 8005b72:	701a      	strb	r2, [r3, #0]
    }else {

    }
    
    return TRUE;
 8005b74:	2301      	movs	r3, #1
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20004110 	.word	0x20004110

08005b84 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart2;
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	460a      	mov	r2, r1
 8005b8e:	71fb      	strb	r3, [r7, #7]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d008      	beq.n	8005bac <vMBPortSerialEnable+0x28>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <vMBPortSerialEnable+0x6c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <vMBPortSerialEnable+0x6c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0220 	orr.w	r2, r2, #32
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	e007      	b.n	8005bbc <vMBPortSerialEnable+0x38>
  } else {    
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <vMBPortSerialEnable+0x6c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <vMBPortSerialEnable+0x6c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0220 	bic.w	r2, r2, #32
 8005bba:	60da      	str	r2, [r3, #12]
  }
  
  if (xTxEnable) {    
 8005bbc:	79bb      	ldrb	r3, [r7, #6]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d008      	beq.n	8005bd4 <vMBPortSerialEnable+0x50>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <vMBPortSerialEnable+0x6c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <vMBPortSerialEnable+0x6c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005bd0:	60da      	str	r2, [r3, #12]
  } else {
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
  }  
}
 8005bd2:	e007      	b.n	8005be4 <vMBPortSerialEnable+0x60>
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8005bd4:	4b06      	ldr	r3, [pc, #24]	; (8005bf0 <vMBPortSerialEnable+0x6c>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <vMBPortSerialEnable+0x6c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005be2:	60da      	str	r2, [r3, #12]
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	200041b8 	.word	0x200041b8

08005bf4 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6039      	str	r1, [r7, #0]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	71fb      	strb	r3, [r7, #7]
 8005c04:	460b      	mov	r3, r1
 8005c06:	71bb      	strb	r3, [r7, #6]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	717b      	strb	r3, [r7, #5]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8005c0c:	2301      	movs	r3, #1
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10));
 8005c26:	1df9      	adds	r1, r7, #7
 8005c28:	230a      	movs	r3, #10
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4806      	ldr	r0, [pc, #24]	; (8005c48 <xMBPortSerialPutByte+0x2c>)
 8005c2e:	f7fc ffe6 	bl	8002bfe <HAL_UART_Transmit>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200041b8 	.word	0x200041b8

08005c4c <xMBPortSerialGetByte>:
  return (HAL_OK == HAL_UART_Transmit_DMA(&huart2, (uint8_t*)ucBytePtr, ulBufferLen));
}

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);  
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <xMBPortSerialGetByte+0x24>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8005c60:	2301      	movs	r3, #1
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	200041b8 	.word	0x200041b8

08005c74 <xMBPortTimersInit>:
extern uint16_t downcounter;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim7.Instance = TIM7;
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <xMBPortTimersInit+0x70>)
 8005c80:	4a19      	ldr	r2, [pc, #100]	; (8005ce8 <xMBPortTimersInit+0x74>)
 8005c82:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8005c84:	f7fc fbc4 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4a18      	ldr	r2, [pc, #96]	; (8005cec <xMBPortTimersInit+0x78>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	0c9b      	lsrs	r3, r3, #18
 8005c92:	3b01      	subs	r3, #1
 8005c94:	4a13      	ldr	r2, [pc, #76]	; (8005ce4 <xMBPortTimersInit+0x70>)
 8005c96:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c98:	4b12      	ldr	r3, [pc, #72]	; (8005ce4 <xMBPortTimersInit+0x70>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50 - 1;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <xMBPortTimersInit+0x70>)
 8005ca0:	2231      	movs	r2, #49	; 0x31
 8005ca2:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8005ca4:	4a12      	ldr	r2, [pc, #72]	; (8005cf0 <xMBPortTimersInit+0x7c>)
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005caa:	480e      	ldr	r0, [pc, #56]	; (8005ce4 <xMBPortTimersInit+0x70>)
 8005cac:	f7fc fc0a 	bl	80024c4 <HAL_TIM_Base_Init>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <xMBPortTimersInit+0x46>
  {
    return FALSE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e00f      	b.n	8005cda <xMBPortTimersInit+0x66>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cba:	2320      	movs	r3, #32
 8005cbc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005cc2:	f107 0308 	add.w	r3, r7, #8
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4806      	ldr	r0, [pc, #24]	; (8005ce4 <xMBPortTimersInit+0x70>)
 8005cca:	f7fc febb 	bl	8002a44 <HAL_TIMEx_MasterConfigSynchronization>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <xMBPortTimersInit+0x64>
  {
    return FALSE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e000      	b.n	8005cda <xMBPortTimersInit+0x66>
  }
  
  return TRUE;
 8005cd8:	2301      	movs	r3, #1
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	200041fc 	.word	0x200041fc
 8005ce8:	40001400 	.word	0x40001400
 8005cec:	431bde83 	.word	0x431bde83
 8005cf0:	2000036c 	.word	0x2000036c

08005cf4 <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <vMBPortTimersEnable+0x18>)
 8005cfa:	881a      	ldrh	r2, [r3, #0]
 8005cfc:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <vMBPortTimersEnable+0x1c>)
 8005cfe:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 8005d00:	4804      	ldr	r0, [pc, #16]	; (8005d14 <vMBPortTimersEnable+0x20>)
 8005d02:	f7fc fc2f 	bl	8002564 <HAL_TIM_Base_Start_IT>
}
 8005d06:	bf00      	nop
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	2000036c 	.word	0x2000036c
 8005d10:	2000036e 	.word	0x2000036e
 8005d14:	200041fc 	.word	0x200041fc

08005d18 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim7);
 8005d1c:	4802      	ldr	r0, [pc, #8]	; (8005d28 <vMBPortTimersDisable+0x10>)
 8005d1e:	f7fc fc91 	bl	8002644 <HAL_TIM_Base_Stop_IT>
}
 8005d22:	bf00      	nop
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	200041fc 	.word	0x200041fc

08005d2c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8005d38:	23ff      	movs	r3, #255	; 0xff
 8005d3a:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8005d3c:	23ff      	movs	r3, #255	; 0xff
 8005d3e:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8005d40:	e013      	b.n	8005d6a <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	781a      	ldrb	r2, [r3, #0]
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	4053      	eors	r3, r2
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8005d52:	4a0f      	ldr	r2, [pc, #60]	; (8005d90 <usMBCRC16+0x64>)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	4413      	add	r3, r2
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	4053      	eors	r3, r2
 8005d5e:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8005d60:	4a0c      	ldr	r2, [pc, #48]	; (8005d94 <usMBCRC16+0x68>)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8005d6a:	887b      	ldrh	r3, [r7, #2]
 8005d6c:	1e5a      	subs	r2, r3, #1
 8005d6e:	807a      	strh	r2, [r7, #2]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e6      	bne.n	8005d42 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	b21a      	sxth	r2, r3
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
 8005d7c:	b21b      	sxth	r3, r3
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	b21b      	sxth	r3, r3
 8005d82:	b29b      	uxth	r3, r3
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	0800745c 	.word	0x0800745c
 8005d94:	0800755c 	.word	0x0800755c

08005d98 <eMBRTUInit>:

volatile uint8_t  txDmaDone = 0;
/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	603a      	str	r2, [r7, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
 8005da6:	460b      	mov	r3, r1
 8005da8:	71bb      	strb	r3, [r7, #6]
 8005daa:	4613      	mov	r3, r2
 8005dac:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005db2:	b672      	cpsid	i
}
 8005db4:	bf00      	nop

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8005db6:	797b      	ldrb	r3, [r7, #5]
 8005db8:	79b8      	ldrb	r0, [r7, #6]
 8005dba:	2208      	movs	r2, #8
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	f7ff ff19 	bl	8005bf4 <xMBPortSerialInit>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d002      	beq.n	8005dce <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	73fb      	strb	r3, [r7, #15]
 8005dcc:	e016      	b.n	8005dfc <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8005dd4:	d902      	bls.n	8005ddc <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8005dd6:	2323      	movs	r3, #35	; 0x23
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	e005      	b.n	8005de8 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <eMBRTUInit+0x74>)
 8005de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de6:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff ff41 	bl	8005c74 <xMBPortTimersInit>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d001      	beq.n	8005dfc <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005dfc:	b662      	cpsie	i
}
 8005dfe:	bf00      	nop
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	00177fa0 	.word	0x00177fa0

08005e10 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e14:	b672      	cpsid	i
}
 8005e16:	bf00      	nop
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8005e18:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <eMBRTUStart+0x24>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8005e1e:	2100      	movs	r1, #0
 8005e20:	2001      	movs	r0, #1
 8005e22:	f7ff feaf 	bl	8005b84 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8005e26:	f7ff ff65 	bl	8005cf4 <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8005e2a:	b662      	cpsie	i
}
 8005e2c:	bf00      	nop

    EXIT_CRITICAL_SECTION(  );
}
 8005e2e:	bf00      	nop
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	2000412d 	.word	0x2000412d

08005e38 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005e3c:	b672      	cpsid	i
}
 8005e3e:	bf00      	nop
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8005e40:	2100      	movs	r1, #0
 8005e42:	2000      	movs	r0, #0
 8005e44:	f7ff fe9e 	bl	8005b84 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8005e48:	f7ff ff66 	bl	8005d18 <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8005e4c:	b662      	cpsie	i
}
 8005e4e:	bf00      	nop
    EXIT_CRITICAL_SECTION(  );
}
 8005e50:	bf00      	nop
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005e64:	2300      	movs	r3, #0
 8005e66:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e68:	b672      	cpsid	i
}
 8005e6a:	bf00      	nop
	
	 (void)(xFrameReceived);
	

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8005e6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ed8 <eMBRTUReceive+0x84>)
 8005e6e:	881b      	ldrh	r3, [r3, #0]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2bff      	cmp	r3, #255	; 0xff
 8005e74:	d905      	bls.n	8005e82 <eMBRTUReceive+0x2e>
 8005e76:	4b19      	ldr	r3, [pc, #100]	; (8005edc <eMBRTUReceive+0x88>)
 8005e78:	4a19      	ldr	r2, [pc, #100]	; (8005ee0 <eMBRTUReceive+0x8c>)
 8005e7a:	21a2      	movs	r1, #162	; 0xa2
 8005e7c:	4819      	ldr	r0, [pc, #100]	; (8005ee4 <eMBRTUReceive+0x90>)
 8005e7e:	f000 fa35 	bl	80062ec <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <eMBRTUReceive+0x84>)
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d91b      	bls.n	8005ec4 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8005e8c:	4b12      	ldr	r3, [pc, #72]	; (8005ed8 <eMBRTUReceive+0x84>)
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	4814      	ldr	r0, [pc, #80]	; (8005ee8 <eMBRTUReceive+0x94>)
 8005e96:	f7ff ff49 	bl	8005d2c <usMBCRC16>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d111      	bne.n	8005ec4 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8005ea0:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <eMBRTUReceive+0x94>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <eMBRTUReceive+0x84>)
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b03      	subs	r3, #3
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <eMBRTUReceive+0x98>)
 8005ebc:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	75bb      	strb	r3, [r7, #22]
 8005ec2:	e001      	b.n	8005ec8 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 8005ec4:	2305      	movs	r3, #5
 8005ec6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ec8:	b662      	cpsie	i
}
 8005eca:	bf00      	nop
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	20004136 	.word	0x20004136
 8005edc:	08007354 	.word	0x08007354
 8005ee0:	0800765c 	.word	0x0800765c
 8005ee4:	0800737c 	.word	0x0800737c
 8005ee8:	200042a4 	.word	0x200042a4
 8005eec:	200042a5 	.word	0x200042a5

08005ef0 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	6039      	str	r1, [r7, #0]
 8005efa:	71fb      	strb	r3, [r7, #7]
 8005efc:	4613      	mov	r3, r2
 8005efe:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005f00:	2300      	movs	r3, #0
 8005f02:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f04:	b672      	cpsid	i
}
 8005f06:	bf00      	nop

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8005f08:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <eMBRTUSend+0xb4>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d13f      	bne.n	8005f92 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	4a24      	ldr	r2, [pc, #144]	; (8005fa8 <eMBRTUSend+0xb8>)
 8005f18:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8005f1a:	4b24      	ldr	r3, [pc, #144]	; (8005fac <eMBRTUSend+0xbc>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <eMBRTUSend+0xb8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	79fa      	ldrb	r2, [r7, #7]
 8005f26:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8005f28:	4b20      	ldr	r3, [pc, #128]	; (8005fac <eMBRTUSend+0xbc>)
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	88bb      	ldrh	r3, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <eMBRTUSend+0xbc>)
 8005f36:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <eMBRTUSend+0xb8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	; (8005fac <eMBRTUSend+0xbc>)
 8005f3e:	8812      	ldrh	r2, [r2, #0]
 8005f40:	b292      	uxth	r2, r2
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7ff fef1 	bl	8005d2c <usMBCRC16>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8005f4e:	4b17      	ldr	r3, [pc, #92]	; (8005fac <eMBRTUSend+0xbc>)
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	b291      	uxth	r1, r2
 8005f58:	4a14      	ldr	r2, [pc, #80]	; (8005fac <eMBRTUSend+0xbc>)
 8005f5a:	8011      	strh	r1, [r2, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	89bb      	ldrh	r3, [r7, #12]
 8005f60:	b2d9      	uxtb	r1, r3
 8005f62:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <eMBRTUSend+0xc0>)
 8005f64:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8005f66:	89bb      	ldrh	r3, [r7, #12]
 8005f68:	0a1b      	lsrs	r3, r3, #8
 8005f6a:	b299      	uxth	r1, r3
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <eMBRTUSend+0xbc>)
 8005f6e:	881b      	ldrh	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	b290      	uxth	r0, r2
 8005f76:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <eMBRTUSend+0xbc>)
 8005f78:	8010      	strh	r0, [r2, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	b2c9      	uxtb	r1, r1
 8005f7e:	4b0c      	ldr	r3, [pc, #48]	; (8005fb0 <eMBRTUSend+0xc0>)
 8005f80:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8005f82:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <eMBRTUSend+0xc4>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8005f88:	2101      	movs	r1, #1
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f7ff fdfa 	bl	8005b84 <vMBPortSerialEnable>
 8005f90:	e001      	b.n	8005f96 <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8005f92:	2305      	movs	r3, #5
 8005f94:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005f96:	b662      	cpsie	i
}
 8005f98:	bf00      	nop
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	2000412d 	.word	0x2000412d
 8005fa8:	20004130 	.word	0x20004130
 8005fac:	20004134 	.word	0x20004134
 8005fb0:	200042a4 	.word	0x200042a4
 8005fb4:	2000412c 	.word	0x2000412c

08005fb8 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8005fc2:	4b2a      	ldr	r3, [pc, #168]	; (800606c <xMBRTUReceiveFSM+0xb4>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <xMBRTUReceiveFSM+0x20>
 8005fcc:	4b28      	ldr	r3, [pc, #160]	; (8006070 <xMBRTUReceiveFSM+0xb8>)
 8005fce:	4a29      	ldr	r2, [pc, #164]	; (8006074 <xMBRTUReceiveFSM+0xbc>)
 8005fd0:	21ec      	movs	r1, #236	; 0xec
 8005fd2:	4829      	ldr	r0, [pc, #164]	; (8006078 <xMBRTUReceiveFSM+0xc0>)
 8005fd4:	f000 f98a 	bl	80062ec <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8005fd8:	1dbb      	adds	r3, r7, #6
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fe36 	bl	8005c4c <xMBPortSerialGetByte>

    switch ( eRcvState )
 8005fe0:	4b26      	ldr	r3, [pc, #152]	; (800607c <xMBRTUReceiveFSM+0xc4>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d83b      	bhi.n	8006062 <xMBRTUReceiveFSM+0xaa>
 8005fea:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <xMBRTUReceiveFSM+0x38>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006001 	.word	0x08006001
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006035 	.word	0x08006035
 8005ffc:	08006007 	.word	0x08006007
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8006000:	f7ff fe78 	bl	8005cf4 <vMBPortTimersEnable>
        break;
 8006004:	e02d      	b.n	8006062 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8006006:	f7ff fe75 	bl	8005cf4 <vMBPortTimersEnable>
        break;
 800600a:	e02a      	b.n	8006062 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 800600c:	4b1c      	ldr	r3, [pc, #112]	; (8006080 <xMBRTUReceiveFSM+0xc8>)
 800600e:	2200      	movs	r2, #0
 8006010:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8006012:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <xMBRTUReceiveFSM+0xc8>)
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	b291      	uxth	r1, r2
 800601c:	4a18      	ldr	r2, [pc, #96]	; (8006080 <xMBRTUReceiveFSM+0xc8>)
 800601e:	8011      	strh	r1, [r2, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	79b9      	ldrb	r1, [r7, #6]
 8006024:	4b17      	ldr	r3, [pc, #92]	; (8006084 <xMBRTUReceiveFSM+0xcc>)
 8006026:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <xMBRTUReceiveFSM+0xc4>)
 800602a:	2202      	movs	r2, #2
 800602c:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 800602e:	f7ff fe61 	bl	8005cf4 <vMBPortTimersEnable>
        break;
 8006032:	e016      	b.n	8006062 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8006034:	4b12      	ldr	r3, [pc, #72]	; (8006080 <xMBRTUReceiveFSM+0xc8>)
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	2bff      	cmp	r3, #255	; 0xff
 800603c:	d80b      	bhi.n	8006056 <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 800603e:	4b10      	ldr	r3, [pc, #64]	; (8006080 <xMBRTUReceiveFSM+0xc8>)
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	b291      	uxth	r1, r2
 8006048:	4a0d      	ldr	r2, [pc, #52]	; (8006080 <xMBRTUReceiveFSM+0xc8>)
 800604a:	8011      	strh	r1, [r2, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	79b9      	ldrb	r1, [r7, #6]
 8006050:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <xMBRTUReceiveFSM+0xcc>)
 8006052:	5499      	strb	r1, [r3, r2]
 8006054:	e002      	b.n	800605c <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8006056:	4b09      	ldr	r3, [pc, #36]	; (800607c <xMBRTUReceiveFSM+0xc4>)
 8006058:	2203      	movs	r2, #3
 800605a:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 800605c:	f7ff fe4a 	bl	8005cf4 <vMBPortTimersEnable>
        break;
 8006060:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8006062:	79fb      	ldrb	r3, [r7, #7]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	2000412c 	.word	0x2000412c
 8006070:	080073a0 	.word	0x080073a0
 8006074:	0800766c 	.word	0x0800766c
 8006078:	0800737c 	.word	0x0800737c
 800607c:	2000412d 	.word	0x2000412d
 8006080:	20004136 	.word	0x20004136
 8006084:	200042a4 	.word	0x200042a4

08006088 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800608e:	2300      	movs	r3, #0
 8006090:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8006092:	4b22      	ldr	r3, [pc, #136]	; (800611c <xMBRTUTransmitFSM+0x94>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d006      	beq.n	80060aa <xMBRTUTransmitFSM+0x22>
 800609c:	4b20      	ldr	r3, [pc, #128]	; (8006120 <xMBRTUTransmitFSM+0x98>)
 800609e:	4a21      	ldr	r2, [pc, #132]	; (8006124 <xMBRTUTransmitFSM+0x9c>)
 80060a0:	f240 1127 	movw	r1, #295	; 0x127
 80060a4:	4820      	ldr	r0, [pc, #128]	; (8006128 <xMBRTUTransmitFSM+0xa0>)
 80060a6:	f000 f921 	bl	80062ec <__assert_func>

    switch ( eSndState )
 80060aa:	4b20      	ldr	r3, [pc, #128]	; (800612c <xMBRTUTransmitFSM+0xa4>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <xMBRTUTransmitFSM+0x32>
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d005      	beq.n	80060c4 <xMBRTUTransmitFSM+0x3c>
 80060b8:	e02a      	b.n	8006110 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 80060ba:	2100      	movs	r1, #0
 80060bc:	2001      	movs	r0, #1
 80060be:	f7ff fd61 	bl	8005b84 <vMBPortSerialEnable>
        break;
 80060c2:	e025      	b.n	8006110 <xMBRTUTransmitFSM+0x88>
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
        eSndState = STATE_TX_IDLE;     
#else 
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <xMBRTUTransmitFSM+0xa8>)
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d013      	beq.n	80060f6 <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 80060ce:	4b19      	ldr	r3, [pc, #100]	; (8006134 <xMBRTUTransmitFSM+0xac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff fda0 	bl	8005c1c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 80060dc:	4b15      	ldr	r3, [pc, #84]	; (8006134 <xMBRTUTransmitFSM+0xac>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3301      	adds	r3, #1
 80060e2:	4a14      	ldr	r2, [pc, #80]	; (8006134 <xMBRTUTransmitFSM+0xac>)
 80060e4:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 80060e6:	4b12      	ldr	r3, [pc, #72]	; (8006130 <xMBRTUTransmitFSM+0xa8>)
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <xMBRTUTransmitFSM+0xa8>)
 80060f2:	801a      	strh	r2, [r3, #0]
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
#endif /* MB_RTU_USE_DMA */        
        break;
 80060f4:	e00b      	b.n	800610e <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 80060f6:	2008      	movs	r0, #8
 80060f8:	f7ff fcf8 	bl	8005aec <xMBPortEventPost>
 80060fc:	4603      	mov	r3, r0
 80060fe:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8006100:	2100      	movs	r1, #0
 8006102:	2001      	movs	r0, #1
 8006104:	f7ff fd3e 	bl	8005b84 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8006108:	4b08      	ldr	r3, [pc, #32]	; (800612c <xMBRTUTransmitFSM+0xa4>)
 800610a:	2200      	movs	r2, #0
 800610c:	701a      	strb	r2, [r3, #0]
        break;
 800610e:	bf00      	nop
    }

    return xNeedPoll;
 8006110:	79fb      	ldrb	r3, [r7, #7]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	2000412d 	.word	0x2000412d
 8006120:	080073bc 	.word	0x080073bc
 8006124:	08007680 	.word	0x08007680
 8006128:	0800737c 	.word	0x0800737c
 800612c:	2000412c 	.word	0x2000412c
 8006130:	20004134 	.word	0x20004134
 8006134:	20004130 	.word	0x20004130

08006138 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8006142:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <xMBRTUTimerT35Expired+0x7c>)
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b03      	cmp	r3, #3
 800614a:	d028      	beq.n	800619e <xMBRTUTimerT35Expired+0x66>
 800614c:	2b03      	cmp	r3, #3
 800614e:	dc10      	bgt.n	8006172 <xMBRTUTimerT35Expired+0x3a>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <xMBRTUTimerT35Expired+0x22>
 8006154:	2b02      	cmp	r3, #2
 8006156:	d006      	beq.n	8006166 <xMBRTUTimerT35Expired+0x2e>
 8006158:	e00b      	b.n	8006172 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 800615a:	2001      	movs	r0, #1
 800615c:	f7ff fcc6 	bl	8005aec <xMBPortEventPost>
 8006160:	4603      	mov	r3, r0
 8006162:	71fb      	strb	r3, [r7, #7]
        break;
 8006164:	e01c      	b.n	80061a0 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8006166:	2002      	movs	r0, #2
 8006168:	f7ff fcc0 	bl	8005aec <xMBPortEventPost>
 800616c:	4603      	mov	r3, r0
 800616e:	71fb      	strb	r3, [r7, #7]
        break;
 8006170:	e016      	b.n	80061a0 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <xMBRTUTimerT35Expired+0x7c>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b00      	cmp	r3, #0
 800617a:	d011      	beq.n	80061a0 <xMBRTUTimerT35Expired+0x68>
 800617c:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <xMBRTUTimerT35Expired+0x7c>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d00c      	beq.n	80061a0 <xMBRTUTimerT35Expired+0x68>
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <xMBRTUTimerT35Expired+0x7c>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b03      	cmp	r3, #3
 800618e:	d007      	beq.n	80061a0 <xMBRTUTimerT35Expired+0x68>
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <xMBRTUTimerT35Expired+0x80>)
 8006192:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <xMBRTUTimerT35Expired+0x84>)
 8006194:	f240 116b 	movw	r1, #363	; 0x16b
 8006198:	4809      	ldr	r0, [pc, #36]	; (80061c0 <xMBRTUTimerT35Expired+0x88>)
 800619a:	f000 f8a7 	bl	80062ec <__assert_func>
        break;
 800619e:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 80061a0:	f7ff fdba 	bl	8005d18 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 80061a4:	4b03      	ldr	r3, [pc, #12]	; (80061b4 <xMBRTUTimerT35Expired+0x7c>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 80061aa:	79fb      	ldrb	r3, [r7, #7]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	2000412d 	.word	0x2000412d
 80061b8:	080073d8 	.word	0x080073d8
 80061bc:	08007694 	.word	0x08007694
 80061c0:	0800737c 	.word	0x0800737c

080061c4 <ModbusRTUTask>:

static USHORT usRegInputStart = REG_INPUT_START;
static USHORT usRegInputBuf[REG_INPUT_NREGS];

void ModbusRTUTask(void const * argument)
{ 
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	6078      	str	r0, [r7, #4]
  /* ABCDEF */
  usRegInputBuf[0] = 11;
 80061cc:	4b14      	ldr	r3, [pc, #80]	; (8006220 <ModbusRTUTask+0x5c>)
 80061ce:	220b      	movs	r2, #11
 80061d0:	801a      	strh	r2, [r3, #0]
  usRegInputBuf[1] = 22;
 80061d2:	4b13      	ldr	r3, [pc, #76]	; (8006220 <ModbusRTUTask+0x5c>)
 80061d4:	2216      	movs	r2, #22
 80061d6:	805a      	strh	r2, [r3, #2]
  usRegInputBuf[2] = 33;
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <ModbusRTUTask+0x5c>)
 80061da:	2221      	movs	r2, #33	; 0x21
 80061dc:	809a      	strh	r2, [r3, #4]
  usRegInputBuf[3] = 44;
 80061de:	4b10      	ldr	r3, [pc, #64]	; (8006220 <ModbusRTUTask+0x5c>)
 80061e0:	222c      	movs	r2, #44	; 0x2c
 80061e2:	80da      	strh	r2, [r3, #6]
  usRegInputBuf[4] = 55;
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <ModbusRTUTask+0x5c>)
 80061e6:	2237      	movs	r2, #55	; 0x37
 80061e8:	811a      	strh	r2, [r3, #8]
  usRegInputBuf[5] = 66;
 80061ea:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <ModbusRTUTask+0x5c>)
 80061ec:	2242      	movs	r2, #66	; 0x42
 80061ee:	815a      	strh	r2, [r3, #10]
  usRegInputBuf[6] = 77;
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <ModbusRTUTask+0x5c>)
 80061f2:	224d      	movs	r2, #77	; 0x4d
 80061f4:	819a      	strh	r2, [r3, #12]
  usRegInputBuf[7] = 88;  
 80061f6:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <ModbusRTUTask+0x5c>)
 80061f8:	2258      	movs	r2, #88	; 0x58
 80061fa:	81da      	strh	r2, [r3, #14]
  
  eMBErrorCode eStatus = eMBInit( MB_RTU, 1, 3, 19200, MB_PAR_NONE );
 80061fc:	2300      	movs	r3, #0
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8006204:	2203      	movs	r2, #3
 8006206:	2101      	movs	r1, #1
 8006208:	2000      	movs	r0, #0
 800620a:	f7ff faff 	bl	800580c <eMBInit>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
  eStatus = eMBEnable();
 8006212:	f7ff fb79 	bl	8005908 <eMBEnable>
 8006216:	4603      	mov	r3, r0
 8006218:	73fb      	strb	r3, [r7, #15]
  
  while(1) {
    eMBPoll();           
 800621a:	f7ff fb91 	bl	8005940 <eMBPoll>
 800621e:	e7fc      	b.n	800621a <ModbusRTUTask+0x56>
 8006220:	20004138 	.word	0x20004138

08006224 <eMBRegInputCB>:
  }
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	807b      	strh	r3, [r7, #2]
 8006230:	4613      	mov	r3, r2
 8006232:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 8006238:	887b      	ldrh	r3, [r7, #2]
 800623a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800623e:	d32e      	bcc.n	800629e <eMBRegInputCB+0x7a>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8006240:	887a      	ldrh	r2, [r7, #2]
 8006242:	883b      	ldrh	r3, [r7, #0]
 8006244:	4413      	add	r3, r2
 8006246:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 800624a:	dc28      	bgt.n	800629e <eMBRegInputCB+0x7a>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 800624c:	887b      	ldrh	r3, [r7, #2]
 800624e:	4a1a      	ldr	r2, [pc, #104]	; (80062b8 <eMBRegInputCB+0x94>)
 8006250:	8812      	ldrh	r2, [r2, #0]
 8006252:	1a9b      	subs	r3, r3, r2
 8006254:	60bb      	str	r3, [r7, #8]
        while( usNRegs > 0 )
 8006256:	e019      	b.n	800628c <eMBRegInputCB+0x68>
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8006258:	4a18      	ldr	r2, [pc, #96]	; (80062bc <eMBRegInputCB+0x98>)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006260:	0a1b      	lsrs	r3, r3, #8
 8006262:	b299      	uxth	r1, r3
            *pucRegBuffer++ =
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 800626a:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 800626c:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 800626e:	4a13      	ldr	r2, [pc, #76]	; (80062bc <eMBRegInputCB+0x98>)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
            *pucRegBuffer++ =
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 800627c:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 800627e:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	3301      	adds	r3, #1
 8006284:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 8006286:	883b      	ldrh	r3, [r7, #0]
 8006288:	3b01      	subs	r3, #1
 800628a:	803b      	strh	r3, [r7, #0]
        while( usNRegs > 0 )
 800628c:	883b      	ldrh	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e2      	bne.n	8006258 <eMBRegInputCB+0x34>
        }
				
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8006292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006296:	480a      	ldr	r0, [pc, #40]	; (80062c0 <eMBRegInputCB+0x9c>)
 8006298:	f7fb fc53 	bl	8001b42 <HAL_GPIO_TogglePin>
 800629c:	e006      	b.n	80062ac <eMBRegInputCB+0x88>
    }
    else
    {
			  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800629e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062a2:	4807      	ldr	r0, [pc, #28]	; (80062c0 <eMBRegInputCB+0x9c>)
 80062a4:	f7fb fc4d 	bl	8001b42 <HAL_GPIO_TogglePin>
        eStatus = MB_ENOREG;			
 80062a8:	2301      	movs	r3, #1
 80062aa:	73fb      	strb	r3, [r7, #15]
    }

    return eStatus;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20000094 	.word	0x20000094
 80062bc:	20004138 	.word	0x20004138
 80062c0:	40020c00 	.word	0x40020c00

080062c4 <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	461a      	mov	r2, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	817b      	strh	r3, [r7, #10]
 80062d6:	460b      	mov	r3, r1
 80062d8:	813b      	strh	r3, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 80062de:	2301      	movs	r3, #1
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <__assert_func>:
 80062ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062ee:	4614      	mov	r4, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <__assert_func+0x2c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4605      	mov	r5, r0
 80062f8:	68d8      	ldr	r0, [r3, #12]
 80062fa:	b14c      	cbz	r4, 8006310 <__assert_func+0x24>
 80062fc:	4b07      	ldr	r3, [pc, #28]	; (800631c <__assert_func+0x30>)
 80062fe:	9100      	str	r1, [sp, #0]
 8006300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006304:	4906      	ldr	r1, [pc, #24]	; (8006320 <__assert_func+0x34>)
 8006306:	462b      	mov	r3, r5
 8006308:	f000 f814 	bl	8006334 <fiprintf>
 800630c:	f000 fc0c 	bl	8006b28 <abort>
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <__assert_func+0x38>)
 8006312:	461c      	mov	r4, r3
 8006314:	e7f3      	b.n	80062fe <__assert_func+0x12>
 8006316:	bf00      	nop
 8006318:	20000098 	.word	0x20000098
 800631c:	080076aa 	.word	0x080076aa
 8006320:	080076b7 	.word	0x080076b7
 8006324:	080076e5 	.word	0x080076e5

08006328 <__errno>:
 8006328:	4b01      	ldr	r3, [pc, #4]	; (8006330 <__errno+0x8>)
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000098 	.word	0x20000098

08006334 <fiprintf>:
 8006334:	b40e      	push	{r1, r2, r3}
 8006336:	b503      	push	{r0, r1, lr}
 8006338:	4601      	mov	r1, r0
 800633a:	ab03      	add	r3, sp, #12
 800633c:	4805      	ldr	r0, [pc, #20]	; (8006354 <fiprintf+0x20>)
 800633e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006342:	6800      	ldr	r0, [r0, #0]
 8006344:	9301      	str	r3, [sp, #4]
 8006346:	f000 f86b 	bl	8006420 <_vfiprintf_r>
 800634a:	b002      	add	sp, #8
 800634c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006350:	b003      	add	sp, #12
 8006352:	4770      	bx	lr
 8006354:	20000098 	.word	0x20000098

08006358 <__libc_init_array>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4d0d      	ldr	r5, [pc, #52]	; (8006390 <__libc_init_array+0x38>)
 800635c:	4c0d      	ldr	r4, [pc, #52]	; (8006394 <__libc_init_array+0x3c>)
 800635e:	1b64      	subs	r4, r4, r5
 8006360:	10a4      	asrs	r4, r4, #2
 8006362:	2600      	movs	r6, #0
 8006364:	42a6      	cmp	r6, r4
 8006366:	d109      	bne.n	800637c <__libc_init_array+0x24>
 8006368:	4d0b      	ldr	r5, [pc, #44]	; (8006398 <__libc_init_array+0x40>)
 800636a:	4c0c      	ldr	r4, [pc, #48]	; (800639c <__libc_init_array+0x44>)
 800636c:	f000 ffb8 	bl	80072e0 <_init>
 8006370:	1b64      	subs	r4, r4, r5
 8006372:	10a4      	asrs	r4, r4, #2
 8006374:	2600      	movs	r6, #0
 8006376:	42a6      	cmp	r6, r4
 8006378:	d105      	bne.n	8006386 <__libc_init_array+0x2e>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006380:	4798      	blx	r3
 8006382:	3601      	adds	r6, #1
 8006384:	e7ee      	b.n	8006364 <__libc_init_array+0xc>
 8006386:	f855 3b04 	ldr.w	r3, [r5], #4
 800638a:	4798      	blx	r3
 800638c:	3601      	adds	r6, #1
 800638e:	e7f2      	b.n	8006376 <__libc_init_array+0x1e>
 8006390:	08007788 	.word	0x08007788
 8006394:	08007788 	.word	0x08007788
 8006398:	08007788 	.word	0x08007788
 800639c:	0800778c 	.word	0x0800778c

080063a0 <memcpy>:
 80063a0:	440a      	add	r2, r1
 80063a2:	4291      	cmp	r1, r2
 80063a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063a8:	d100      	bne.n	80063ac <memcpy+0xc>
 80063aa:	4770      	bx	lr
 80063ac:	b510      	push	{r4, lr}
 80063ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063b6:	4291      	cmp	r1, r2
 80063b8:	d1f9      	bne.n	80063ae <memcpy+0xe>
 80063ba:	bd10      	pop	{r4, pc}

080063bc <memset>:
 80063bc:	4402      	add	r2, r0
 80063be:	4603      	mov	r3, r0
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d100      	bne.n	80063c6 <memset+0xa>
 80063c4:	4770      	bx	lr
 80063c6:	f803 1b01 	strb.w	r1, [r3], #1
 80063ca:	e7f9      	b.n	80063c0 <memset+0x4>

080063cc <__sfputc_r>:
 80063cc:	6893      	ldr	r3, [r2, #8]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	b410      	push	{r4}
 80063d4:	6093      	str	r3, [r2, #8]
 80063d6:	da08      	bge.n	80063ea <__sfputc_r+0x1e>
 80063d8:	6994      	ldr	r4, [r2, #24]
 80063da:	42a3      	cmp	r3, r4
 80063dc:	db01      	blt.n	80063e2 <__sfputc_r+0x16>
 80063de:	290a      	cmp	r1, #10
 80063e0:	d103      	bne.n	80063ea <__sfputc_r+0x1e>
 80063e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e6:	f000 badf 	b.w	80069a8 <__swbuf_r>
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	1c58      	adds	r0, r3, #1
 80063ee:	6010      	str	r0, [r2, #0]
 80063f0:	7019      	strb	r1, [r3, #0]
 80063f2:	4608      	mov	r0, r1
 80063f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <__sfputs_r>:
 80063fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fc:	4606      	mov	r6, r0
 80063fe:	460f      	mov	r7, r1
 8006400:	4614      	mov	r4, r2
 8006402:	18d5      	adds	r5, r2, r3
 8006404:	42ac      	cmp	r4, r5
 8006406:	d101      	bne.n	800640c <__sfputs_r+0x12>
 8006408:	2000      	movs	r0, #0
 800640a:	e007      	b.n	800641c <__sfputs_r+0x22>
 800640c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006410:	463a      	mov	r2, r7
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff ffda 	bl	80063cc <__sfputc_r>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d1f3      	bne.n	8006404 <__sfputs_r+0xa>
 800641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006420 <_vfiprintf_r>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	460d      	mov	r5, r1
 8006426:	b09d      	sub	sp, #116	; 0x74
 8006428:	4614      	mov	r4, r2
 800642a:	4698      	mov	r8, r3
 800642c:	4606      	mov	r6, r0
 800642e:	b118      	cbz	r0, 8006438 <_vfiprintf_r+0x18>
 8006430:	6983      	ldr	r3, [r0, #24]
 8006432:	b90b      	cbnz	r3, 8006438 <_vfiprintf_r+0x18>
 8006434:	f000 fc9a 	bl	8006d6c <__sinit>
 8006438:	4b89      	ldr	r3, [pc, #548]	; (8006660 <_vfiprintf_r+0x240>)
 800643a:	429d      	cmp	r5, r3
 800643c:	d11b      	bne.n	8006476 <_vfiprintf_r+0x56>
 800643e:	6875      	ldr	r5, [r6, #4]
 8006440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006442:	07d9      	lsls	r1, r3, #31
 8006444:	d405      	bmi.n	8006452 <_vfiprintf_r+0x32>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	059a      	lsls	r2, r3, #22
 800644a:	d402      	bmi.n	8006452 <_vfiprintf_r+0x32>
 800644c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644e:	f000 fd2b 	bl	8006ea8 <__retarget_lock_acquire_recursive>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	071b      	lsls	r3, r3, #28
 8006456:	d501      	bpl.n	800645c <_vfiprintf_r+0x3c>
 8006458:	692b      	ldr	r3, [r5, #16]
 800645a:	b9eb      	cbnz	r3, 8006498 <_vfiprintf_r+0x78>
 800645c:	4629      	mov	r1, r5
 800645e:	4630      	mov	r0, r6
 8006460:	f000 faf4 	bl	8006a4c <__swsetup_r>
 8006464:	b1c0      	cbz	r0, 8006498 <_vfiprintf_r+0x78>
 8006466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006468:	07dc      	lsls	r4, r3, #31
 800646a:	d50e      	bpl.n	800648a <_vfiprintf_r+0x6a>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	b01d      	add	sp, #116	; 0x74
 8006472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	4b7b      	ldr	r3, [pc, #492]	; (8006664 <_vfiprintf_r+0x244>)
 8006478:	429d      	cmp	r5, r3
 800647a:	d101      	bne.n	8006480 <_vfiprintf_r+0x60>
 800647c:	68b5      	ldr	r5, [r6, #8]
 800647e:	e7df      	b.n	8006440 <_vfiprintf_r+0x20>
 8006480:	4b79      	ldr	r3, [pc, #484]	; (8006668 <_vfiprintf_r+0x248>)
 8006482:	429d      	cmp	r5, r3
 8006484:	bf08      	it	eq
 8006486:	68f5      	ldreq	r5, [r6, #12]
 8006488:	e7da      	b.n	8006440 <_vfiprintf_r+0x20>
 800648a:	89ab      	ldrh	r3, [r5, #12]
 800648c:	0598      	lsls	r0, r3, #22
 800648e:	d4ed      	bmi.n	800646c <_vfiprintf_r+0x4c>
 8006490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006492:	f000 fd0a 	bl	8006eaa <__retarget_lock_release_recursive>
 8006496:	e7e9      	b.n	800646c <_vfiprintf_r+0x4c>
 8006498:	2300      	movs	r3, #0
 800649a:	9309      	str	r3, [sp, #36]	; 0x24
 800649c:	2320      	movs	r3, #32
 800649e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a6:	2330      	movs	r3, #48	; 0x30
 80064a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800666c <_vfiprintf_r+0x24c>
 80064ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064b0:	f04f 0901 	mov.w	r9, #1
 80064b4:	4623      	mov	r3, r4
 80064b6:	469a      	mov	sl, r3
 80064b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064bc:	b10a      	cbz	r2, 80064c2 <_vfiprintf_r+0xa2>
 80064be:	2a25      	cmp	r2, #37	; 0x25
 80064c0:	d1f9      	bne.n	80064b6 <_vfiprintf_r+0x96>
 80064c2:	ebba 0b04 	subs.w	fp, sl, r4
 80064c6:	d00b      	beq.n	80064e0 <_vfiprintf_r+0xc0>
 80064c8:	465b      	mov	r3, fp
 80064ca:	4622      	mov	r2, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	4630      	mov	r0, r6
 80064d0:	f7ff ff93 	bl	80063fa <__sfputs_r>
 80064d4:	3001      	adds	r0, #1
 80064d6:	f000 80aa 	beq.w	800662e <_vfiprintf_r+0x20e>
 80064da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064dc:	445a      	add	r2, fp
 80064de:	9209      	str	r2, [sp, #36]	; 0x24
 80064e0:	f89a 3000 	ldrb.w	r3, [sl]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80a2 	beq.w	800662e <_vfiprintf_r+0x20e>
 80064ea:	2300      	movs	r3, #0
 80064ec:	f04f 32ff 	mov.w	r2, #4294967295
 80064f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f4:	f10a 0a01 	add.w	sl, sl, #1
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	9307      	str	r3, [sp, #28]
 80064fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006500:	931a      	str	r3, [sp, #104]	; 0x68
 8006502:	4654      	mov	r4, sl
 8006504:	2205      	movs	r2, #5
 8006506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650a:	4858      	ldr	r0, [pc, #352]	; (800666c <_vfiprintf_r+0x24c>)
 800650c:	f7f9 fe60 	bl	80001d0 <memchr>
 8006510:	9a04      	ldr	r2, [sp, #16]
 8006512:	b9d8      	cbnz	r0, 800654c <_vfiprintf_r+0x12c>
 8006514:	06d1      	lsls	r1, r2, #27
 8006516:	bf44      	itt	mi
 8006518:	2320      	movmi	r3, #32
 800651a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651e:	0713      	lsls	r3, r2, #28
 8006520:	bf44      	itt	mi
 8006522:	232b      	movmi	r3, #43	; 0x2b
 8006524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006528:	f89a 3000 	ldrb.w	r3, [sl]
 800652c:	2b2a      	cmp	r3, #42	; 0x2a
 800652e:	d015      	beq.n	800655c <_vfiprintf_r+0x13c>
 8006530:	9a07      	ldr	r2, [sp, #28]
 8006532:	4654      	mov	r4, sl
 8006534:	2000      	movs	r0, #0
 8006536:	f04f 0c0a 	mov.w	ip, #10
 800653a:	4621      	mov	r1, r4
 800653c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006540:	3b30      	subs	r3, #48	; 0x30
 8006542:	2b09      	cmp	r3, #9
 8006544:	d94e      	bls.n	80065e4 <_vfiprintf_r+0x1c4>
 8006546:	b1b0      	cbz	r0, 8006576 <_vfiprintf_r+0x156>
 8006548:	9207      	str	r2, [sp, #28]
 800654a:	e014      	b.n	8006576 <_vfiprintf_r+0x156>
 800654c:	eba0 0308 	sub.w	r3, r0, r8
 8006550:	fa09 f303 	lsl.w	r3, r9, r3
 8006554:	4313      	orrs	r3, r2
 8006556:	9304      	str	r3, [sp, #16]
 8006558:	46a2      	mov	sl, r4
 800655a:	e7d2      	b.n	8006502 <_vfiprintf_r+0xe2>
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	1d19      	adds	r1, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	9103      	str	r1, [sp, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfbb      	ittet	lt
 8006568:	425b      	neglt	r3, r3
 800656a:	f042 0202 	orrlt.w	r2, r2, #2
 800656e:	9307      	strge	r3, [sp, #28]
 8006570:	9307      	strlt	r3, [sp, #28]
 8006572:	bfb8      	it	lt
 8006574:	9204      	strlt	r2, [sp, #16]
 8006576:	7823      	ldrb	r3, [r4, #0]
 8006578:	2b2e      	cmp	r3, #46	; 0x2e
 800657a:	d10c      	bne.n	8006596 <_vfiprintf_r+0x176>
 800657c:	7863      	ldrb	r3, [r4, #1]
 800657e:	2b2a      	cmp	r3, #42	; 0x2a
 8006580:	d135      	bne.n	80065ee <_vfiprintf_r+0x1ce>
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	9203      	str	r2, [sp, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	bfb8      	it	lt
 800658e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006592:	3402      	adds	r4, #2
 8006594:	9305      	str	r3, [sp, #20]
 8006596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800667c <_vfiprintf_r+0x25c>
 800659a:	7821      	ldrb	r1, [r4, #0]
 800659c:	2203      	movs	r2, #3
 800659e:	4650      	mov	r0, sl
 80065a0:	f7f9 fe16 	bl	80001d0 <memchr>
 80065a4:	b140      	cbz	r0, 80065b8 <_vfiprintf_r+0x198>
 80065a6:	2340      	movs	r3, #64	; 0x40
 80065a8:	eba0 000a 	sub.w	r0, r0, sl
 80065ac:	fa03 f000 	lsl.w	r0, r3, r0
 80065b0:	9b04      	ldr	r3, [sp, #16]
 80065b2:	4303      	orrs	r3, r0
 80065b4:	3401      	adds	r4, #1
 80065b6:	9304      	str	r3, [sp, #16]
 80065b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065bc:	482c      	ldr	r0, [pc, #176]	; (8006670 <_vfiprintf_r+0x250>)
 80065be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065c2:	2206      	movs	r2, #6
 80065c4:	f7f9 fe04 	bl	80001d0 <memchr>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d03f      	beq.n	800664c <_vfiprintf_r+0x22c>
 80065cc:	4b29      	ldr	r3, [pc, #164]	; (8006674 <_vfiprintf_r+0x254>)
 80065ce:	bb1b      	cbnz	r3, 8006618 <_vfiprintf_r+0x1f8>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	3307      	adds	r3, #7
 80065d4:	f023 0307 	bic.w	r3, r3, #7
 80065d8:	3308      	adds	r3, #8
 80065da:	9303      	str	r3, [sp, #12]
 80065dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065de:	443b      	add	r3, r7
 80065e0:	9309      	str	r3, [sp, #36]	; 0x24
 80065e2:	e767      	b.n	80064b4 <_vfiprintf_r+0x94>
 80065e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e8:	460c      	mov	r4, r1
 80065ea:	2001      	movs	r0, #1
 80065ec:	e7a5      	b.n	800653a <_vfiprintf_r+0x11a>
 80065ee:	2300      	movs	r3, #0
 80065f0:	3401      	adds	r4, #1
 80065f2:	9305      	str	r3, [sp, #20]
 80065f4:	4619      	mov	r1, r3
 80065f6:	f04f 0c0a 	mov.w	ip, #10
 80065fa:	4620      	mov	r0, r4
 80065fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006600:	3a30      	subs	r2, #48	; 0x30
 8006602:	2a09      	cmp	r2, #9
 8006604:	d903      	bls.n	800660e <_vfiprintf_r+0x1ee>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0c5      	beq.n	8006596 <_vfiprintf_r+0x176>
 800660a:	9105      	str	r1, [sp, #20]
 800660c:	e7c3      	b.n	8006596 <_vfiprintf_r+0x176>
 800660e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006612:	4604      	mov	r4, r0
 8006614:	2301      	movs	r3, #1
 8006616:	e7f0      	b.n	80065fa <_vfiprintf_r+0x1da>
 8006618:	ab03      	add	r3, sp, #12
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	462a      	mov	r2, r5
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <_vfiprintf_r+0x258>)
 8006620:	a904      	add	r1, sp, #16
 8006622:	4630      	mov	r0, r6
 8006624:	f3af 8000 	nop.w
 8006628:	4607      	mov	r7, r0
 800662a:	1c78      	adds	r0, r7, #1
 800662c:	d1d6      	bne.n	80065dc <_vfiprintf_r+0x1bc>
 800662e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006630:	07d9      	lsls	r1, r3, #31
 8006632:	d405      	bmi.n	8006640 <_vfiprintf_r+0x220>
 8006634:	89ab      	ldrh	r3, [r5, #12]
 8006636:	059a      	lsls	r2, r3, #22
 8006638:	d402      	bmi.n	8006640 <_vfiprintf_r+0x220>
 800663a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800663c:	f000 fc35 	bl	8006eaa <__retarget_lock_release_recursive>
 8006640:	89ab      	ldrh	r3, [r5, #12]
 8006642:	065b      	lsls	r3, r3, #25
 8006644:	f53f af12 	bmi.w	800646c <_vfiprintf_r+0x4c>
 8006648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800664a:	e711      	b.n	8006470 <_vfiprintf_r+0x50>
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	462a      	mov	r2, r5
 8006652:	4b09      	ldr	r3, [pc, #36]	; (8006678 <_vfiprintf_r+0x258>)
 8006654:	a904      	add	r1, sp, #16
 8006656:	4630      	mov	r0, r6
 8006658:	f000 f880 	bl	800675c <_printf_i>
 800665c:	e7e4      	b.n	8006628 <_vfiprintf_r+0x208>
 800665e:	bf00      	nop
 8006660:	08007740 	.word	0x08007740
 8006664:	08007760 	.word	0x08007760
 8006668:	08007720 	.word	0x08007720
 800666c:	080076ec 	.word	0x080076ec
 8006670:	080076f6 	.word	0x080076f6
 8006674:	00000000 	.word	0x00000000
 8006678:	080063fb 	.word	0x080063fb
 800667c:	080076f2 	.word	0x080076f2

08006680 <_printf_common>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	4616      	mov	r6, r2
 8006686:	4699      	mov	r9, r3
 8006688:	688a      	ldr	r2, [r1, #8]
 800668a:	690b      	ldr	r3, [r1, #16]
 800668c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006690:	4293      	cmp	r3, r2
 8006692:	bfb8      	it	lt
 8006694:	4613      	movlt	r3, r2
 8006696:	6033      	str	r3, [r6, #0]
 8006698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800669c:	4607      	mov	r7, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	b10a      	cbz	r2, 80066a6 <_printf_common+0x26>
 80066a2:	3301      	adds	r3, #1
 80066a4:	6033      	str	r3, [r6, #0]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	0699      	lsls	r1, r3, #26
 80066aa:	bf42      	ittt	mi
 80066ac:	6833      	ldrmi	r3, [r6, #0]
 80066ae:	3302      	addmi	r3, #2
 80066b0:	6033      	strmi	r3, [r6, #0]
 80066b2:	6825      	ldr	r5, [r4, #0]
 80066b4:	f015 0506 	ands.w	r5, r5, #6
 80066b8:	d106      	bne.n	80066c8 <_printf_common+0x48>
 80066ba:	f104 0a19 	add.w	sl, r4, #25
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	6832      	ldr	r2, [r6, #0]
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dc26      	bgt.n	8006716 <_printf_common+0x96>
 80066c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066cc:	1e13      	subs	r3, r2, #0
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	bf18      	it	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	0692      	lsls	r2, r2, #26
 80066d6:	d42b      	bmi.n	8006730 <_printf_common+0xb0>
 80066d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066dc:	4649      	mov	r1, r9
 80066de:	4638      	mov	r0, r7
 80066e0:	47c0      	blx	r8
 80066e2:	3001      	adds	r0, #1
 80066e4:	d01e      	beq.n	8006724 <_printf_common+0xa4>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	68e5      	ldr	r5, [r4, #12]
 80066ea:	6832      	ldr	r2, [r6, #0]
 80066ec:	f003 0306 	and.w	r3, r3, #6
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	bf08      	it	eq
 80066f4:	1aad      	subeq	r5, r5, r2
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	bf0c      	ite	eq
 80066fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006700:	2500      	movne	r5, #0
 8006702:	4293      	cmp	r3, r2
 8006704:	bfc4      	itt	gt
 8006706:	1a9b      	subgt	r3, r3, r2
 8006708:	18ed      	addgt	r5, r5, r3
 800670a:	2600      	movs	r6, #0
 800670c:	341a      	adds	r4, #26
 800670e:	42b5      	cmp	r5, r6
 8006710:	d11a      	bne.n	8006748 <_printf_common+0xc8>
 8006712:	2000      	movs	r0, #0
 8006714:	e008      	b.n	8006728 <_printf_common+0xa8>
 8006716:	2301      	movs	r3, #1
 8006718:	4652      	mov	r2, sl
 800671a:	4649      	mov	r1, r9
 800671c:	4638      	mov	r0, r7
 800671e:	47c0      	blx	r8
 8006720:	3001      	adds	r0, #1
 8006722:	d103      	bne.n	800672c <_printf_common+0xac>
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	3501      	adds	r5, #1
 800672e:	e7c6      	b.n	80066be <_printf_common+0x3e>
 8006730:	18e1      	adds	r1, r4, r3
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	2030      	movs	r0, #48	; 0x30
 8006736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800673a:	4422      	add	r2, r4
 800673c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006744:	3302      	adds	r3, #2
 8006746:	e7c7      	b.n	80066d8 <_printf_common+0x58>
 8006748:	2301      	movs	r3, #1
 800674a:	4622      	mov	r2, r4
 800674c:	4649      	mov	r1, r9
 800674e:	4638      	mov	r0, r7
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d0e6      	beq.n	8006724 <_printf_common+0xa4>
 8006756:	3601      	adds	r6, #1
 8006758:	e7d9      	b.n	800670e <_printf_common+0x8e>
	...

0800675c <_printf_i>:
 800675c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	460c      	mov	r4, r1
 8006762:	4691      	mov	r9, r2
 8006764:	7e27      	ldrb	r7, [r4, #24]
 8006766:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006768:	2f78      	cmp	r7, #120	; 0x78
 800676a:	4680      	mov	r8, r0
 800676c:	469a      	mov	sl, r3
 800676e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006772:	d807      	bhi.n	8006784 <_printf_i+0x28>
 8006774:	2f62      	cmp	r7, #98	; 0x62
 8006776:	d80a      	bhi.n	800678e <_printf_i+0x32>
 8006778:	2f00      	cmp	r7, #0
 800677a:	f000 80d8 	beq.w	800692e <_printf_i+0x1d2>
 800677e:	2f58      	cmp	r7, #88	; 0x58
 8006780:	f000 80a3 	beq.w	80068ca <_printf_i+0x16e>
 8006784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800678c:	e03a      	b.n	8006804 <_printf_i+0xa8>
 800678e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006792:	2b15      	cmp	r3, #21
 8006794:	d8f6      	bhi.n	8006784 <_printf_i+0x28>
 8006796:	a001      	add	r0, pc, #4	; (adr r0, 800679c <_printf_i+0x40>)
 8006798:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800679c:	080067f5 	.word	0x080067f5
 80067a0:	08006809 	.word	0x08006809
 80067a4:	08006785 	.word	0x08006785
 80067a8:	08006785 	.word	0x08006785
 80067ac:	08006785 	.word	0x08006785
 80067b0:	08006785 	.word	0x08006785
 80067b4:	08006809 	.word	0x08006809
 80067b8:	08006785 	.word	0x08006785
 80067bc:	08006785 	.word	0x08006785
 80067c0:	08006785 	.word	0x08006785
 80067c4:	08006785 	.word	0x08006785
 80067c8:	08006915 	.word	0x08006915
 80067cc:	08006839 	.word	0x08006839
 80067d0:	080068f7 	.word	0x080068f7
 80067d4:	08006785 	.word	0x08006785
 80067d8:	08006785 	.word	0x08006785
 80067dc:	08006937 	.word	0x08006937
 80067e0:	08006785 	.word	0x08006785
 80067e4:	08006839 	.word	0x08006839
 80067e8:	08006785 	.word	0x08006785
 80067ec:	08006785 	.word	0x08006785
 80067f0:	080068ff 	.word	0x080068ff
 80067f4:	680b      	ldr	r3, [r1, #0]
 80067f6:	1d1a      	adds	r2, r3, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	600a      	str	r2, [r1, #0]
 80067fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006804:	2301      	movs	r3, #1
 8006806:	e0a3      	b.n	8006950 <_printf_i+0x1f4>
 8006808:	6825      	ldr	r5, [r4, #0]
 800680a:	6808      	ldr	r0, [r1, #0]
 800680c:	062e      	lsls	r6, r5, #24
 800680e:	f100 0304 	add.w	r3, r0, #4
 8006812:	d50a      	bpl.n	800682a <_printf_i+0xce>
 8006814:	6805      	ldr	r5, [r0, #0]
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	2d00      	cmp	r5, #0
 800681a:	da03      	bge.n	8006824 <_printf_i+0xc8>
 800681c:	232d      	movs	r3, #45	; 0x2d
 800681e:	426d      	negs	r5, r5
 8006820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006824:	485e      	ldr	r0, [pc, #376]	; (80069a0 <_printf_i+0x244>)
 8006826:	230a      	movs	r3, #10
 8006828:	e019      	b.n	800685e <_printf_i+0x102>
 800682a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800682e:	6805      	ldr	r5, [r0, #0]
 8006830:	600b      	str	r3, [r1, #0]
 8006832:	bf18      	it	ne
 8006834:	b22d      	sxthne	r5, r5
 8006836:	e7ef      	b.n	8006818 <_printf_i+0xbc>
 8006838:	680b      	ldr	r3, [r1, #0]
 800683a:	6825      	ldr	r5, [r4, #0]
 800683c:	1d18      	adds	r0, r3, #4
 800683e:	6008      	str	r0, [r1, #0]
 8006840:	0628      	lsls	r0, r5, #24
 8006842:	d501      	bpl.n	8006848 <_printf_i+0xec>
 8006844:	681d      	ldr	r5, [r3, #0]
 8006846:	e002      	b.n	800684e <_printf_i+0xf2>
 8006848:	0669      	lsls	r1, r5, #25
 800684a:	d5fb      	bpl.n	8006844 <_printf_i+0xe8>
 800684c:	881d      	ldrh	r5, [r3, #0]
 800684e:	4854      	ldr	r0, [pc, #336]	; (80069a0 <_printf_i+0x244>)
 8006850:	2f6f      	cmp	r7, #111	; 0x6f
 8006852:	bf0c      	ite	eq
 8006854:	2308      	moveq	r3, #8
 8006856:	230a      	movne	r3, #10
 8006858:	2100      	movs	r1, #0
 800685a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800685e:	6866      	ldr	r6, [r4, #4]
 8006860:	60a6      	str	r6, [r4, #8]
 8006862:	2e00      	cmp	r6, #0
 8006864:	bfa2      	ittt	ge
 8006866:	6821      	ldrge	r1, [r4, #0]
 8006868:	f021 0104 	bicge.w	r1, r1, #4
 800686c:	6021      	strge	r1, [r4, #0]
 800686e:	b90d      	cbnz	r5, 8006874 <_printf_i+0x118>
 8006870:	2e00      	cmp	r6, #0
 8006872:	d04d      	beq.n	8006910 <_printf_i+0x1b4>
 8006874:	4616      	mov	r6, r2
 8006876:	fbb5 f1f3 	udiv	r1, r5, r3
 800687a:	fb03 5711 	mls	r7, r3, r1, r5
 800687e:	5dc7      	ldrb	r7, [r0, r7]
 8006880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006884:	462f      	mov	r7, r5
 8006886:	42bb      	cmp	r3, r7
 8006888:	460d      	mov	r5, r1
 800688a:	d9f4      	bls.n	8006876 <_printf_i+0x11a>
 800688c:	2b08      	cmp	r3, #8
 800688e:	d10b      	bne.n	80068a8 <_printf_i+0x14c>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	07df      	lsls	r7, r3, #31
 8006894:	d508      	bpl.n	80068a8 <_printf_i+0x14c>
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	6861      	ldr	r1, [r4, #4]
 800689a:	4299      	cmp	r1, r3
 800689c:	bfde      	ittt	le
 800689e:	2330      	movle	r3, #48	; 0x30
 80068a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068a8:	1b92      	subs	r2, r2, r6
 80068aa:	6122      	str	r2, [r4, #16]
 80068ac:	f8cd a000 	str.w	sl, [sp]
 80068b0:	464b      	mov	r3, r9
 80068b2:	aa03      	add	r2, sp, #12
 80068b4:	4621      	mov	r1, r4
 80068b6:	4640      	mov	r0, r8
 80068b8:	f7ff fee2 	bl	8006680 <_printf_common>
 80068bc:	3001      	adds	r0, #1
 80068be:	d14c      	bne.n	800695a <_printf_i+0x1fe>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	b004      	add	sp, #16
 80068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ca:	4835      	ldr	r0, [pc, #212]	; (80069a0 <_printf_i+0x244>)
 80068cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	680e      	ldr	r6, [r1, #0]
 80068d4:	061f      	lsls	r7, r3, #24
 80068d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80068da:	600e      	str	r6, [r1, #0]
 80068dc:	d514      	bpl.n	8006908 <_printf_i+0x1ac>
 80068de:	07d9      	lsls	r1, r3, #31
 80068e0:	bf44      	itt	mi
 80068e2:	f043 0320 	orrmi.w	r3, r3, #32
 80068e6:	6023      	strmi	r3, [r4, #0]
 80068e8:	b91d      	cbnz	r5, 80068f2 <_printf_i+0x196>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	f023 0320 	bic.w	r3, r3, #32
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	2310      	movs	r3, #16
 80068f4:	e7b0      	b.n	8006858 <_printf_i+0xfc>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f043 0320 	orr.w	r3, r3, #32
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	2378      	movs	r3, #120	; 0x78
 8006900:	4828      	ldr	r0, [pc, #160]	; (80069a4 <_printf_i+0x248>)
 8006902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006906:	e7e3      	b.n	80068d0 <_printf_i+0x174>
 8006908:	065e      	lsls	r6, r3, #25
 800690a:	bf48      	it	mi
 800690c:	b2ad      	uxthmi	r5, r5
 800690e:	e7e6      	b.n	80068de <_printf_i+0x182>
 8006910:	4616      	mov	r6, r2
 8006912:	e7bb      	b.n	800688c <_printf_i+0x130>
 8006914:	680b      	ldr	r3, [r1, #0]
 8006916:	6826      	ldr	r6, [r4, #0]
 8006918:	6960      	ldr	r0, [r4, #20]
 800691a:	1d1d      	adds	r5, r3, #4
 800691c:	600d      	str	r5, [r1, #0]
 800691e:	0635      	lsls	r5, r6, #24
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	d501      	bpl.n	8006928 <_printf_i+0x1cc>
 8006924:	6018      	str	r0, [r3, #0]
 8006926:	e002      	b.n	800692e <_printf_i+0x1d2>
 8006928:	0671      	lsls	r1, r6, #25
 800692a:	d5fb      	bpl.n	8006924 <_printf_i+0x1c8>
 800692c:	8018      	strh	r0, [r3, #0]
 800692e:	2300      	movs	r3, #0
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	4616      	mov	r6, r2
 8006934:	e7ba      	b.n	80068ac <_printf_i+0x150>
 8006936:	680b      	ldr	r3, [r1, #0]
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	600a      	str	r2, [r1, #0]
 800693c:	681e      	ldr	r6, [r3, #0]
 800693e:	6862      	ldr	r2, [r4, #4]
 8006940:	2100      	movs	r1, #0
 8006942:	4630      	mov	r0, r6
 8006944:	f7f9 fc44 	bl	80001d0 <memchr>
 8006948:	b108      	cbz	r0, 800694e <_printf_i+0x1f2>
 800694a:	1b80      	subs	r0, r0, r6
 800694c:	6060      	str	r0, [r4, #4]
 800694e:	6863      	ldr	r3, [r4, #4]
 8006950:	6123      	str	r3, [r4, #16]
 8006952:	2300      	movs	r3, #0
 8006954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006958:	e7a8      	b.n	80068ac <_printf_i+0x150>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	4632      	mov	r2, r6
 800695e:	4649      	mov	r1, r9
 8006960:	4640      	mov	r0, r8
 8006962:	47d0      	blx	sl
 8006964:	3001      	adds	r0, #1
 8006966:	d0ab      	beq.n	80068c0 <_printf_i+0x164>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	079b      	lsls	r3, r3, #30
 800696c:	d413      	bmi.n	8006996 <_printf_i+0x23a>
 800696e:	68e0      	ldr	r0, [r4, #12]
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	4298      	cmp	r0, r3
 8006974:	bfb8      	it	lt
 8006976:	4618      	movlt	r0, r3
 8006978:	e7a4      	b.n	80068c4 <_printf_i+0x168>
 800697a:	2301      	movs	r3, #1
 800697c:	4632      	mov	r2, r6
 800697e:	4649      	mov	r1, r9
 8006980:	4640      	mov	r0, r8
 8006982:	47d0      	blx	sl
 8006984:	3001      	adds	r0, #1
 8006986:	d09b      	beq.n	80068c0 <_printf_i+0x164>
 8006988:	3501      	adds	r5, #1
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	9903      	ldr	r1, [sp, #12]
 800698e:	1a5b      	subs	r3, r3, r1
 8006990:	42ab      	cmp	r3, r5
 8006992:	dcf2      	bgt.n	800697a <_printf_i+0x21e>
 8006994:	e7eb      	b.n	800696e <_printf_i+0x212>
 8006996:	2500      	movs	r5, #0
 8006998:	f104 0619 	add.w	r6, r4, #25
 800699c:	e7f5      	b.n	800698a <_printf_i+0x22e>
 800699e:	bf00      	nop
 80069a0:	080076fd 	.word	0x080076fd
 80069a4:	0800770e 	.word	0x0800770e

080069a8 <__swbuf_r>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	460e      	mov	r6, r1
 80069ac:	4614      	mov	r4, r2
 80069ae:	4605      	mov	r5, r0
 80069b0:	b118      	cbz	r0, 80069ba <__swbuf_r+0x12>
 80069b2:	6983      	ldr	r3, [r0, #24]
 80069b4:	b90b      	cbnz	r3, 80069ba <__swbuf_r+0x12>
 80069b6:	f000 f9d9 	bl	8006d6c <__sinit>
 80069ba:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <__swbuf_r+0x98>)
 80069bc:	429c      	cmp	r4, r3
 80069be:	d12b      	bne.n	8006a18 <__swbuf_r+0x70>
 80069c0:	686c      	ldr	r4, [r5, #4]
 80069c2:	69a3      	ldr	r3, [r4, #24]
 80069c4:	60a3      	str	r3, [r4, #8]
 80069c6:	89a3      	ldrh	r3, [r4, #12]
 80069c8:	071a      	lsls	r2, r3, #28
 80069ca:	d52f      	bpl.n	8006a2c <__swbuf_r+0x84>
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	b36b      	cbz	r3, 8006a2c <__swbuf_r+0x84>
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	6820      	ldr	r0, [r4, #0]
 80069d4:	1ac0      	subs	r0, r0, r3
 80069d6:	6963      	ldr	r3, [r4, #20]
 80069d8:	b2f6      	uxtb	r6, r6
 80069da:	4283      	cmp	r3, r0
 80069dc:	4637      	mov	r7, r6
 80069de:	dc04      	bgt.n	80069ea <__swbuf_r+0x42>
 80069e0:	4621      	mov	r1, r4
 80069e2:	4628      	mov	r0, r5
 80069e4:	f000 f92e 	bl	8006c44 <_fflush_r>
 80069e8:	bb30      	cbnz	r0, 8006a38 <__swbuf_r+0x90>
 80069ea:	68a3      	ldr	r3, [r4, #8]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	60a3      	str	r3, [r4, #8]
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	6022      	str	r2, [r4, #0]
 80069f6:	701e      	strb	r6, [r3, #0]
 80069f8:	6963      	ldr	r3, [r4, #20]
 80069fa:	3001      	adds	r0, #1
 80069fc:	4283      	cmp	r3, r0
 80069fe:	d004      	beq.n	8006a0a <__swbuf_r+0x62>
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	07db      	lsls	r3, r3, #31
 8006a04:	d506      	bpl.n	8006a14 <__swbuf_r+0x6c>
 8006a06:	2e0a      	cmp	r6, #10
 8006a08:	d104      	bne.n	8006a14 <__swbuf_r+0x6c>
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f000 f919 	bl	8006c44 <_fflush_r>
 8006a12:	b988      	cbnz	r0, 8006a38 <__swbuf_r+0x90>
 8006a14:	4638      	mov	r0, r7
 8006a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <__swbuf_r+0x9c>)
 8006a1a:	429c      	cmp	r4, r3
 8006a1c:	d101      	bne.n	8006a22 <__swbuf_r+0x7a>
 8006a1e:	68ac      	ldr	r4, [r5, #8]
 8006a20:	e7cf      	b.n	80069c2 <__swbuf_r+0x1a>
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <__swbuf_r+0xa0>)
 8006a24:	429c      	cmp	r4, r3
 8006a26:	bf08      	it	eq
 8006a28:	68ec      	ldreq	r4, [r5, #12]
 8006a2a:	e7ca      	b.n	80069c2 <__swbuf_r+0x1a>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f000 f80c 	bl	8006a4c <__swsetup_r>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d0cb      	beq.n	80069d0 <__swbuf_r+0x28>
 8006a38:	f04f 37ff 	mov.w	r7, #4294967295
 8006a3c:	e7ea      	b.n	8006a14 <__swbuf_r+0x6c>
 8006a3e:	bf00      	nop
 8006a40:	08007740 	.word	0x08007740
 8006a44:	08007760 	.word	0x08007760
 8006a48:	08007720 	.word	0x08007720

08006a4c <__swsetup_r>:
 8006a4c:	4b32      	ldr	r3, [pc, #200]	; (8006b18 <__swsetup_r+0xcc>)
 8006a4e:	b570      	push	{r4, r5, r6, lr}
 8006a50:	681d      	ldr	r5, [r3, #0]
 8006a52:	4606      	mov	r6, r0
 8006a54:	460c      	mov	r4, r1
 8006a56:	b125      	cbz	r5, 8006a62 <__swsetup_r+0x16>
 8006a58:	69ab      	ldr	r3, [r5, #24]
 8006a5a:	b913      	cbnz	r3, 8006a62 <__swsetup_r+0x16>
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 f985 	bl	8006d6c <__sinit>
 8006a62:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <__swsetup_r+0xd0>)
 8006a64:	429c      	cmp	r4, r3
 8006a66:	d10f      	bne.n	8006a88 <__swsetup_r+0x3c>
 8006a68:	686c      	ldr	r4, [r5, #4]
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a70:	0719      	lsls	r1, r3, #28
 8006a72:	d42c      	bmi.n	8006ace <__swsetup_r+0x82>
 8006a74:	06dd      	lsls	r5, r3, #27
 8006a76:	d411      	bmi.n	8006a9c <__swsetup_r+0x50>
 8006a78:	2309      	movs	r3, #9
 8006a7a:	6033      	str	r3, [r6, #0]
 8006a7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	f04f 30ff 	mov.w	r0, #4294967295
 8006a86:	e03e      	b.n	8006b06 <__swsetup_r+0xba>
 8006a88:	4b25      	ldr	r3, [pc, #148]	; (8006b20 <__swsetup_r+0xd4>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d101      	bne.n	8006a92 <__swsetup_r+0x46>
 8006a8e:	68ac      	ldr	r4, [r5, #8]
 8006a90:	e7eb      	b.n	8006a6a <__swsetup_r+0x1e>
 8006a92:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <__swsetup_r+0xd8>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	bf08      	it	eq
 8006a98:	68ec      	ldreq	r4, [r5, #12]
 8006a9a:	e7e6      	b.n	8006a6a <__swsetup_r+0x1e>
 8006a9c:	0758      	lsls	r0, r3, #29
 8006a9e:	d512      	bpl.n	8006ac6 <__swsetup_r+0x7a>
 8006aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aa2:	b141      	cbz	r1, 8006ab6 <__swsetup_r+0x6a>
 8006aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aa8:	4299      	cmp	r1, r3
 8006aaa:	d002      	beq.n	8006ab2 <__swsetup_r+0x66>
 8006aac:	4630      	mov	r0, r6
 8006aae:	f000 fa61 	bl	8006f74 <_free_r>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006abc:	81a3      	strh	r3, [r4, #12]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6063      	str	r3, [r4, #4]
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	89a3      	ldrh	r3, [r4, #12]
 8006ac8:	f043 0308 	orr.w	r3, r3, #8
 8006acc:	81a3      	strh	r3, [r4, #12]
 8006ace:	6923      	ldr	r3, [r4, #16]
 8006ad0:	b94b      	cbnz	r3, 8006ae6 <__swsetup_r+0x9a>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006adc:	d003      	beq.n	8006ae6 <__swsetup_r+0x9a>
 8006ade:	4621      	mov	r1, r4
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 fa07 	bl	8006ef4 <__smakebuf_r>
 8006ae6:	89a0      	ldrh	r0, [r4, #12]
 8006ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aec:	f010 0301 	ands.w	r3, r0, #1
 8006af0:	d00a      	beq.n	8006b08 <__swsetup_r+0xbc>
 8006af2:	2300      	movs	r3, #0
 8006af4:	60a3      	str	r3, [r4, #8]
 8006af6:	6963      	ldr	r3, [r4, #20]
 8006af8:	425b      	negs	r3, r3
 8006afa:	61a3      	str	r3, [r4, #24]
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	b943      	cbnz	r3, 8006b12 <__swsetup_r+0xc6>
 8006b00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b04:	d1ba      	bne.n	8006a7c <__swsetup_r+0x30>
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	0781      	lsls	r1, r0, #30
 8006b0a:	bf58      	it	pl
 8006b0c:	6963      	ldrpl	r3, [r4, #20]
 8006b0e:	60a3      	str	r3, [r4, #8]
 8006b10:	e7f4      	b.n	8006afc <__swsetup_r+0xb0>
 8006b12:	2000      	movs	r0, #0
 8006b14:	e7f7      	b.n	8006b06 <__swsetup_r+0xba>
 8006b16:	bf00      	nop
 8006b18:	20000098 	.word	0x20000098
 8006b1c:	08007740 	.word	0x08007740
 8006b20:	08007760 	.word	0x08007760
 8006b24:	08007720 	.word	0x08007720

08006b28 <abort>:
 8006b28:	b508      	push	{r3, lr}
 8006b2a:	2006      	movs	r0, #6
 8006b2c:	f000 fb04 	bl	8007138 <raise>
 8006b30:	2001      	movs	r0, #1
 8006b32:	f7fa f8c7 	bl	8000cc4 <_exit>
	...

08006b38 <__sflush_r>:
 8006b38:	898a      	ldrh	r2, [r1, #12]
 8006b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3e:	4605      	mov	r5, r0
 8006b40:	0710      	lsls	r0, r2, #28
 8006b42:	460c      	mov	r4, r1
 8006b44:	d458      	bmi.n	8006bf8 <__sflush_r+0xc0>
 8006b46:	684b      	ldr	r3, [r1, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dc05      	bgt.n	8006b58 <__sflush_r+0x20>
 8006b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	dc02      	bgt.n	8006b58 <__sflush_r+0x20>
 8006b52:	2000      	movs	r0, #0
 8006b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b5a:	2e00      	cmp	r6, #0
 8006b5c:	d0f9      	beq.n	8006b52 <__sflush_r+0x1a>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b64:	682f      	ldr	r7, [r5, #0]
 8006b66:	602b      	str	r3, [r5, #0]
 8006b68:	d032      	beq.n	8006bd0 <__sflush_r+0x98>
 8006b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b6c:	89a3      	ldrh	r3, [r4, #12]
 8006b6e:	075a      	lsls	r2, r3, #29
 8006b70:	d505      	bpl.n	8006b7e <__sflush_r+0x46>
 8006b72:	6863      	ldr	r3, [r4, #4]
 8006b74:	1ac0      	subs	r0, r0, r3
 8006b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b78:	b10b      	cbz	r3, 8006b7e <__sflush_r+0x46>
 8006b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b7c:	1ac0      	subs	r0, r0, r3
 8006b7e:	2300      	movs	r3, #0
 8006b80:	4602      	mov	r2, r0
 8006b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b84:	6a21      	ldr	r1, [r4, #32]
 8006b86:	4628      	mov	r0, r5
 8006b88:	47b0      	blx	r6
 8006b8a:	1c43      	adds	r3, r0, #1
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	d106      	bne.n	8006b9e <__sflush_r+0x66>
 8006b90:	6829      	ldr	r1, [r5, #0]
 8006b92:	291d      	cmp	r1, #29
 8006b94:	d82c      	bhi.n	8006bf0 <__sflush_r+0xb8>
 8006b96:	4a2a      	ldr	r2, [pc, #168]	; (8006c40 <__sflush_r+0x108>)
 8006b98:	40ca      	lsrs	r2, r1
 8006b9a:	07d6      	lsls	r6, r2, #31
 8006b9c:	d528      	bpl.n	8006bf0 <__sflush_r+0xb8>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	6062      	str	r2, [r4, #4]
 8006ba2:	04d9      	lsls	r1, r3, #19
 8006ba4:	6922      	ldr	r2, [r4, #16]
 8006ba6:	6022      	str	r2, [r4, #0]
 8006ba8:	d504      	bpl.n	8006bb4 <__sflush_r+0x7c>
 8006baa:	1c42      	adds	r2, r0, #1
 8006bac:	d101      	bne.n	8006bb2 <__sflush_r+0x7a>
 8006bae:	682b      	ldr	r3, [r5, #0]
 8006bb0:	b903      	cbnz	r3, 8006bb4 <__sflush_r+0x7c>
 8006bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8006bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bb6:	602f      	str	r7, [r5, #0]
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	d0ca      	beq.n	8006b52 <__sflush_r+0x1a>
 8006bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	d002      	beq.n	8006bca <__sflush_r+0x92>
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 f9d5 	bl	8006f74 <_free_r>
 8006bca:	2000      	movs	r0, #0
 8006bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8006bce:	e7c1      	b.n	8006b54 <__sflush_r+0x1c>
 8006bd0:	6a21      	ldr	r1, [r4, #32]
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	47b0      	blx	r6
 8006bd8:	1c41      	adds	r1, r0, #1
 8006bda:	d1c7      	bne.n	8006b6c <__sflush_r+0x34>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0c4      	beq.n	8006b6c <__sflush_r+0x34>
 8006be2:	2b1d      	cmp	r3, #29
 8006be4:	d001      	beq.n	8006bea <__sflush_r+0xb2>
 8006be6:	2b16      	cmp	r3, #22
 8006be8:	d101      	bne.n	8006bee <__sflush_r+0xb6>
 8006bea:	602f      	str	r7, [r5, #0]
 8006bec:	e7b1      	b.n	8006b52 <__sflush_r+0x1a>
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf4:	81a3      	strh	r3, [r4, #12]
 8006bf6:	e7ad      	b.n	8006b54 <__sflush_r+0x1c>
 8006bf8:	690f      	ldr	r7, [r1, #16]
 8006bfa:	2f00      	cmp	r7, #0
 8006bfc:	d0a9      	beq.n	8006b52 <__sflush_r+0x1a>
 8006bfe:	0793      	lsls	r3, r2, #30
 8006c00:	680e      	ldr	r6, [r1, #0]
 8006c02:	bf08      	it	eq
 8006c04:	694b      	ldreq	r3, [r1, #20]
 8006c06:	600f      	str	r7, [r1, #0]
 8006c08:	bf18      	it	ne
 8006c0a:	2300      	movne	r3, #0
 8006c0c:	eba6 0807 	sub.w	r8, r6, r7
 8006c10:	608b      	str	r3, [r1, #8]
 8006c12:	f1b8 0f00 	cmp.w	r8, #0
 8006c16:	dd9c      	ble.n	8006b52 <__sflush_r+0x1a>
 8006c18:	6a21      	ldr	r1, [r4, #32]
 8006c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c1c:	4643      	mov	r3, r8
 8006c1e:	463a      	mov	r2, r7
 8006c20:	4628      	mov	r0, r5
 8006c22:	47b0      	blx	r6
 8006c24:	2800      	cmp	r0, #0
 8006c26:	dc06      	bgt.n	8006c36 <__sflush_r+0xfe>
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	e78e      	b.n	8006b54 <__sflush_r+0x1c>
 8006c36:	4407      	add	r7, r0
 8006c38:	eba8 0800 	sub.w	r8, r8, r0
 8006c3c:	e7e9      	b.n	8006c12 <__sflush_r+0xda>
 8006c3e:	bf00      	nop
 8006c40:	20400001 	.word	0x20400001

08006c44 <_fflush_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	690b      	ldr	r3, [r1, #16]
 8006c48:	4605      	mov	r5, r0
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	b913      	cbnz	r3, 8006c54 <_fflush_r+0x10>
 8006c4e:	2500      	movs	r5, #0
 8006c50:	4628      	mov	r0, r5
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	b118      	cbz	r0, 8006c5e <_fflush_r+0x1a>
 8006c56:	6983      	ldr	r3, [r0, #24]
 8006c58:	b90b      	cbnz	r3, 8006c5e <_fflush_r+0x1a>
 8006c5a:	f000 f887 	bl	8006d6c <__sinit>
 8006c5e:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <_fflush_r+0x6c>)
 8006c60:	429c      	cmp	r4, r3
 8006c62:	d11b      	bne.n	8006c9c <_fflush_r+0x58>
 8006c64:	686c      	ldr	r4, [r5, #4]
 8006c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0ef      	beq.n	8006c4e <_fflush_r+0xa>
 8006c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c70:	07d0      	lsls	r0, r2, #31
 8006c72:	d404      	bmi.n	8006c7e <_fflush_r+0x3a>
 8006c74:	0599      	lsls	r1, r3, #22
 8006c76:	d402      	bmi.n	8006c7e <_fflush_r+0x3a>
 8006c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c7a:	f000 f915 	bl	8006ea8 <__retarget_lock_acquire_recursive>
 8006c7e:	4628      	mov	r0, r5
 8006c80:	4621      	mov	r1, r4
 8006c82:	f7ff ff59 	bl	8006b38 <__sflush_r>
 8006c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c88:	07da      	lsls	r2, r3, #31
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	d4e0      	bmi.n	8006c50 <_fflush_r+0xc>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	059b      	lsls	r3, r3, #22
 8006c92:	d4dd      	bmi.n	8006c50 <_fflush_r+0xc>
 8006c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c96:	f000 f908 	bl	8006eaa <__retarget_lock_release_recursive>
 8006c9a:	e7d9      	b.n	8006c50 <_fflush_r+0xc>
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <_fflush_r+0x70>)
 8006c9e:	429c      	cmp	r4, r3
 8006ca0:	d101      	bne.n	8006ca6 <_fflush_r+0x62>
 8006ca2:	68ac      	ldr	r4, [r5, #8]
 8006ca4:	e7df      	b.n	8006c66 <_fflush_r+0x22>
 8006ca6:	4b04      	ldr	r3, [pc, #16]	; (8006cb8 <_fflush_r+0x74>)
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	bf08      	it	eq
 8006cac:	68ec      	ldreq	r4, [r5, #12]
 8006cae:	e7da      	b.n	8006c66 <_fflush_r+0x22>
 8006cb0:	08007740 	.word	0x08007740
 8006cb4:	08007760 	.word	0x08007760
 8006cb8:	08007720 	.word	0x08007720

08006cbc <std>:
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	b510      	push	{r4, lr}
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8006cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cca:	6083      	str	r3, [r0, #8]
 8006ccc:	8181      	strh	r1, [r0, #12]
 8006cce:	6643      	str	r3, [r0, #100]	; 0x64
 8006cd0:	81c2      	strh	r2, [r0, #14]
 8006cd2:	6183      	str	r3, [r0, #24]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	2208      	movs	r2, #8
 8006cd8:	305c      	adds	r0, #92	; 0x5c
 8006cda:	f7ff fb6f 	bl	80063bc <memset>
 8006cde:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <std+0x38>)
 8006ce0:	6263      	str	r3, [r4, #36]	; 0x24
 8006ce2:	4b05      	ldr	r3, [pc, #20]	; (8006cf8 <std+0x3c>)
 8006ce4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ce6:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <std+0x40>)
 8006ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cea:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <std+0x44>)
 8006cec:	6224      	str	r4, [r4, #32]
 8006cee:	6323      	str	r3, [r4, #48]	; 0x30
 8006cf0:	bd10      	pop	{r4, pc}
 8006cf2:	bf00      	nop
 8006cf4:	08007171 	.word	0x08007171
 8006cf8:	08007193 	.word	0x08007193
 8006cfc:	080071cb 	.word	0x080071cb
 8006d00:	080071ef 	.word	0x080071ef

08006d04 <_cleanup_r>:
 8006d04:	4901      	ldr	r1, [pc, #4]	; (8006d0c <_cleanup_r+0x8>)
 8006d06:	f000 b8af 	b.w	8006e68 <_fwalk_reent>
 8006d0a:	bf00      	nop
 8006d0c:	08006c45 	.word	0x08006c45

08006d10 <__sfmoreglue>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	1e4a      	subs	r2, r1, #1
 8006d14:	2568      	movs	r5, #104	; 0x68
 8006d16:	4355      	muls	r5, r2
 8006d18:	460e      	mov	r6, r1
 8006d1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d1e:	f000 f979 	bl	8007014 <_malloc_r>
 8006d22:	4604      	mov	r4, r0
 8006d24:	b140      	cbz	r0, 8006d38 <__sfmoreglue+0x28>
 8006d26:	2100      	movs	r1, #0
 8006d28:	e9c0 1600 	strd	r1, r6, [r0]
 8006d2c:	300c      	adds	r0, #12
 8006d2e:	60a0      	str	r0, [r4, #8]
 8006d30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d34:	f7ff fb42 	bl	80063bc <memset>
 8006d38:	4620      	mov	r0, r4
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}

08006d3c <__sfp_lock_acquire>:
 8006d3c:	4801      	ldr	r0, [pc, #4]	; (8006d44 <__sfp_lock_acquire+0x8>)
 8006d3e:	f000 b8b3 	b.w	8006ea8 <__retarget_lock_acquire_recursive>
 8006d42:	bf00      	nop
 8006d44:	200043ac 	.word	0x200043ac

08006d48 <__sfp_lock_release>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__sfp_lock_release+0x8>)
 8006d4a:	f000 b8ae 	b.w	8006eaa <__retarget_lock_release_recursive>
 8006d4e:	bf00      	nop
 8006d50:	200043ac 	.word	0x200043ac

08006d54 <__sinit_lock_acquire>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__sinit_lock_acquire+0x8>)
 8006d56:	f000 b8a7 	b.w	8006ea8 <__retarget_lock_acquire_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	200043a7 	.word	0x200043a7

08006d60 <__sinit_lock_release>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__sinit_lock_release+0x8>)
 8006d62:	f000 b8a2 	b.w	8006eaa <__retarget_lock_release_recursive>
 8006d66:	bf00      	nop
 8006d68:	200043a7 	.word	0x200043a7

08006d6c <__sinit>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	4604      	mov	r4, r0
 8006d70:	f7ff fff0 	bl	8006d54 <__sinit_lock_acquire>
 8006d74:	69a3      	ldr	r3, [r4, #24]
 8006d76:	b11b      	cbz	r3, 8006d80 <__sinit+0x14>
 8006d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7c:	f7ff bff0 	b.w	8006d60 <__sinit_lock_release>
 8006d80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d84:	6523      	str	r3, [r4, #80]	; 0x50
 8006d86:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <__sinit+0x68>)
 8006d88:	4a13      	ldr	r2, [pc, #76]	; (8006dd8 <__sinit+0x6c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d8e:	42a3      	cmp	r3, r4
 8006d90:	bf04      	itt	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	61a3      	streq	r3, [r4, #24]
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 f820 	bl	8006ddc <__sfp>
 8006d9c:	6060      	str	r0, [r4, #4]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 f81c 	bl	8006ddc <__sfp>
 8006da4:	60a0      	str	r0, [r4, #8]
 8006da6:	4620      	mov	r0, r4
 8006da8:	f000 f818 	bl	8006ddc <__sfp>
 8006dac:	2200      	movs	r2, #0
 8006dae:	60e0      	str	r0, [r4, #12]
 8006db0:	2104      	movs	r1, #4
 8006db2:	6860      	ldr	r0, [r4, #4]
 8006db4:	f7ff ff82 	bl	8006cbc <std>
 8006db8:	68a0      	ldr	r0, [r4, #8]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	2109      	movs	r1, #9
 8006dbe:	f7ff ff7d 	bl	8006cbc <std>
 8006dc2:	68e0      	ldr	r0, [r4, #12]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	2112      	movs	r1, #18
 8006dc8:	f7ff ff78 	bl	8006cbc <std>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	61a3      	str	r3, [r4, #24]
 8006dd0:	e7d2      	b.n	8006d78 <__sinit+0xc>
 8006dd2:	bf00      	nop
 8006dd4:	080076e8 	.word	0x080076e8
 8006dd8:	08006d05 	.word	0x08006d05

08006ddc <__sfp>:
 8006ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dde:	4607      	mov	r7, r0
 8006de0:	f7ff ffac 	bl	8006d3c <__sfp_lock_acquire>
 8006de4:	4b1e      	ldr	r3, [pc, #120]	; (8006e60 <__sfp+0x84>)
 8006de6:	681e      	ldr	r6, [r3, #0]
 8006de8:	69b3      	ldr	r3, [r6, #24]
 8006dea:	b913      	cbnz	r3, 8006df2 <__sfp+0x16>
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff ffbd 	bl	8006d6c <__sinit>
 8006df2:	3648      	adds	r6, #72	; 0x48
 8006df4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	d503      	bpl.n	8006e04 <__sfp+0x28>
 8006dfc:	6833      	ldr	r3, [r6, #0]
 8006dfe:	b30b      	cbz	r3, 8006e44 <__sfp+0x68>
 8006e00:	6836      	ldr	r6, [r6, #0]
 8006e02:	e7f7      	b.n	8006df4 <__sfp+0x18>
 8006e04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e08:	b9d5      	cbnz	r5, 8006e40 <__sfp+0x64>
 8006e0a:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <__sfp+0x88>)
 8006e0c:	60e3      	str	r3, [r4, #12]
 8006e0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e12:	6665      	str	r5, [r4, #100]	; 0x64
 8006e14:	f000 f847 	bl	8006ea6 <__retarget_lock_init_recursive>
 8006e18:	f7ff ff96 	bl	8006d48 <__sfp_lock_release>
 8006e1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e24:	6025      	str	r5, [r4, #0]
 8006e26:	61a5      	str	r5, [r4, #24]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e30:	f7ff fac4 	bl	80063bc <memset>
 8006e34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e40:	3468      	adds	r4, #104	; 0x68
 8006e42:	e7d9      	b.n	8006df8 <__sfp+0x1c>
 8006e44:	2104      	movs	r1, #4
 8006e46:	4638      	mov	r0, r7
 8006e48:	f7ff ff62 	bl	8006d10 <__sfmoreglue>
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	6030      	str	r0, [r6, #0]
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d1d5      	bne.n	8006e00 <__sfp+0x24>
 8006e54:	f7ff ff78 	bl	8006d48 <__sfp_lock_release>
 8006e58:	230c      	movs	r3, #12
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	e7ee      	b.n	8006e3c <__sfp+0x60>
 8006e5e:	bf00      	nop
 8006e60:	080076e8 	.word	0x080076e8
 8006e64:	ffff0001 	.word	0xffff0001

08006e68 <_fwalk_reent>:
 8006e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	4688      	mov	r8, r1
 8006e70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e74:	2700      	movs	r7, #0
 8006e76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e7a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e7e:	d505      	bpl.n	8006e8c <_fwalk_reent+0x24>
 8006e80:	6824      	ldr	r4, [r4, #0]
 8006e82:	2c00      	cmp	r4, #0
 8006e84:	d1f7      	bne.n	8006e76 <_fwalk_reent+0xe>
 8006e86:	4638      	mov	r0, r7
 8006e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e8c:	89ab      	ldrh	r3, [r5, #12]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d907      	bls.n	8006ea2 <_fwalk_reent+0x3a>
 8006e92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e96:	3301      	adds	r3, #1
 8006e98:	d003      	beq.n	8006ea2 <_fwalk_reent+0x3a>
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	47c0      	blx	r8
 8006ea0:	4307      	orrs	r7, r0
 8006ea2:	3568      	adds	r5, #104	; 0x68
 8006ea4:	e7e9      	b.n	8006e7a <_fwalk_reent+0x12>

08006ea6 <__retarget_lock_init_recursive>:
 8006ea6:	4770      	bx	lr

08006ea8 <__retarget_lock_acquire_recursive>:
 8006ea8:	4770      	bx	lr

08006eaa <__retarget_lock_release_recursive>:
 8006eaa:	4770      	bx	lr

08006eac <__swhatbuf_r>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	460e      	mov	r6, r1
 8006eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	b096      	sub	sp, #88	; 0x58
 8006eb8:	4614      	mov	r4, r2
 8006eba:	461d      	mov	r5, r3
 8006ebc:	da07      	bge.n	8006ece <__swhatbuf_r+0x22>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	89b3      	ldrh	r3, [r6, #12]
 8006ec4:	061a      	lsls	r2, r3, #24
 8006ec6:	d410      	bmi.n	8006eea <__swhatbuf_r+0x3e>
 8006ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ecc:	e00e      	b.n	8006eec <__swhatbuf_r+0x40>
 8006ece:	466a      	mov	r2, sp
 8006ed0:	f000 f9b4 	bl	800723c <_fstat_r>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	dbf2      	blt.n	8006ebe <__swhatbuf_r+0x12>
 8006ed8:	9a01      	ldr	r2, [sp, #4]
 8006eda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ede:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ee2:	425a      	negs	r2, r3
 8006ee4:	415a      	adcs	r2, r3
 8006ee6:	602a      	str	r2, [r5, #0]
 8006ee8:	e7ee      	b.n	8006ec8 <__swhatbuf_r+0x1c>
 8006eea:	2340      	movs	r3, #64	; 0x40
 8006eec:	2000      	movs	r0, #0
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	b016      	add	sp, #88	; 0x58
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}

08006ef4 <__smakebuf_r>:
 8006ef4:	898b      	ldrh	r3, [r1, #12]
 8006ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ef8:	079d      	lsls	r5, r3, #30
 8006efa:	4606      	mov	r6, r0
 8006efc:	460c      	mov	r4, r1
 8006efe:	d507      	bpl.n	8006f10 <__smakebuf_r+0x1c>
 8006f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	2301      	movs	r3, #1
 8006f0a:	6163      	str	r3, [r4, #20]
 8006f0c:	b002      	add	sp, #8
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	ab01      	add	r3, sp, #4
 8006f12:	466a      	mov	r2, sp
 8006f14:	f7ff ffca 	bl	8006eac <__swhatbuf_r>
 8006f18:	9900      	ldr	r1, [sp, #0]
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	f000 f879 	bl	8007014 <_malloc_r>
 8006f22:	b948      	cbnz	r0, 8006f38 <__smakebuf_r+0x44>
 8006f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f28:	059a      	lsls	r2, r3, #22
 8006f2a:	d4ef      	bmi.n	8006f0c <__smakebuf_r+0x18>
 8006f2c:	f023 0303 	bic.w	r3, r3, #3
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	e7e3      	b.n	8006f00 <__smakebuf_r+0xc>
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <__smakebuf_r+0x7c>)
 8006f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	6020      	str	r0, [r4, #0]
 8006f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	9b00      	ldr	r3, [sp, #0]
 8006f48:	6163      	str	r3, [r4, #20]
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	6120      	str	r0, [r4, #16]
 8006f4e:	b15b      	cbz	r3, 8006f68 <__smakebuf_r+0x74>
 8006f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f54:	4630      	mov	r0, r6
 8006f56:	f000 f983 	bl	8007260 <_isatty_r>
 8006f5a:	b128      	cbz	r0, 8006f68 <__smakebuf_r+0x74>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f023 0303 	bic.w	r3, r3, #3
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	89a0      	ldrh	r0, [r4, #12]
 8006f6a:	4305      	orrs	r5, r0
 8006f6c:	81a5      	strh	r5, [r4, #12]
 8006f6e:	e7cd      	b.n	8006f0c <__smakebuf_r+0x18>
 8006f70:	08006d05 	.word	0x08006d05

08006f74 <_free_r>:
 8006f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f76:	2900      	cmp	r1, #0
 8006f78:	d048      	beq.n	800700c <_free_r+0x98>
 8006f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f7e:	9001      	str	r0, [sp, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f1a1 0404 	sub.w	r4, r1, #4
 8006f86:	bfb8      	it	lt
 8006f88:	18e4      	addlt	r4, r4, r3
 8006f8a:	f000 f98b 	bl	80072a4 <__malloc_lock>
 8006f8e:	4a20      	ldr	r2, [pc, #128]	; (8007010 <_free_r+0x9c>)
 8006f90:	9801      	ldr	r0, [sp, #4]
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	4615      	mov	r5, r2
 8006f96:	b933      	cbnz	r3, 8006fa6 <_free_r+0x32>
 8006f98:	6063      	str	r3, [r4, #4]
 8006f9a:	6014      	str	r4, [r2, #0]
 8006f9c:	b003      	add	sp, #12
 8006f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fa2:	f000 b985 	b.w	80072b0 <__malloc_unlock>
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	d90b      	bls.n	8006fc2 <_free_r+0x4e>
 8006faa:	6821      	ldr	r1, [r4, #0]
 8006fac:	1862      	adds	r2, r4, r1
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	bf04      	itt	eq
 8006fb2:	681a      	ldreq	r2, [r3, #0]
 8006fb4:	685b      	ldreq	r3, [r3, #4]
 8006fb6:	6063      	str	r3, [r4, #4]
 8006fb8:	bf04      	itt	eq
 8006fba:	1852      	addeq	r2, r2, r1
 8006fbc:	6022      	streq	r2, [r4, #0]
 8006fbe:	602c      	str	r4, [r5, #0]
 8006fc0:	e7ec      	b.n	8006f9c <_free_r+0x28>
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	b10b      	cbz	r3, 8006fcc <_free_r+0x58>
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d9fa      	bls.n	8006fc2 <_free_r+0x4e>
 8006fcc:	6811      	ldr	r1, [r2, #0]
 8006fce:	1855      	adds	r5, r2, r1
 8006fd0:	42a5      	cmp	r5, r4
 8006fd2:	d10b      	bne.n	8006fec <_free_r+0x78>
 8006fd4:	6824      	ldr	r4, [r4, #0]
 8006fd6:	4421      	add	r1, r4
 8006fd8:	1854      	adds	r4, r2, r1
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	6011      	str	r1, [r2, #0]
 8006fde:	d1dd      	bne.n	8006f9c <_free_r+0x28>
 8006fe0:	681c      	ldr	r4, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	6053      	str	r3, [r2, #4]
 8006fe6:	4421      	add	r1, r4
 8006fe8:	6011      	str	r1, [r2, #0]
 8006fea:	e7d7      	b.n	8006f9c <_free_r+0x28>
 8006fec:	d902      	bls.n	8006ff4 <_free_r+0x80>
 8006fee:	230c      	movs	r3, #12
 8006ff0:	6003      	str	r3, [r0, #0]
 8006ff2:	e7d3      	b.n	8006f9c <_free_r+0x28>
 8006ff4:	6825      	ldr	r5, [r4, #0]
 8006ff6:	1961      	adds	r1, r4, r5
 8006ff8:	428b      	cmp	r3, r1
 8006ffa:	bf04      	itt	eq
 8006ffc:	6819      	ldreq	r1, [r3, #0]
 8006ffe:	685b      	ldreq	r3, [r3, #4]
 8007000:	6063      	str	r3, [r4, #4]
 8007002:	bf04      	itt	eq
 8007004:	1949      	addeq	r1, r1, r5
 8007006:	6021      	streq	r1, [r4, #0]
 8007008:	6054      	str	r4, [r2, #4]
 800700a:	e7c7      	b.n	8006f9c <_free_r+0x28>
 800700c:	b003      	add	sp, #12
 800700e:	bd30      	pop	{r4, r5, pc}
 8007010:	20004148 	.word	0x20004148

08007014 <_malloc_r>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	1ccd      	adds	r5, r1, #3
 8007018:	f025 0503 	bic.w	r5, r5, #3
 800701c:	3508      	adds	r5, #8
 800701e:	2d0c      	cmp	r5, #12
 8007020:	bf38      	it	cc
 8007022:	250c      	movcc	r5, #12
 8007024:	2d00      	cmp	r5, #0
 8007026:	4606      	mov	r6, r0
 8007028:	db01      	blt.n	800702e <_malloc_r+0x1a>
 800702a:	42a9      	cmp	r1, r5
 800702c:	d903      	bls.n	8007036 <_malloc_r+0x22>
 800702e:	230c      	movs	r3, #12
 8007030:	6033      	str	r3, [r6, #0]
 8007032:	2000      	movs	r0, #0
 8007034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007036:	f000 f935 	bl	80072a4 <__malloc_lock>
 800703a:	4921      	ldr	r1, [pc, #132]	; (80070c0 <_malloc_r+0xac>)
 800703c:	680a      	ldr	r2, [r1, #0]
 800703e:	4614      	mov	r4, r2
 8007040:	b99c      	cbnz	r4, 800706a <_malloc_r+0x56>
 8007042:	4f20      	ldr	r7, [pc, #128]	; (80070c4 <_malloc_r+0xb0>)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	b923      	cbnz	r3, 8007052 <_malloc_r+0x3e>
 8007048:	4621      	mov	r1, r4
 800704a:	4630      	mov	r0, r6
 800704c:	f000 f83c 	bl	80070c8 <_sbrk_r>
 8007050:	6038      	str	r0, [r7, #0]
 8007052:	4629      	mov	r1, r5
 8007054:	4630      	mov	r0, r6
 8007056:	f000 f837 	bl	80070c8 <_sbrk_r>
 800705a:	1c43      	adds	r3, r0, #1
 800705c:	d123      	bne.n	80070a6 <_malloc_r+0x92>
 800705e:	230c      	movs	r3, #12
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	4630      	mov	r0, r6
 8007064:	f000 f924 	bl	80072b0 <__malloc_unlock>
 8007068:	e7e3      	b.n	8007032 <_malloc_r+0x1e>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	1b5b      	subs	r3, r3, r5
 800706e:	d417      	bmi.n	80070a0 <_malloc_r+0x8c>
 8007070:	2b0b      	cmp	r3, #11
 8007072:	d903      	bls.n	800707c <_malloc_r+0x68>
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	441c      	add	r4, r3
 8007078:	6025      	str	r5, [r4, #0]
 800707a:	e004      	b.n	8007086 <_malloc_r+0x72>
 800707c:	6863      	ldr	r3, [r4, #4]
 800707e:	42a2      	cmp	r2, r4
 8007080:	bf0c      	ite	eq
 8007082:	600b      	streq	r3, [r1, #0]
 8007084:	6053      	strne	r3, [r2, #4]
 8007086:	4630      	mov	r0, r6
 8007088:	f000 f912 	bl	80072b0 <__malloc_unlock>
 800708c:	f104 000b 	add.w	r0, r4, #11
 8007090:	1d23      	adds	r3, r4, #4
 8007092:	f020 0007 	bic.w	r0, r0, #7
 8007096:	1ac2      	subs	r2, r0, r3
 8007098:	d0cc      	beq.n	8007034 <_malloc_r+0x20>
 800709a:	1a1b      	subs	r3, r3, r0
 800709c:	50a3      	str	r3, [r4, r2]
 800709e:	e7c9      	b.n	8007034 <_malloc_r+0x20>
 80070a0:	4622      	mov	r2, r4
 80070a2:	6864      	ldr	r4, [r4, #4]
 80070a4:	e7cc      	b.n	8007040 <_malloc_r+0x2c>
 80070a6:	1cc4      	adds	r4, r0, #3
 80070a8:	f024 0403 	bic.w	r4, r4, #3
 80070ac:	42a0      	cmp	r0, r4
 80070ae:	d0e3      	beq.n	8007078 <_malloc_r+0x64>
 80070b0:	1a21      	subs	r1, r4, r0
 80070b2:	4630      	mov	r0, r6
 80070b4:	f000 f808 	bl	80070c8 <_sbrk_r>
 80070b8:	3001      	adds	r0, #1
 80070ba:	d1dd      	bne.n	8007078 <_malloc_r+0x64>
 80070bc:	e7cf      	b.n	800705e <_malloc_r+0x4a>
 80070be:	bf00      	nop
 80070c0:	20004148 	.word	0x20004148
 80070c4:	2000414c 	.word	0x2000414c

080070c8 <_sbrk_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	; (80070e4 <_sbrk_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f7f9 fe6e 	bl	8000db4 <_sbrk>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_sbrk_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_sbrk_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	200043b0 	.word	0x200043b0

080070e8 <_raise_r>:
 80070e8:	291f      	cmp	r1, #31
 80070ea:	b538      	push	{r3, r4, r5, lr}
 80070ec:	4604      	mov	r4, r0
 80070ee:	460d      	mov	r5, r1
 80070f0:	d904      	bls.n	80070fc <_raise_r+0x14>
 80070f2:	2316      	movs	r3, #22
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070fe:	b112      	cbz	r2, 8007106 <_raise_r+0x1e>
 8007100:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007104:	b94b      	cbnz	r3, 800711a <_raise_r+0x32>
 8007106:	4620      	mov	r0, r4
 8007108:	f000 f830 	bl	800716c <_getpid_r>
 800710c:	462a      	mov	r2, r5
 800710e:	4601      	mov	r1, r0
 8007110:	4620      	mov	r0, r4
 8007112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007116:	f000 b817 	b.w	8007148 <_kill_r>
 800711a:	2b01      	cmp	r3, #1
 800711c:	d00a      	beq.n	8007134 <_raise_r+0x4c>
 800711e:	1c59      	adds	r1, r3, #1
 8007120:	d103      	bne.n	800712a <_raise_r+0x42>
 8007122:	2316      	movs	r3, #22
 8007124:	6003      	str	r3, [r0, #0]
 8007126:	2001      	movs	r0, #1
 8007128:	e7e7      	b.n	80070fa <_raise_r+0x12>
 800712a:	2400      	movs	r4, #0
 800712c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007130:	4628      	mov	r0, r5
 8007132:	4798      	blx	r3
 8007134:	2000      	movs	r0, #0
 8007136:	e7e0      	b.n	80070fa <_raise_r+0x12>

08007138 <raise>:
 8007138:	4b02      	ldr	r3, [pc, #8]	; (8007144 <raise+0xc>)
 800713a:	4601      	mov	r1, r0
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	f7ff bfd3 	b.w	80070e8 <_raise_r>
 8007142:	bf00      	nop
 8007144:	20000098 	.word	0x20000098

08007148 <_kill_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4d07      	ldr	r5, [pc, #28]	; (8007168 <_kill_r+0x20>)
 800714c:	2300      	movs	r3, #0
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	f7f9 fda5 	bl	8000ca4 <_kill>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d102      	bne.n	8007164 <_kill_r+0x1c>
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	b103      	cbz	r3, 8007164 <_kill_r+0x1c>
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	bf00      	nop
 8007168:	200043b0 	.word	0x200043b0

0800716c <_getpid_r>:
 800716c:	f7f9 bd92 	b.w	8000c94 <_getpid>

08007170 <__sread>:
 8007170:	b510      	push	{r4, lr}
 8007172:	460c      	mov	r4, r1
 8007174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007178:	f000 f8a0 	bl	80072bc <_read_r>
 800717c:	2800      	cmp	r0, #0
 800717e:	bfab      	itete	ge
 8007180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007182:	89a3      	ldrhlt	r3, [r4, #12]
 8007184:	181b      	addge	r3, r3, r0
 8007186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800718a:	bfac      	ite	ge
 800718c:	6563      	strge	r3, [r4, #84]	; 0x54
 800718e:	81a3      	strhlt	r3, [r4, #12]
 8007190:	bd10      	pop	{r4, pc}

08007192 <__swrite>:
 8007192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007196:	461f      	mov	r7, r3
 8007198:	898b      	ldrh	r3, [r1, #12]
 800719a:	05db      	lsls	r3, r3, #23
 800719c:	4605      	mov	r5, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	4616      	mov	r6, r2
 80071a2:	d505      	bpl.n	80071b0 <__swrite+0x1e>
 80071a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a8:	2302      	movs	r3, #2
 80071aa:	2200      	movs	r2, #0
 80071ac:	f000 f868 	bl	8007280 <_lseek_r>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	4632      	mov	r2, r6
 80071be:	463b      	mov	r3, r7
 80071c0:	4628      	mov	r0, r5
 80071c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071c6:	f000 b817 	b.w	80071f8 <_write_r>

080071ca <__sseek>:
 80071ca:	b510      	push	{r4, lr}
 80071cc:	460c      	mov	r4, r1
 80071ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d2:	f000 f855 	bl	8007280 <_lseek_r>
 80071d6:	1c43      	adds	r3, r0, #1
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	bf15      	itete	ne
 80071dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80071de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071e6:	81a3      	strheq	r3, [r4, #12]
 80071e8:	bf18      	it	ne
 80071ea:	81a3      	strhne	r3, [r4, #12]
 80071ec:	bd10      	pop	{r4, pc}

080071ee <__sclose>:
 80071ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f2:	f000 b813 	b.w	800721c <_close_r>
	...

080071f8 <_write_r>:
 80071f8:	b538      	push	{r3, r4, r5, lr}
 80071fa:	4d07      	ldr	r5, [pc, #28]	; (8007218 <_write_r+0x20>)
 80071fc:	4604      	mov	r4, r0
 80071fe:	4608      	mov	r0, r1
 8007200:	4611      	mov	r1, r2
 8007202:	2200      	movs	r2, #0
 8007204:	602a      	str	r2, [r5, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	f7f9 fd83 	bl	8000d12 <_write>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_write_r+0x1e>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_write_r+0x1e>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	200043b0 	.word	0x200043b0

0800721c <_close_r>:
 800721c:	b538      	push	{r3, r4, r5, lr}
 800721e:	4d06      	ldr	r5, [pc, #24]	; (8007238 <_close_r+0x1c>)
 8007220:	2300      	movs	r3, #0
 8007222:	4604      	mov	r4, r0
 8007224:	4608      	mov	r0, r1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	f7f9 fd8f 	bl	8000d4a <_close>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_close_r+0x1a>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_close_r+0x1a>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	200043b0 	.word	0x200043b0

0800723c <_fstat_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d07      	ldr	r5, [pc, #28]	; (800725c <_fstat_r+0x20>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	f7f9 fd8a 	bl	8000d62 <_fstat>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d102      	bne.n	8007258 <_fstat_r+0x1c>
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	b103      	cbz	r3, 8007258 <_fstat_r+0x1c>
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	bf00      	nop
 800725c:	200043b0 	.word	0x200043b0

08007260 <_isatty_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4d06      	ldr	r5, [pc, #24]	; (800727c <_isatty_r+0x1c>)
 8007264:	2300      	movs	r3, #0
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f7f9 fd89 	bl	8000d82 <_isatty>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_isatty_r+0x1a>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_isatty_r+0x1a>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	200043b0 	.word	0x200043b0

08007280 <_lseek_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d07      	ldr	r5, [pc, #28]	; (80072a0 <_lseek_r+0x20>)
 8007284:	4604      	mov	r4, r0
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	2200      	movs	r2, #0
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7f9 fd82 	bl	8000d98 <_lseek>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_lseek_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_lseek_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	200043b0 	.word	0x200043b0

080072a4 <__malloc_lock>:
 80072a4:	4801      	ldr	r0, [pc, #4]	; (80072ac <__malloc_lock+0x8>)
 80072a6:	f7ff bdff 	b.w	8006ea8 <__retarget_lock_acquire_recursive>
 80072aa:	bf00      	nop
 80072ac:	200043a8 	.word	0x200043a8

080072b0 <__malloc_unlock>:
 80072b0:	4801      	ldr	r0, [pc, #4]	; (80072b8 <__malloc_unlock+0x8>)
 80072b2:	f7ff bdfa 	b.w	8006eaa <__retarget_lock_release_recursive>
 80072b6:	bf00      	nop
 80072b8:	200043a8 	.word	0x200043a8

080072bc <_read_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_read_r+0x20>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	4608      	mov	r0, r1
 80072c4:	4611      	mov	r1, r2
 80072c6:	2200      	movs	r2, #0
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	f7f9 fd04 	bl	8000cd8 <_read>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_read_r+0x1e>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_read_r+0x1e>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	200043b0 	.word	0x200043b0

080072e0 <_init>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	bf00      	nop
 80072e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e6:	bc08      	pop	{r3}
 80072e8:	469e      	mov	lr, r3
 80072ea:	4770      	bx	lr

080072ec <_fini>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	bf00      	nop
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr
