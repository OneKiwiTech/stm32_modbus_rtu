
modbus_rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08008768  08008768  00018768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c00  08008c00  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c08  08008c08  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c08  08008c08  00018c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c0c  08008c0c  00018c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00004950  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a4c  20004a4c  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027e1d  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000544b  00000000  00000000  00047f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  0004d398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014f8  00000000  00000000  0004ea98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269ba  00000000  00000000  0004ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e38a  00000000  00000000  0007694a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7989  00000000  00000000  00094cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016c65d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065c4  00000000  00000000  0016c6b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008750 	.word	0x08008750

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	08008750 	.word	0x08008750

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000118 	.word	0x20000118
 8000598:	200001d4 	.word	0x200001d4

0800059c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4a06      	ldr	r2, [pc, #24]	; (80005cc <vApplicationGetTimerTaskMemory+0x30>)
 80005b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ba:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	200003d4 	.word	0x200003d4
 80005cc:	20000490 	.word	0x20000490

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b08e      	sub	sp, #56	; 0x38
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fc6f 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f837 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f91d 	bl	800081c <MX_GPIO_Init>
  MX_DMA_Init();
 80005e2:	f000 f8fb 	bl	80007dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e6:	f000 f8cf 	bl	8000788 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80005ea:	f000 f897 	bl	800071c <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <main+0x6c>)
 80005f0:	f107 041c 	add.w	r4, r7, #28
 80005f4:	461d      	mov	r5, r3
 80005f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fa42 	bl	8003a92 <osThreadCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a0b      	ldr	r2, [pc, #44]	; (8000640 <main+0x70>)
 8000612:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
#if MB_SLAVE_RTU_ENABLED > 0
  osThreadDef(ModbusRTUTask, ModbusSlaveRTUTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 128);
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <main+0x74>)
 8000616:	463c      	mov	r4, r7
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mbSlavePollTask_h = osThreadCreate(osThread(ModbusRTUTask), NULL);
 8000626:	463b      	mov	r3, r7
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f003 fa31 	bl	8003a92 <osThreadCreate>
 8000630:	4603      	mov	r3, r0
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <main+0x78>)
 8000634:	6013      	str	r3, [r2, #0]
#endif /* MB_MASTER_RTU_ENABLED */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000636:	f003 fa25 	bl	8003a84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063a:	e7fe      	b.n	800063a <main+0x6a>
 800063c:	08008784 	.word	0x08008784
 8000640:	200047a0 	.word	0x200047a0
 8000644:	080087a0 	.word	0x080087a0
 8000648:	200047a4 	.word	0x200047a4

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f007 f973 	bl	8007946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <SystemClock_Config+0xc8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a26      	ldr	r2, [pc, #152]	; (8000714 <SystemClock_Config+0xc8>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemClock_Config+0xc8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <SystemClock_Config+0xcc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a20      	ldr	r2, [pc, #128]	; (8000718 <SystemClock_Config+0xcc>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <SystemClock_Config+0xcc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006c0:	2348      	movs	r3, #72	; 0x48
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fa61 	bl	8001b98 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 f90a 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2102      	movs	r1, #2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fcc3 	bl	8002088 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000708:	f000 f8f4 	bl	80008f4 <Error_Handler>
  }
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	463b      	mov	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_TIM7_Init+0x64>)
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_TIM7_Init+0x68>)
 800072e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000730:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_TIM7_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_TIM7_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_TIM7_Init+0x64>)
 800073e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000742:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_TIM7_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_TIM7_Init+0x64>)
 800074c:	f001 feca 	bl	80024e4 <HAL_TIM_Base_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000756:	f000 f8cd 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <MX_TIM7_Init+0x64>)
 8000768:	f002 f97c 	bl	8002a64 <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000772:	f000 f8bf 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20004850 	.word	0x20004850
 8000784:	40001400 	.word	0x40001400

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f002 f9e0 	bl	8002b84 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f893 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000480c 	.word	0x2000480c
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_DMA_Init+0x3c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MX_DMA_Init+0x3c>)
 80007ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_DMA_Init+0x3c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2105      	movs	r1, #5
 8000802:	2011      	movs	r0, #17
 8000804:	f000 fc52 	bl	80010ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000808:	2011      	movs	r0, #17
 800080a:	f000 fc6b 	bl	80010e4 <HAL_NVIC_EnableIRQ>

}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <MX_GPIO_Init+0x9c>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b1d      	ldr	r3, [pc, #116]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a11      	ldr	r2, [pc, #68]	; (80008b8 <MX_GPIO_Init+0x9c>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_GPIO_Init+0x9c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <MX_GPIO_Init+0xa0>)
 800088e:	f001 f94f 	bl	8001b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin;
 8000892:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0xa0>)
 80008ac:	f000 ffa4 	bl	80017f8 <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020c00 	.word	0x40020c00

080008c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f003 f92e 	bl	8003b2a <osDelay>
 80008ce:	e7fb      	b.n	80008c8 <StartDefaultTask+0x8>

080008d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d101      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e2:	f000 fb0b 	bl	8000efc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40001000 	.word	0x40001000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_MspInit+0x54>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <HAL_MspInit+0x54>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <HAL_MspInit+0x54>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_MspInit+0x54>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <HAL_MspInit+0x54>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_MspInit+0x54>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	210f      	movs	r1, #15
 8000942:	f06f 0001 	mvn.w	r0, #1
 8000946:	f000 fbb1 	bl	80010ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_TIM_Base_MspInit+0x48>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d115      	bne.n	8000996 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_TIM_Base_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <HAL_TIM_Base_MspInit+0x4c>)
 8000974:	f043 0320 	orr.w	r3, r3, #32
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_TIM_Base_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2105      	movs	r1, #5
 800098a:	2037      	movs	r0, #55	; 0x37
 800098c:	f000 fb8e 	bl	80010ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000990:	2037      	movs	r0, #55	; 0x37
 8000992:	f000 fba7 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40001400 	.word	0x40001400
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <HAL_UART_MspInit+0xf0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d162      	bne.n	8000a90 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <HAL_UART_MspInit+0xf4>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a32      	ldr	r2, [pc, #200]	; (8000a9c <HAL_UART_MspInit+0xf4>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <HAL_UART_MspInit+0xf4>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <HAL_UART_MspInit+0xf4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a2b      	ldr	r2, [pc, #172]	; (8000a9c <HAL_UART_MspInit+0xf4>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <HAL_UART_MspInit+0xf4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4820      	ldr	r0, [pc, #128]	; (8000aa0 <HAL_UART_MspInit+0xf8>)
 8000a1e:	f000 feeb 	bl	80017f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a24:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <HAL_UART_MspInit+0x100>)
 8000a26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a32:	2240      	movs	r2, #64	; 0x40
 8000a34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a42:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a66:	f000 fb4b 	bl	8001100 <HAL_DMA_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a70:	f7ff ff40 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_UART_MspInit+0xfc>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2105      	movs	r1, #5
 8000a84:	2026      	movs	r0, #38	; 0x26
 8000a86:	f000 fb11 	bl	80010ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a8a:	2026      	movs	r0, #38	; 0x26
 8000a8c:	f000 fb2a 	bl	80010e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	200047ac 	.word	0x200047ac
 8000aa8:	400260a0 	.word	0x400260a0

08000aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	2036      	movs	r0, #54	; 0x36
 8000ac2:	f000 faf3 	bl	80010ac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ac6:	2036      	movs	r0, #54	; 0x36
 8000ac8:	f000 fb0c 	bl	80010e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_InitTick+0xa4>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	; (8000b50 <HAL_InitTick+0xa4>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <HAL_InitTick+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae8:	f107 0210 	add.w	r2, r7, #16
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fcc4 	bl	8002480 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000af8:	f001 fc9a 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8000afc:	4603      	mov	r3, r0
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b06:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0a:	0c9b      	lsrs	r3, r3, #18
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_InitTick+0xac>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <HAL_InitTick+0xb0>)
 8000b14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_InitTick+0xac>)
 8000b18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_InitTick+0xac>)
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_InitTick+0xac>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_InitTick+0xac>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <HAL_InitTick+0xac>)
 8000b32:	f001 fcd7 	bl	80024e4 <HAL_TIM_Base_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d104      	bne.n	8000b46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <HAL_InitTick+0xac>)
 8000b3e:	f001 fd21 	bl	8002584 <HAL_TIM_Base_Start_IT>
 8000b42:	4603      	mov	r3, r0
 8000b44:	e000      	b.n	8000b48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3730      	adds	r7, #48	; 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40023800 	.word	0x40023800
 8000b54:	431bde83 	.word	0x431bde83
 8000b58:	20004898 	.word	0x20004898
 8000b5c:	40001000 	.word	0x40001000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
 // uint32_t tmp_flag = 0;//__HAL_DMA_GET_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF1_6);
  uint32_t tmp_it_source = __HAL_DMA_GET_IT_SOURCE(&hdma_usart2_tx, DMA_IT_TC);
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <DMA1_Stream6_IRQHandler+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	607b      	str	r3, [r7, #4]
  if((tmp_it_source != RESET)) {
//	  osSignalSet(mbPollTask_h, MB_TX_DMA_COMPLETE_EVT);
  }

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <DMA1_Stream6_IRQHandler+0x20>)
 8000ba0:	f000 fbee 	bl	8001380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200047ac 	.word	0x200047ac

08000bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <USART2_IRQHandler+0x84>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0320 	and.w	r3, r3, #32
 8000bc0:	2b20      	cmp	r3, #32
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <USART2_IRQHandler+0x84>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	f003 0320 	and.w	r3, r3, #32
 8000bd6:	60bb      	str	r3, [r7, #8]
  
  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d011      	beq.n	8000c02 <USART2_IRQHandler+0x52>
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d00e      	beq.n	8000c02 <USART2_IRQHandler+0x52>
#if MB_SLAVE_RTU_ENABLED > 0
    pxMBFrameCBByteReceived();
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <USART2_IRQHandler+0x88>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4798      	blx	r3
#endif /* MB_SLAVE_RTU_ENABLED */
#if MB_MASTER_RTU_ENABLED > 0
    pxMBMasterFrameCBByteReceived();
#endif /* MB_MASTER_RTU_ENABLED */
    __HAL_UART_CLEAR_PEFLAG(&huart2);    
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <USART2_IRQHandler+0x84>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <USART2_IRQHandler+0x84>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
    return;
 8000c00:	e014      	b.n	8000c2c <USART2_IRQHandler+0x7c>
  }
  
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET)) {
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <USART2_IRQHandler+0x84>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0c:	2b80      	cmp	r3, #128	; 0x80
 8000c0e:	d10a      	bne.n	8000c26 <USART2_IRQHandler+0x76>
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <USART2_IRQHandler+0x84>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <USART2_IRQHandler+0x76>
#if MB_SLAVE_RTU_ENABLED > 0
    pxMBFrameCBTransmitterEmpty();    
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <USART2_IRQHandler+0x8c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4798      	blx	r3
#endif /* MB_SLAVE_RTU_ENABLED */
#if MB_MASTER_RTU_ENABLED > 0
    pxMBMasterFrameCBTransmitterEmpty();
#endif /* MB_MASTER_RTU_ENABLED */
    return ;
 8000c24:	e002      	b.n	8000c2c <USART2_IRQHandler+0x7c>
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c26:	4803      	ldr	r0, [pc, #12]	; (8000c34 <USART2_IRQHandler+0x84>)
 8000c28:	f002 f88c 	bl	8002d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000480c 	.word	0x2000480c
 8000c38:	2000492c 	.word	0x2000492c
 8000c3c:	20004924 	.word	0x20004924

08000c40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM6_DAC_IRQHandler+0x10>)
 8000c46:	f001 fd3c 	bl	80026c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20004898 	.word	0x20004898

08000c54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET) {
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <TIM7_IRQHandler+0x54>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d11b      	bne.n	8000c9e <TIM7_IRQHandler+0x4a>
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <TIM7_IRQHandler+0x54>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d114      	bne.n	8000c9e <TIM7_IRQHandler+0x4a>
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <TIM7_IRQHandler+0x54>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f06f 0201 	mvn.w	r2, #1
 8000c7c:	611a      	str	r2, [r3, #16]
    if (usT35TimeOut50us == 0)
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <TIM7_IRQHandler+0x58>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d103      	bne.n	8000c90 <TIM7_IRQHandler+0x3c>
    {
#if MB_SLAVE_RTU_ENABLED > 0
      pxMBPortCBTimerExpired();
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <TIM7_IRQHandler+0x5c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4798      	blx	r3
 8000c8e:	e006      	b.n	8000c9e <TIM7_IRQHandler+0x4a>
#endif
#if MB_MASTER_RTU_ENABLED > 0
      pxMBMasterPortCBTimerExpired();
#endif
    }else {
    	usT35TimeOut50us--;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <TIM7_IRQHandler+0x58>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	3b01      	subs	r3, #1
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <TIM7_IRQHandler+0x58>)
 8000c9c:	801a      	strh	r2, [r3, #0]
    }
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c9e:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM7_IRQHandler+0x54>)
 8000ca0:	f001 fd0f 	bl	80026c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20004850 	.word	0x20004850
 8000cac:	20004938 	.word	0x20004938
 8000cb0:	20004928 	.word	0x20004928

08000cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
	return 1;
 8000cb8:	2301      	movs	r3, #1
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_kill>:

int _kill(int pid, int sig)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cce:	f006 fcf7 	bl	80076c0 <__errno>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2216      	movs	r2, #22
 8000cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <_exit>:

void _exit (int status)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ffe7 	bl	8000cc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cf6:	e7fe      	b.n	8000cf6 <_exit+0x12>

08000cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	e00a      	b.n	8000d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d0a:	f3af 8000 	nop.w
 8000d0e:	4601      	mov	r1, r0
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	60ba      	str	r2, [r7, #8]
 8000d16:	b2ca      	uxtb	r2, r1
 8000d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbf0      	blt.n	8000d0a <_read+0x12>
	}

return len;
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	60f8      	str	r0, [r7, #12]
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e009      	b.n	8000d58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf1      	blt.n	8000d44 <_write+0x12>
	}
	return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_close>:

int _close(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	return -1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d92:	605a      	str	r2, [r3, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_isatty>:

int _isatty(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return 1;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f006 fc5c 	bl	80076c0 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20020000 	.word	0x20020000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	20000890 	.word	0x20000890
 8000e3c:	20004a50 	.word	0x20004a50

08000e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd7 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f006 fd23 	bl	80078dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fb9b 	bl	80005d0 <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000ea8:	08008c10 	.word	0x08008c10
  ldr r2, =_sbss
 8000eac:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000eb0:	20004a4c 	.word	0x20004a4c

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	; (8000ef8 <HAL_Init+0x40>)
 8000ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_Init+0x40>)
 8000ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <HAL_Init+0x40>)
 8000eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 f8d8 	bl	8001096 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f7ff fde0 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eec:	f7ff fd08 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023c00 	.word	0x40023c00

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	200048e0 	.word	0x200048e0

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200048e0 	.word	0x200048e0

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff4c 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010be:	f7ff ff61 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	6978      	ldr	r0, [r7, #20]
 80010ca:	f7ff ffb1 	bl	8001030 <NVIC_EncodePriority>
 80010ce:	4602      	mov	r2, r0
 80010d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ff80 	bl	8000fdc <__NVIC_SetPriority>
}
 80010dc:	bf00      	nop
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff54 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800110c:	f7ff ff0a 	bl	8000f24 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e099      	b.n	8001250 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 0201 	bic.w	r2, r2, #1
 800113a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800113c:	e00f      	b.n	800115e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800113e:	f7ff fef1 	bl	8000f24 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b05      	cmp	r3, #5
 800114a:	d908      	bls.n	800115e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2220      	movs	r2, #32
 8001150:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e078      	b.n	8001250 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e8      	bne.n	800113e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_DMA_Init+0x158>)
 8001178:	4013      	ands	r3, r2
 800117a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800118a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d107      	bne.n	80011c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4313      	orrs	r3, r2
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f023 0307 	bic.w	r3, r3, #7
 80011de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d117      	bne.n	8001222 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00e      	beq.n	8001222 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 fa7b 	bl	8001700 <DMA_CheckFifoParam>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d008      	beq.n	8001222 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2240      	movs	r2, #64	; 0x40
 8001214:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800121e:	2301      	movs	r3, #1
 8001220:	e016      	b.n	8001250 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fa32 	bl	8001694 <DMA_CalcBaseAndBitshift>
 8001230:	4603      	mov	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001238:	223f      	movs	r2, #63	; 0x3f
 800123a:	409a      	lsls	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	f010803f 	.word	0xf010803f

0800125c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800126a:	f7ff fe5b 	bl	8000f24 <HAL_GetTick>
 800126e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d008      	beq.n	800128e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e052      	b.n	8001334 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0216 	bic.w	r2, r2, #22
 800129c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d103      	bne.n	80012be <HAL_DMA_Abort+0x62>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0208 	bic.w	r2, r2, #8
 80012cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0201 	bic.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012de:	e013      	b.n	8001308 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012e0:	f7ff fe20 	bl	8000f24 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d90c      	bls.n	8001308 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2220      	movs	r2, #32
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e015      	b.n	8001334 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1e4      	bne.n	80012e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131a:	223f      	movs	r2, #63	; 0x3f
 800131c:	409a      	lsls	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d004      	beq.n	800135a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2280      	movs	r2, #128	; 0x80
 8001354:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e00c      	b.n	8001374 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0201 	bic.w	r2, r2, #1
 8001370:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800138c:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <HAL_DMA_IRQHandler+0x258>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a92      	ldr	r2, [pc, #584]	; (80015dc <HAL_DMA_IRQHandler+0x25c>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0a9b      	lsrs	r3, r3, #10
 8001398:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013aa:	2208      	movs	r2, #8
 80013ac:	409a      	lsls	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d01a      	beq.n	80013ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d013      	beq.n	80013ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0204 	bic.w	r2, r2, #4
 80013d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2208      	movs	r2, #8
 80013da:	409a      	lsls	r2, r3
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f0:	2201      	movs	r2, #1
 80013f2:	409a      	lsls	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d012      	beq.n	8001422 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140e:	2201      	movs	r2, #1
 8001410:	409a      	lsls	r2, r3
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141a:	f043 0202 	orr.w	r2, r3, #2
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	2204      	movs	r2, #4
 8001428:	409a      	lsls	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d012      	beq.n	8001458 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00b      	beq.n	8001458 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001444:	2204      	movs	r2, #4
 8001446:	409a      	lsls	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001450:	f043 0204 	orr.w	r2, r3, #4
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	2210      	movs	r2, #16
 800145e:	409a      	lsls	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d043      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d03c      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147a:	2210      	movs	r2, #16
 800147c:	409a      	lsls	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d018      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d108      	bne.n	80014b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d024      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
 80014ae:	e01f      	b.n	80014f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01b      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	4798      	blx	r3
 80014c0:	e016      	b.n	80014f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d107      	bne.n	80014e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0208 	bic.w	r2, r2, #8
 80014de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f4:	2220      	movs	r2, #32
 80014f6:	409a      	lsls	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 808e 	beq.w	800161e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 8086 	beq.w	800161e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2220      	movs	r2, #32
 8001518:	409a      	lsls	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b05      	cmp	r3, #5
 8001528:	d136      	bne.n	8001598 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0216 	bic.w	r2, r2, #22
 8001538:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	695a      	ldr	r2, [r3, #20]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001548:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d103      	bne.n	800155a <HAL_DMA_IRQHandler+0x1da>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001556:	2b00      	cmp	r3, #0
 8001558:	d007      	beq.n	800156a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0208 	bic.w	r2, r2, #8
 8001568:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156e:	223f      	movs	r2, #63	; 0x3f
 8001570:	409a      	lsls	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158a:	2b00      	cmp	r3, #0
 800158c:	d07d      	beq.n	800168a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
        }
        return;
 8001596:	e078      	b.n	800168a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01c      	beq.n	80015e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d108      	bne.n	80015c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d030      	beq.n	800161e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	4798      	blx	r3
 80015c4:	e02b      	b.n	800161e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d027      	beq.n	800161e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	4798      	blx	r3
 80015d6:	e022      	b.n	800161e <HAL_DMA_IRQHandler+0x29e>
 80015d8:	20000000 	.word	0x20000000
 80015dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10f      	bne.n	800160e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0210 	bic.w	r2, r2, #16
 80015fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001622:	2b00      	cmp	r3, #0
 8001624:	d032      	beq.n	800168c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d022      	beq.n	8001678 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2205      	movs	r2, #5
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	3301      	adds	r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	429a      	cmp	r2, r3
 8001654:	d307      	bcc.n	8001666 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f2      	bne.n	800164a <HAL_DMA_IRQHandler+0x2ca>
 8001664:	e000      	b.n	8001668 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001666:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	4798      	blx	r3
 8001688:	e000      	b.n	800168c <HAL_DMA_IRQHandler+0x30c>
        return;
 800168a:	bf00      	nop
    }
  }
}
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop

08001694 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	3b10      	subs	r3, #16
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <DMA_CalcBaseAndBitshift+0x64>)
 80016a6:	fba2 2303 	umull	r2, r3, r2, r3
 80016aa:	091b      	lsrs	r3, r3, #4
 80016ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016ae:	4a13      	ldr	r2, [pc, #76]	; (80016fc <DMA_CalcBaseAndBitshift+0x68>)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d909      	bls.n	80016d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	1d1a      	adds	r2, r3, #4
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	659a      	str	r2, [r3, #88]	; 0x58
 80016d4:	e007      	b.n	80016e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016de:	f023 0303 	bic.w	r3, r3, #3
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	aaaaaaab 	.word	0xaaaaaaab
 80016fc:	080088d4 	.word	0x080088d4

08001700 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d11f      	bne.n	800175a <DMA_CheckFifoParam+0x5a>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d856      	bhi.n	80017ce <DMA_CheckFifoParam+0xce>
 8001720:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <DMA_CheckFifoParam+0x28>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	08001739 	.word	0x08001739
 800172c:	0800174b 	.word	0x0800174b
 8001730:	08001739 	.word	0x08001739
 8001734:	080017cf 	.word	0x080017cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d046      	beq.n	80017d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001748:	e043      	b.n	80017d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001752:	d140      	bne.n	80017d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001758:	e03d      	b.n	80017d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001762:	d121      	bne.n	80017a8 <DMA_CheckFifoParam+0xa8>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d837      	bhi.n	80017da <DMA_CheckFifoParam+0xda>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <DMA_CheckFifoParam+0x70>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	08001781 	.word	0x08001781
 8001774:	08001787 	.word	0x08001787
 8001778:	08001781 	.word	0x08001781
 800177c:	08001799 	.word	0x08001799
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      break;
 8001784:	e030      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d025      	beq.n	80017de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001796:	e022      	b.n	80017de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017a0:	d11f      	bne.n	80017e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017a6:	e01c      	b.n	80017e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d903      	bls.n	80017b6 <DMA_CheckFifoParam+0xb6>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d003      	beq.n	80017bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017b4:	e018      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
      break;
 80017ba:	e015      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00e      	beq.n	80017e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
      break;
 80017cc:	e00b      	b.n	80017e6 <DMA_CheckFifoParam+0xe6>
      break;
 80017ce:	bf00      	nop
 80017d0:	e00a      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
      break;
 80017d2:	bf00      	nop
 80017d4:	e008      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
      break;
 80017d6:	bf00      	nop
 80017d8:	e006      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
      break;
 80017da:	bf00      	nop
 80017dc:	e004      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
      break;
 80017de:	bf00      	nop
 80017e0:	e002      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80017e2:	bf00      	nop
 80017e4:	e000      	b.n	80017e8 <DMA_CheckFifoParam+0xe8>
      break;
 80017e6:	bf00      	nop
    }
  } 
  
  return status; 
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
 8001812:	e16b      	b.n	8001aec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001814:	2201      	movs	r2, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 815a 	bne.w	8001ae6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b01      	cmp	r3, #1
 800183c:	d005      	beq.n	800184a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001846:	2b02      	cmp	r3, #2
 8001848:	d130      	bne.n	80018ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68da      	ldr	r2, [r3, #12]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	f003 0201 	and.w	r2, r3, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d017      	beq.n	80018e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d123      	bne.n	800193c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	691a      	ldr	r2, [r3, #16]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	69b9      	ldr	r1, [r7, #24]
 8001938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0203 	and.w	r2, r3, #3
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80b4 	beq.w	8001ae6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b60      	ldr	r3, [pc, #384]	; (8001b04 <HAL_GPIO_Init+0x30c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a5f      	ldr	r2, [pc, #380]	; (8001b04 <HAL_GPIO_Init+0x30c>)
 8001988:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <HAL_GPIO_Init+0x30c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800199a:	4a5b      	ldr	r2, [pc, #364]	; (8001b08 <HAL_GPIO_Init+0x310>)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <HAL_GPIO_Init+0x314>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d02b      	beq.n	8001a1e <HAL_GPIO_Init+0x226>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a51      	ldr	r2, [pc, #324]	; (8001b10 <HAL_GPIO_Init+0x318>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d025      	beq.n	8001a1a <HAL_GPIO_Init+0x222>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a50      	ldr	r2, [pc, #320]	; (8001b14 <HAL_GPIO_Init+0x31c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01f      	beq.n	8001a16 <HAL_GPIO_Init+0x21e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4f      	ldr	r2, [pc, #316]	; (8001b18 <HAL_GPIO_Init+0x320>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0x21a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a4e      	ldr	r2, [pc, #312]	; (8001b1c <HAL_GPIO_Init+0x324>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0x216>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a4d      	ldr	r2, [pc, #308]	; (8001b20 <HAL_GPIO_Init+0x328>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00d      	beq.n	8001a0a <HAL_GPIO_Init+0x212>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <HAL_GPIO_Init+0x32c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d007      	beq.n	8001a06 <HAL_GPIO_Init+0x20e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4b      	ldr	r2, [pc, #300]	; (8001b28 <HAL_GPIO_Init+0x330>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_GPIO_Init+0x20a>
 80019fe:	2307      	movs	r3, #7
 8001a00:	e00e      	b.n	8001a20 <HAL_GPIO_Init+0x228>
 8001a02:	2308      	movs	r3, #8
 8001a04:	e00c      	b.n	8001a20 <HAL_GPIO_Init+0x228>
 8001a06:	2306      	movs	r3, #6
 8001a08:	e00a      	b.n	8001a20 <HAL_GPIO_Init+0x228>
 8001a0a:	2305      	movs	r3, #5
 8001a0c:	e008      	b.n	8001a20 <HAL_GPIO_Init+0x228>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x228>
 8001a12:	2303      	movs	r3, #3
 8001a14:	e004      	b.n	8001a20 <HAL_GPIO_Init+0x228>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e002      	b.n	8001a20 <HAL_GPIO_Init+0x228>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_Init+0x228>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	69fa      	ldr	r2, [r7, #28]
 8001a22:	f002 0203 	and.w	r2, r2, #3
 8001a26:	0092      	lsls	r2, r2, #2
 8001a28:	4093      	lsls	r3, r2
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a30:	4935      	ldr	r1, [pc, #212]	; (8001b08 <HAL_GPIO_Init+0x310>)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <HAL_GPIO_Init+0x334>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a62:	4a32      	ldr	r2, [pc, #200]	; (8001b2c <HAL_GPIO_Init+0x334>)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a68:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <HAL_GPIO_Init+0x334>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8c:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_GPIO_Init+0x334>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <HAL_GPIO_Init+0x334>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ab6:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_GPIO_Init+0x334>)
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <HAL_GPIO_Init+0x334>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_GPIO_Init+0x334>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b0f      	cmp	r3, #15
 8001af0:	f67f ae90 	bls.w	8001814 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40013800 	.word	0x40013800
 8001b0c:	40020000 	.word	0x40020000
 8001b10:	40020400 	.word	0x40020400
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020c00 	.word	0x40020c00
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40021400 	.word	0x40021400
 8001b24:	40021800 	.word	0x40021800
 8001b28:	40021c00 	.word	0x40021c00
 8001b2c:	40013c00 	.word	0x40013c00

08001b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b40:	787b      	ldrb	r3, [r7, #1]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b46:	887a      	ldrh	r2, [r7, #2]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b4c:	e003      	b.n	8001b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	041a      	lsls	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b74:	887a      	ldrh	r2, [r7, #2]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	041a      	lsls	r2, r3, #16
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43d9      	mvns	r1, r3
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	400b      	ands	r3, r1
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	619a      	str	r2, [r3, #24]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e264      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d075      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bb6:	4ba3      	ldr	r3, [pc, #652]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d00c      	beq.n	8001bdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bc2:	4ba0      	ldr	r3, [pc, #640]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d112      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bce:	4b9d      	ldr	r3, [pc, #628]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bda:	d10b      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d05b      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x108>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d157      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e23f      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d106      	bne.n	8001c0c <HAL_RCC_OscConfig+0x74>
 8001bfe:	4b91      	ldr	r3, [pc, #580]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xb0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x98>
 8001c16:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a8a      	ldr	r2, [pc, #552]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a87      	ldr	r2, [pc, #540]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xb0>
 8001c30:	4b84      	ldr	r3, [pc, #528]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a83      	ldr	r2, [pc, #524]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a80      	ldr	r2, [pc, #512]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff f968 	bl	8000f24 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff f964 	bl	8000f24 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e204      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xc0>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff f954 	bl	8000f24 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff f950 	bl	8000f24 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1f0      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c92:	4b6c      	ldr	r3, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0xe8>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d063      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cae:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cba:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d11c      	bne.n	8001d00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d116      	bne.n	8001d00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	4b5c      	ldr	r3, [pc, #368]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_RCC_OscConfig+0x152>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e1c4      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4952      	ldr	r1, [pc, #328]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfe:	e03a      	b.n	8001d76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d020      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d08:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <HAL_RCC_OscConfig+0x2b0>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f909 	bl	8000f24 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d16:	f7ff f905 	bl	8000f24 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1a5      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4940      	ldr	r1, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4a:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_OscConfig+0x2b0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f8e8 	bl	8000f24 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d58:	f7ff f8e4 	bl	8000f24 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e184      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d6a:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d030      	beq.n	8001de4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d016      	beq.n	8001db8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff f8c8 	bl	8000f24 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff f8c4 	bl	8000f24 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e164      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x200>
 8001db6:	e015      	b.n	8001de4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_OscConfig+0x2b4>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f8b1 	bl	8000f24 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc6:	f7ff f8ad 	bl	8000f24 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e14d      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a0 	beq.w	8001f32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10f      	bne.n	8001e22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_OscConfig+0x2b8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d121      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_RCC_OscConfig+0x2b8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <HAL_RCC_OscConfig+0x2b8>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f873 	bl	8000f24 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e011      	b.n	8001e66 <HAL_RCC_OscConfig+0x2ce>
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	42470000 	.word	0x42470000
 8001e4c:	42470e80 	.word	0x42470e80
 8001e50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e54:	f7ff f866 	bl	8000f24 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e106      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e66:	4b85      	ldr	r3, [pc, #532]	; (800207c <HAL_RCC_OscConfig+0x4e4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d106      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
 8001e7a:	4b81      	ldr	r3, [pc, #516]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a80      	ldr	r2, [pc, #512]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	e01c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x32a>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d10c      	bne.n	8001eaa <HAL_RCC_OscConfig+0x312>
 8001e90:	4b7b      	ldr	r3, [pc, #492]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	4a7a      	ldr	r2, [pc, #488]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9c:	4b78      	ldr	r3, [pc, #480]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a77      	ldr	r2, [pc, #476]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	e00b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x32a>
 8001eaa:	4b75      	ldr	r3, [pc, #468]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a74      	ldr	r2, [pc, #464]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	4b72      	ldr	r3, [pc, #456]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a71      	ldr	r2, [pc, #452]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d015      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7ff f82b 	bl	8000f24 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff f827 	bl	8000f24 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0c5      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	4b65      	ldr	r3, [pc, #404]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ee      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x33a>
 8001ef4:	e014      	b.n	8001f20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f815 	bl	8000f24 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff f811 	bl	8000f24 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0af      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ee      	bne.n	8001efe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d105      	bne.n	8001f32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a55      	ldr	r2, [pc, #340]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 809b 	beq.w	8002072 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d05c      	beq.n	8002002 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d141      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_RCC_OscConfig+0x4ec>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe ffe5 	bl	8000f24 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7fe ffe1 	bl	8000f24 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e081      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f70:	4b43      	ldr	r3, [pc, #268]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f0      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69da      	ldr	r2, [r3, #28]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	019b      	lsls	r3, r3, #6
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	3b01      	subs	r3, #1
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	061b      	lsls	r3, r3, #24
 8001fa0:	4937      	ldr	r1, [pc, #220]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCC_OscConfig+0x4ec>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe ffba 	bl	8000f24 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe ffb6 	bl	8000f24 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e056      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
 8001fd2:	e04e      	b.n	8002072 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_RCC_OscConfig+0x4ec>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe ffa3 	bl	8000f24 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe ff9f 	bl	8000f24 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e03f      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x44a>
 8002000:	e037      	b.n	8002072 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e032      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_RCC_OscConfig+0x4e8>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d028      	beq.n	800206e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d121      	bne.n	800206e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d11a      	bne.n	800206e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800203e:	4013      	ands	r3, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002044:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002046:	4293      	cmp	r3, r2
 8002048:	d111      	bne.n	800206e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d107      	bne.n	800206e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002068:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800206a:	429a      	cmp	r2, r3
 800206c:	d001      	beq.n	8002072 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40007000 	.word	0x40007000
 8002080:	40023800 	.word	0x40023800
 8002084:	42470060 	.word	0x42470060

08002088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0cc      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d90c      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b63      	ldr	r3, [pc, #396]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b8      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020dc:	4b59      	ldr	r3, [pc, #356]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	4a58      	ldr	r2, [pc, #352]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f4:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4a52      	ldr	r2, [pc, #328]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002100:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	494d      	ldr	r1, [pc, #308]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 800210e:	4313      	orrs	r3, r2
 8002110:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d044      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d119      	bne.n	8002166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e07f      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d003      	beq.n	8002146 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002142:	2b03      	cmp	r3, #3
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002146:	4b3f      	ldr	r3, [pc, #252]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e06f      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002156:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e067      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002166:	4b37      	ldr	r3, [pc, #220]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f023 0203 	bic.w	r2, r3, #3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4934      	ldr	r1, [pc, #208]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002178:	f7fe fed4 	bl	8000f24 <HAL_GetTick>
 800217c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	e00a      	b.n	8002196 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fed0 	bl	8000f24 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e04f      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 020c 	and.w	r2, r3, #12
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1eb      	bne.n	8002180 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d20c      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e032      	b.n	8002236 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4916      	ldr	r1, [pc, #88]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	490e      	ldr	r1, [pc, #56]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800220e:	f000 f821 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002212:	4602      	mov	r2, r0
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RCC_ClockConfig+0x1bc>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	490a      	ldr	r1, [pc, #40]	; (8002248 <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	5ccb      	ldrb	r3, [r1, r3]
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1c8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fc3c 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00
 8002244:	40023800 	.word	0x40023800
 8002248:	080088bc 	.word	0x080088bc
 800224c:	20000000 	.word	0x20000000
 8002250:	20000004 	.word	0x20000004

08002254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	2300      	movs	r3, #0
 8002266:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800226c:	4b67      	ldr	r3, [pc, #412]	; (800240c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d00d      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x40>
 8002278:	2b08      	cmp	r3, #8
 800227a:	f200 80bd 	bhi.w	80023f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x34>
 8002282:	2b04      	cmp	r3, #4
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x3a>
 8002286:	e0b7      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b61      	ldr	r3, [pc, #388]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800228a:	60bb      	str	r3, [r7, #8]
       break;
 800228c:	e0b7      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800228e:	4b61      	ldr	r3, [pc, #388]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002290:	60bb      	str	r3, [r7, #8]
      break;
 8002292:	e0b4      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002294:	4b5d      	ldr	r3, [pc, #372]	; (800240c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800229c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800229e:	4b5b      	ldr	r3, [pc, #364]	; (800240c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d04d      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	4b58      	ldr	r3, [pc, #352]	; (800240c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	461a      	mov	r2, r3
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022ba:	f04f 0100 	mov.w	r1, #0
 80022be:	ea02 0800 	and.w	r8, r2, r0
 80022c2:	ea03 0901 	and.w	r9, r3, r1
 80022c6:	4640      	mov	r0, r8
 80022c8:	4649      	mov	r1, r9
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	014b      	lsls	r3, r1, #5
 80022d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022d8:	0142      	lsls	r2, r0, #5
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	ebb0 0008 	subs.w	r0, r0, r8
 80022e2:	eb61 0109 	sbc.w	r1, r1, r9
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	018b      	lsls	r3, r1, #6
 80022f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022f4:	0182      	lsls	r2, r0, #6
 80022f6:	1a12      	subs	r2, r2, r0
 80022f8:	eb63 0301 	sbc.w	r3, r3, r1
 80022fc:	f04f 0000 	mov.w	r0, #0
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	00d9      	lsls	r1, r3, #3
 8002306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800230a:	00d0      	lsls	r0, r2, #3
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	eb12 0208 	adds.w	r2, r2, r8
 8002314:	eb43 0309 	adc.w	r3, r3, r9
 8002318:	f04f 0000 	mov.w	r0, #0
 800231c:	f04f 0100 	mov.w	r1, #0
 8002320:	0259      	lsls	r1, r3, #9
 8002322:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002326:	0250      	lsls	r0, r2, #9
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	461a      	mov	r2, r3
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	f7fd ff9a 	bl	8000270 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4613      	mov	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e04a      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002346:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	461a      	mov	r2, r3
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002356:	f04f 0100 	mov.w	r1, #0
 800235a:	ea02 0400 	and.w	r4, r2, r0
 800235e:	ea03 0501 	and.w	r5, r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	f04f 0300 	mov.w	r3, #0
 800236e:	014b      	lsls	r3, r1, #5
 8002370:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002374:	0142      	lsls	r2, r0, #5
 8002376:	4610      	mov	r0, r2
 8002378:	4619      	mov	r1, r3
 800237a:	1b00      	subs	r0, r0, r4
 800237c:	eb61 0105 	sbc.w	r1, r1, r5
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	018b      	lsls	r3, r1, #6
 800238a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800238e:	0182      	lsls	r2, r0, #6
 8002390:	1a12      	subs	r2, r2, r0
 8002392:	eb63 0301 	sbc.w	r3, r3, r1
 8002396:	f04f 0000 	mov.w	r0, #0
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	00d9      	lsls	r1, r3, #3
 80023a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023a4:	00d0      	lsls	r0, r2, #3
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	1912      	adds	r2, r2, r4
 80023ac:	eb45 0303 	adc.w	r3, r5, r3
 80023b0:	f04f 0000 	mov.w	r0, #0
 80023b4:	f04f 0100 	mov.w	r1, #0
 80023b8:	0299      	lsls	r1, r3, #10
 80023ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023be:	0290      	lsls	r0, r2, #10
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	f7fd ff4e 	bl	8000270 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	3301      	adds	r3, #1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	60bb      	str	r3, [r7, #8]
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023fa:	60bb      	str	r3, [r7, #8]
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	68bb      	ldr	r3, [r7, #8]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	00f42400 	.word	0x00f42400
 8002414:	007a1200 	.word	0x007a1200

08002418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_RCC_GetHCLKFreq+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000000 	.word	0x20000000

08002430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002434:	f7ff fff0 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002438:	4602      	mov	r2, r0
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	0a9b      	lsrs	r3, r3, #10
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002446:	5ccb      	ldrb	r3, [r1, r3]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	080088cc 	.word	0x080088cc

08002458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800245c:	f7ff ffdc 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0b5b      	lsrs	r3, r3, #13
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	; (800247c <HAL_RCC_GetPCLK2Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	080088cc 	.word	0x080088cc

08002480 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	220f      	movs	r2, #15
 800248e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_RCC_GetClockConfig+0x5c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0203 	and.w	r2, r3, #3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_RCC_GetClockConfig+0x5c>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_RCC_GetClockConfig+0x5c>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_GetClockConfig+0x5c>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <HAL_RCC_GetClockConfig+0x60>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0207 	and.w	r2, r3, #7
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40023c00 	.word	0x40023c00

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e041      	b.n	800257a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fa24 	bl	8000958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 f9fe 	bl	8002924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d001      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e04e      	b.n	800263a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a23      	ldr	r2, [pc, #140]	; (8002648 <HAL_TIM_Base_Start_IT+0xc4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d01d      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_TIM_Base_Start_IT+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <HAL_TIM_Base_Start_IT+0xcc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <HAL_TIM_Base_Start_IT+0xd0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_TIM_Base_Start_IT+0xd4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_TIM_Base_Start_IT+0xd8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a18      	ldr	r2, [pc, #96]	; (8002660 <HAL_TIM_Base_Start_IT+0xdc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d111      	bne.n	8002628 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d010      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	e007      	b.n	8002638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40010000 	.word	0x40010000
 800264c:	40000400 	.word	0x40000400
 8002650:	40000800 	.word	0x40000800
 8002654:	40000c00 	.word	0x40000c00
 8002658:	40010400 	.word	0x40010400
 800265c:	40014000 	.word	0x40014000
 8002660:	40001800 	.word	0x40001800

08002664 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a1a      	ldr	r2, [r3, #32]
 8002682:	f241 1311 	movw	r3, #4369	; 0x1111
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <HAL_TIM_Base_Stop_IT+0x48>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a1a      	ldr	r2, [r3, #32]
 8002692:	f240 4344 	movw	r3, #1092	; 0x444
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d107      	bne.n	80026ac <HAL_TIM_Base_Stop_IT+0x48>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d122      	bne.n	800271e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d11b      	bne.n	800271e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f06f 0202 	mvn.w	r2, #2
 80026ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f8ee 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 800270a:	e005      	b.n	8002718 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f8e0 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f8f1 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d122      	bne.n	8002772 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b04      	cmp	r3, #4
 8002738:	d11b      	bne.n	8002772 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0204 	mvn.w	r2, #4
 8002742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f8c4 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 800275e:	e005      	b.n	800276c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f8b6 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8c7 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d122      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d11b      	bne.n	80027c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f06f 0208 	mvn.w	r2, #8
 8002796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2204      	movs	r2, #4
 800279c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f89a 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 80027b2:	e005      	b.n	80027c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f88c 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f89d 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d122      	bne.n	800281a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d11b      	bne.n	800281a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f06f 0210 	mvn.w	r2, #16
 80027ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2208      	movs	r2, #8
 80027f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f870 	bl	80028e6 <HAL_TIM_IC_CaptureCallback>
 8002806:	e005      	b.n	8002814 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f862 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f873 	bl	80028fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d10e      	bne.n	8002846 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f06f 0201 	mvn.w	r2, #1
 800283e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7fe f845 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d10e      	bne.n	8002872 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b80      	cmp	r3, #128	; 0x80
 8002860:	d107      	bne.n	8002872 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800286a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f97f 	bl	8002b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d10e      	bne.n	800289e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d107      	bne.n	800289e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f838 	bl	800290e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d10e      	bne.n	80028ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0220 	mvn.w	r2, #32
 80028c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f949 	bl	8002b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a40      	ldr	r2, [pc, #256]	; (8002a38 <TIM_Base_SetConfig+0x114>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002942:	d00f      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a3d      	ldr	r2, [pc, #244]	; (8002a3c <TIM_Base_SetConfig+0x118>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00b      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a3c      	ldr	r2, [pc, #240]	; (8002a40 <TIM_Base_SetConfig+0x11c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <TIM_Base_SetConfig+0x120>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_Base_SetConfig+0x40>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3a      	ldr	r2, [pc, #232]	; (8002a48 <TIM_Base_SetConfig+0x124>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a2f      	ldr	r2, [pc, #188]	; (8002a38 <TIM_Base_SetConfig+0x114>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d02b      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d027      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <TIM_Base_SetConfig+0x118>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d023      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a2b      	ldr	r2, [pc, #172]	; (8002a40 <TIM_Base_SetConfig+0x11c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2a      	ldr	r2, [pc, #168]	; (8002a44 <TIM_Base_SetConfig+0x120>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01b      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <TIM_Base_SetConfig+0x124>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d017      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a28      	ldr	r2, [pc, #160]	; (8002a4c <TIM_Base_SetConfig+0x128>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d013      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a27      	ldr	r2, [pc, #156]	; (8002a50 <TIM_Base_SetConfig+0x12c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00f      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <TIM_Base_SetConfig+0x130>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <TIM_Base_SetConfig+0x134>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <TIM_Base_SetConfig+0x138>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_Base_SetConfig+0xb2>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a23      	ldr	r2, [pc, #140]	; (8002a60 <TIM_Base_SetConfig+0x13c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d108      	bne.n	80029e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <TIM_Base_SetConfig+0x114>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_Base_SetConfig+0xf8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <TIM_Base_SetConfig+0x124>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d103      	bne.n	8002a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	615a      	str	r2, [r3, #20]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800
 8002a44:	40000c00 	.word	0x40000c00
 8002a48:	40010400 	.word	0x40010400
 8002a4c:	40014000 	.word	0x40014000
 8002a50:	40014400 	.word	0x40014400
 8002a54:	40014800 	.word	0x40014800
 8002a58:	40001800 	.word	0x40001800
 8002a5c:	40001c00 	.word	0x40001c00
 8002a60:	40002000 	.word	0x40002000

08002a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e05a      	b.n	8002b32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a21      	ldr	r2, [pc, #132]	; (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d022      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac8:	d01d      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d018      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00e      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a18      	ldr	r2, [pc, #96]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d004      	beq.n	8002b06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10c      	bne.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40010000 	.word	0x40010000
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40010400 	.word	0x40010400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40001800 	.word	0x40001800

08002b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e03f      	b.n	8002c16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fd fefc 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	; 0x24
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 fd7b 	bl	80036c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695a      	ldr	r2, [r3, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b08a      	sub	sp, #40	; 0x28
 8002c22:	af02      	add	r7, sp, #8
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d17c      	bne.n	8002d38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_UART_Transmit+0x2c>
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e075      	b.n	8002d3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_UART_Transmit+0x3e>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e06e      	b.n	8002d3a <HAL_UART_Transmit+0x11c>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	; 0x21
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c72:	f7fe f957 	bl	8000f24 <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d108      	bne.n	8002ca0 <HAL_UART_Transmit+0x82>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e003      	b.n	8002ca8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cb0:	e02a      	b.n	8002d08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2180      	movs	r1, #128	; 0x80
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 faf9 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e036      	b.n	8002d3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	e007      	b.n	8002cfa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1cf      	bne.n	8002cb2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2140      	movs	r1, #64	; 0x40
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fac9 	bl	80032b4 <UART_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e006      	b.n	8002d3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b0ba      	sub	sp, #232	; 0xe8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_UART_IRQHandler+0x66>
 8002d96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fbd3 	bl	800354e <UART_Receive_IT>
      return;
 8002da8:	e256      	b.n	8003258 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002daa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80de 	beq.w	8002f70 <HAL_UART_IRQHandler+0x22c>
 8002db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80d1 	beq.w	8002f70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_UART_IRQHandler+0xae>
 8002dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_UART_IRQHandler+0xd2>
 8002dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_UART_IRQHandler+0xf6>
 8002e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0204 	orr.w	r2, r3, #4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d011      	beq.n	8002e6a <HAL_UART_IRQHandler+0x126>
 8002e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d105      	bne.n	8002e5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f043 0208 	orr.w	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 81ed 	beq.w	800324e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_UART_IRQHandler+0x14e>
 8002e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fb5e 	bl	800354e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b40      	cmp	r3, #64	; 0x40
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d103      	bne.n	8002ebe <HAL_UART_IRQHandler+0x17a>
 8002eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d04f      	beq.n	8002f5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa66 	bl	8003390 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d141      	bne.n	8002f56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ee0:	e853 3f00 	ldrex	r3, [r3]
 8002ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ee8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002efe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1d9      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d013      	beq.n	8002f4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	4a7d      	ldr	r2, [pc, #500]	; (8003120 <HAL_UART_IRQHandler+0x3dc>)
 8002f2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fa02 	bl	800133c <HAL_DMA_Abort_IT>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d016      	beq.n	8002f6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4c:	e00e      	b.n	8002f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f99a 	bl	8003288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	e00a      	b.n	8002f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f996 	bl	8003288 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	e006      	b.n	8002f6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f992 	bl	8003288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f6a:	e170      	b.n	800324e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	bf00      	nop
    return;
 8002f6e:	e16e      	b.n	800324e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	f040 814a 	bne.w	800320e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8143 	beq.w	800320e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 813c 	beq.w	800320e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	f040 80b4 	bne.w	8003124 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8140 	beq.w	8003252 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	f080 8139 	bcs.w	8003252 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fe6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff2:	f000 8088 	beq.w	8003106 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800300c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	330c      	adds	r3, #12
 800301e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800302e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003032:	e841 2300 	strex	r3, r2, [r1]
 8003036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800303a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1d9      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3314      	adds	r3, #20
 8003048:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304c:	e853 3f00 	ldrex	r3, [r3]
 8003050:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3314      	adds	r3, #20
 8003062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003066:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800306a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800306e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003072:	e841 2300 	strex	r3, r2, [r1]
 8003076:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1e1      	bne.n	8003042 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3314      	adds	r3, #20
 8003084:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003088:	e853 3f00 	ldrex	r3, [r3]
 800308c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800308e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3314      	adds	r3, #20
 800309e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030aa:	e841 2300 	strex	r3, r2, [r1]
 80030ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e3      	bne.n	800307e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d6:	f023 0310 	bic.w	r3, r3, #16
 80030da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80030ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030f0:	e841 2300 	strex	r3, r2, [r1]
 80030f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e3      	bne.n	80030c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe f8ab 	bl	800125c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800310e:	b29b      	uxth	r3, r3
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	b29b      	uxth	r3, r3
 8003114:	4619      	mov	r1, r3
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8c0 	bl	800329c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800311c:	e099      	b.n	8003252 <HAL_UART_IRQHandler+0x50e>
 800311e:	bf00      	nop
 8003120:	08003457 	.word	0x08003457
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800312c:	b29b      	uxth	r3, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 808b 	beq.w	8003256 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003140:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8086 	beq.w	8003256 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800316e:	647a      	str	r2, [r7, #68]	; 0x44
 8003170:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003174:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800317c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e3      	bne.n	800314a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3314      	adds	r3, #20
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	623b      	str	r3, [r7, #32]
   return(result);
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3314      	adds	r3, #20
 80031a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031a6:	633a      	str	r2, [r7, #48]	; 0x30
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e3      	bne.n	8003182 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	e853 3f00 	ldrex	r3, [r3]
 80031d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0310 	bic.w	r3, r3, #16
 80031de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	330c      	adds	r3, #12
 80031e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031ec:	61fa      	str	r2, [r7, #28]
 80031ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f0:	69b9      	ldr	r1, [r7, #24]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	e841 2300 	strex	r3, r2, [r1]
 80031f8:	617b      	str	r3, [r7, #20]
   return(result);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e3      	bne.n	80031c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f848 	bl	800329c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800320c:	e023      	b.n	8003256 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_UART_IRQHandler+0x4ea>
 800321a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f929 	bl	800347e <UART_Transmit_IT>
    return;
 800322c:	e014      	b.n	8003258 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00e      	beq.n	8003258 <HAL_UART_IRQHandler+0x514>
 800323a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f969 	bl	800351e <UART_EndTransmit_IT>
    return;
 800324c:	e004      	b.n	8003258 <HAL_UART_IRQHandler+0x514>
    return;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <HAL_UART_IRQHandler+0x514>
      return;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <HAL_UART_IRQHandler+0x514>
      return;
 8003256:	bf00      	nop
  }
}
 8003258:	37e8      	adds	r7, #232	; 0xe8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop

08003260 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b090      	sub	sp, #64	; 0x40
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c4:	e050      	b.n	8003368 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d04c      	beq.n	8003368 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d4:	f7fd fe26 	bl	8000f24 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d241      	bcs.n	8003368 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003304:	637a      	str	r2, [r7, #52]	; 0x34
 8003306:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800330a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e5      	bne.n	80032e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3314      	adds	r3, #20
 800331e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	e853 3f00 	ldrex	r3, [r3]
 8003326:	613b      	str	r3, [r7, #16]
   return(result);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3314      	adds	r3, #20
 8003336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003338:	623a      	str	r2, [r7, #32]
 800333a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	69f9      	ldr	r1, [r7, #28]
 800333e:	6a3a      	ldr	r2, [r7, #32]
 8003340:	e841 2300 	strex	r3, r2, [r1]
 8003344:	61bb      	str	r3, [r7, #24]
   return(result);
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e5      	bne.n	8003318 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e00f      	b.n	8003388 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	429a      	cmp	r2, r3
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	429a      	cmp	r2, r3
 8003384:	d09f      	beq.n	80032c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3740      	adds	r7, #64	; 0x40
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b095      	sub	sp, #84	; 0x54
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	330c      	adds	r3, #12
 800339e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	e853 3f00 	ldrex	r3, [r3]
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033b8:	643a      	str	r2, [r7, #64]	; 0x40
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033c0:	e841 2300 	strex	r3, r2, [r1]
 80033c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e5      	bne.n	8003398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3314      	adds	r3, #20
 80033d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	e853 3f00 	ldrex	r3, [r3]
 80033da:	61fb      	str	r3, [r7, #28]
   return(result);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3314      	adds	r3, #20
 80033ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f4:	e841 2300 	strex	r3, r2, [r1]
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1e5      	bne.n	80033cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	2b01      	cmp	r3, #1
 8003406:	d119      	bne.n	800343c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	e853 3f00 	ldrex	r3, [r3]
 8003416:	60bb      	str	r3, [r7, #8]
   return(result);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f023 0310 	bic.w	r3, r3, #16
 800341e:	647b      	str	r3, [r7, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003428:	61ba      	str	r2, [r7, #24]
 800342a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6979      	ldr	r1, [r7, #20]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	613b      	str	r3, [r7, #16]
   return(result);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e5      	bne.n	8003408 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	631a      	str	r2, [r3, #48]	; 0x30
}
 800344a:	bf00      	nop
 800344c:	3754      	adds	r7, #84	; 0x54
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff ff09 	bl	8003288 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003476:	bf00      	nop
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b21      	cmp	r3, #33	; 0x21
 8003490:	d13e      	bne.n	8003510 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	d114      	bne.n	80034c6 <UART_Transmit_IT+0x48>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d110      	bne.n	80034c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	1c9a      	adds	r2, r3, #2
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	621a      	str	r2, [r3, #32]
 80034c4:	e008      	b.n	80034d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	1c59      	adds	r1, r3, #1
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6211      	str	r1, [r2, #32]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4619      	mov	r1, r3
 80034e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10f      	bne.n	800350c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800350a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003534:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff fe8e 	bl	8003260 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b08c      	sub	sp, #48	; 0x30
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b22      	cmp	r3, #34	; 0x22
 8003560:	f040 80ab 	bne.w	80036ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356c:	d117      	bne.n	800359e <UART_Receive_IT+0x50>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d113      	bne.n	800359e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	b29b      	uxth	r3, r3
 8003588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358c:	b29a      	uxth	r2, r3
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	1c9a      	adds	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28
 800359c:	e026      	b.n	80035ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b0:	d007      	beq.n	80035c2 <UART_Receive_IT+0x74>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <UART_Receive_IT+0x82>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e008      	b.n	80035e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4619      	mov	r1, r3
 80035fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d15a      	bne.n	80036b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0220 	bic.w	r2, r2, #32
 800360e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0201 	bic.w	r2, r2, #1
 800362e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	2b01      	cmp	r3, #1
 800363e:	d135      	bne.n	80036ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	330c      	adds	r3, #12
 800364c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	613b      	str	r3, [r7, #16]
   return(result);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f023 0310 	bic.w	r3, r3, #16
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003666:	623a      	str	r2, [r7, #32]
 8003668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	69f9      	ldr	r1, [r7, #28]
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	61bb      	str	r3, [r7, #24]
   return(result);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e5      	bne.n	8003646 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b10      	cmp	r3, #16
 8003686:	d10a      	bne.n	800369e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fdf9 	bl	800329c <HAL_UARTEx_RxEventCallback>
 80036aa:	e002      	b.n	80036b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fde1 	bl	8003274 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e002      	b.n	80036bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
  }
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3730      	adds	r7, #48	; 0x30
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c8:	b09f      	sub	sp, #124	; 0x7c
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	68d9      	ldr	r1, [r3, #12]
 80036dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	ea40 0301 	orr.w	r3, r0, r1
 80036e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80036fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003708:	f021 010c 	bic.w	r1, r1, #12
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003712:	430b      	orrs	r3, r1
 8003714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	6999      	ldr	r1, [r3, #24]
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	ea40 0301 	orr.w	r3, r0, r1
 800372c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800372e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4bc5      	ldr	r3, [pc, #788]	; (8003a48 <UART_SetConfig+0x384>)
 8003734:	429a      	cmp	r2, r3
 8003736:	d004      	beq.n	8003742 <UART_SetConfig+0x7e>
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4bc3      	ldr	r3, [pc, #780]	; (8003a4c <UART_SetConfig+0x388>)
 800373e:	429a      	cmp	r2, r3
 8003740:	d103      	bne.n	800374a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003742:	f7fe fe89 	bl	8002458 <HAL_RCC_GetPCLK2Freq>
 8003746:	6778      	str	r0, [r7, #116]	; 0x74
 8003748:	e002      	b.n	8003750 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800374a:	f7fe fe71 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 800374e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003758:	f040 80b6 	bne.w	80038c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800375c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800375e:	461c      	mov	r4, r3
 8003760:	f04f 0500 	mov.w	r5, #0
 8003764:	4622      	mov	r2, r4
 8003766:	462b      	mov	r3, r5
 8003768:	1891      	adds	r1, r2, r2
 800376a:	6439      	str	r1, [r7, #64]	; 0x40
 800376c:	415b      	adcs	r3, r3
 800376e:	647b      	str	r3, [r7, #68]	; 0x44
 8003770:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003774:	1912      	adds	r2, r2, r4
 8003776:	eb45 0303 	adc.w	r3, r5, r3
 800377a:	f04f 0000 	mov.w	r0, #0
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	00d9      	lsls	r1, r3, #3
 8003784:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003788:	00d0      	lsls	r0, r2, #3
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	1911      	adds	r1, r2, r4
 8003790:	6639      	str	r1, [r7, #96]	; 0x60
 8003792:	416b      	adcs	r3, r5
 8003794:	667b      	str	r3, [r7, #100]	; 0x64
 8003796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80037a4:	415b      	adcs	r3, r3
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037b0:	f7fc fd5e 	bl	8000270 <__aeabi_uldivmod>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4ba5      	ldr	r3, [pc, #660]	; (8003a50 <UART_SetConfig+0x38c>)
 80037ba:	fba3 2302 	umull	r2, r3, r3, r2
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	011e      	lsls	r6, r3, #4
 80037c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c4:	461c      	mov	r4, r3
 80037c6:	f04f 0500 	mov.w	r5, #0
 80037ca:	4622      	mov	r2, r4
 80037cc:	462b      	mov	r3, r5
 80037ce:	1891      	adds	r1, r2, r2
 80037d0:	6339      	str	r1, [r7, #48]	; 0x30
 80037d2:	415b      	adcs	r3, r3
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
 80037d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037da:	1912      	adds	r2, r2, r4
 80037dc:	eb45 0303 	adc.w	r3, r5, r3
 80037e0:	f04f 0000 	mov.w	r0, #0
 80037e4:	f04f 0100 	mov.w	r1, #0
 80037e8:	00d9      	lsls	r1, r3, #3
 80037ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ee:	00d0      	lsls	r0, r2, #3
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	1911      	adds	r1, r2, r4
 80037f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80037f8:	416b      	adcs	r3, r5
 80037fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	461a      	mov	r2, r3
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	1891      	adds	r1, r2, r2
 8003808:	62b9      	str	r1, [r7, #40]	; 0x28
 800380a:	415b      	adcs	r3, r3
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800380e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003812:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003816:	f7fc fd2b 	bl	8000270 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4b8c      	ldr	r3, [pc, #560]	; (8003a50 <UART_SetConfig+0x38c>)
 8003820:	fba3 1302 	umull	r1, r3, r3, r2
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	2164      	movs	r1, #100	; 0x64
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	3332      	adds	r3, #50	; 0x32
 8003832:	4a87      	ldr	r2, [pc, #540]	; (8003a50 <UART_SetConfig+0x38c>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003840:	441e      	add	r6, r3
 8003842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003844:	4618      	mov	r0, r3
 8003846:	f04f 0100 	mov.w	r1, #0
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	1894      	adds	r4, r2, r2
 8003850:	623c      	str	r4, [r7, #32]
 8003852:	415b      	adcs	r3, r3
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800385a:	1812      	adds	r2, r2, r0
 800385c:	eb41 0303 	adc.w	r3, r1, r3
 8003860:	f04f 0400 	mov.w	r4, #0
 8003864:	f04f 0500 	mov.w	r5, #0
 8003868:	00dd      	lsls	r5, r3, #3
 800386a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800386e:	00d4      	lsls	r4, r2, #3
 8003870:	4622      	mov	r2, r4
 8003872:	462b      	mov	r3, r5
 8003874:	1814      	adds	r4, r2, r0
 8003876:	653c      	str	r4, [r7, #80]	; 0x50
 8003878:	414b      	adcs	r3, r1
 800387a:	657b      	str	r3, [r7, #84]	; 0x54
 800387c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	461a      	mov	r2, r3
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	1891      	adds	r1, r2, r2
 8003888:	61b9      	str	r1, [r7, #24]
 800388a:	415b      	adcs	r3, r3
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003892:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003896:	f7fc fceb 	bl	8000270 <__aeabi_uldivmod>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	4b6c      	ldr	r3, [pc, #432]	; (8003a50 <UART_SetConfig+0x38c>)
 80038a0:	fba3 1302 	umull	r1, r3, r3, r2
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	2164      	movs	r1, #100	; 0x64
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	3332      	adds	r3, #50	; 0x32
 80038b2:	4a67      	ldr	r2, [pc, #412]	; (8003a50 <UART_SetConfig+0x38c>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	f003 0207 	and.w	r2, r3, #7
 80038be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4432      	add	r2, r6
 80038c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038c6:	e0b9      	b.n	8003a3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ca:	461c      	mov	r4, r3
 80038cc:	f04f 0500 	mov.w	r5, #0
 80038d0:	4622      	mov	r2, r4
 80038d2:	462b      	mov	r3, r5
 80038d4:	1891      	adds	r1, r2, r2
 80038d6:	6139      	str	r1, [r7, #16]
 80038d8:	415b      	adcs	r3, r3
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80038e0:	1912      	adds	r2, r2, r4
 80038e2:	eb45 0303 	adc.w	r3, r5, r3
 80038e6:	f04f 0000 	mov.w	r0, #0
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	00d9      	lsls	r1, r3, #3
 80038f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038f4:	00d0      	lsls	r0, r2, #3
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	eb12 0804 	adds.w	r8, r2, r4
 80038fe:	eb43 0905 	adc.w	r9, r3, r5
 8003902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4618      	mov	r0, r3
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	008b      	lsls	r3, r1, #2
 8003916:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800391a:	0082      	lsls	r2, r0, #2
 800391c:	4640      	mov	r0, r8
 800391e:	4649      	mov	r1, r9
 8003920:	f7fc fca6 	bl	8000270 <__aeabi_uldivmod>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4b49      	ldr	r3, [pc, #292]	; (8003a50 <UART_SetConfig+0x38c>)
 800392a:	fba3 2302 	umull	r2, r3, r3, r2
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	011e      	lsls	r6, r3, #4
 8003932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003934:	4618      	mov	r0, r3
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	1894      	adds	r4, r2, r2
 8003940:	60bc      	str	r4, [r7, #8]
 8003942:	415b      	adcs	r3, r3
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800394a:	1812      	adds	r2, r2, r0
 800394c:	eb41 0303 	adc.w	r3, r1, r3
 8003950:	f04f 0400 	mov.w	r4, #0
 8003954:	f04f 0500 	mov.w	r5, #0
 8003958:	00dd      	lsls	r5, r3, #3
 800395a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800395e:	00d4      	lsls	r4, r2, #3
 8003960:	4622      	mov	r2, r4
 8003962:	462b      	mov	r3, r5
 8003964:	1814      	adds	r4, r2, r0
 8003966:	64bc      	str	r4, [r7, #72]	; 0x48
 8003968:	414b      	adcs	r3, r1
 800396a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800396c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4618      	mov	r0, r3
 8003972:	f04f 0100 	mov.w	r1, #0
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	008b      	lsls	r3, r1, #2
 8003980:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003984:	0082      	lsls	r2, r0, #2
 8003986:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800398a:	f7fc fc71 	bl	8000270 <__aeabi_uldivmod>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4b2f      	ldr	r3, [pc, #188]	; (8003a50 <UART_SetConfig+0x38c>)
 8003994:	fba3 1302 	umull	r1, r3, r3, r2
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	2164      	movs	r1, #100	; 0x64
 800399c:	fb01 f303 	mul.w	r3, r1, r3
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	3332      	adds	r3, #50	; 0x32
 80039a6:	4a2a      	ldr	r2, [pc, #168]	; (8003a50 <UART_SetConfig+0x38c>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b2:	441e      	add	r6, r3
 80039b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b6:	4618      	mov	r0, r3
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	1894      	adds	r4, r2, r2
 80039c2:	603c      	str	r4, [r7, #0]
 80039c4:	415b      	adcs	r3, r3
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039cc:	1812      	adds	r2, r2, r0
 80039ce:	eb41 0303 	adc.w	r3, r1, r3
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	f04f 0500 	mov.w	r5, #0
 80039da:	00dd      	lsls	r5, r3, #3
 80039dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039e0:	00d4      	lsls	r4, r2, #3
 80039e2:	4622      	mov	r2, r4
 80039e4:	462b      	mov	r3, r5
 80039e6:	eb12 0a00 	adds.w	sl, r2, r0
 80039ea:	eb43 0b01 	adc.w	fp, r3, r1
 80039ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	008b      	lsls	r3, r1, #2
 8003a02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a06:	0082      	lsls	r2, r0, #2
 8003a08:	4650      	mov	r0, sl
 8003a0a:	4659      	mov	r1, fp
 8003a0c:	f7fc fc30 	bl	8000270 <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <UART_SetConfig+0x38c>)
 8003a16:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1a:	095b      	lsrs	r3, r3, #5
 8003a1c:	2164      	movs	r1, #100	; 0x64
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	3332      	adds	r3, #50	; 0x32
 8003a28:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <UART_SetConfig+0x38c>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	095b      	lsrs	r3, r3, #5
 8003a30:	f003 020f 	and.w	r2, r3, #15
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4432      	add	r2, r6
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	377c      	adds	r7, #124	; 0x7c
 8003a40:	46bd      	mov	sp, r7
 8003a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a46:	bf00      	nop
 8003a48:	40011000 	.word	0x40011000
 8003a4c:	40011400 	.word	0x40011400
 8003a50:	51eb851f 	.word	0x51eb851f

08003a54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a66:	2b84      	cmp	r3, #132	; 0x84
 8003a68:	d005      	beq.n	8003a76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	3303      	adds	r3, #3
 8003a74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003a88:	f001 f9a0 	bl	8004dcc <vTaskStartScheduler>
  
  return osOK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a94:	b089      	sub	sp, #36	; 0x24
 8003a96:	af04      	add	r7, sp, #16
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d020      	beq.n	8003ae6 <osThreadCreate+0x54>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01c      	beq.n	8003ae6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685c      	ldr	r4, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681d      	ldr	r5, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691e      	ldr	r6, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ffc8 	bl	8003a54 <makeFreeRtosPriority>
 8003ac4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ace:	9202      	str	r2, [sp, #8]
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	9100      	str	r1, [sp, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4632      	mov	r2, r6
 8003ad8:	4629      	mov	r1, r5
 8003ada:	4620      	mov	r0, r4
 8003adc:	f000 ff8c 	bl	80049f8 <xTaskCreateStatic>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e01c      	b.n	8003b20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685c      	ldr	r4, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003af2:	b29e      	uxth	r6, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ffaa 	bl	8003a54 <makeFreeRtosPriority>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	9200      	str	r2, [sp, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4629      	mov	r1, r5
 8003b10:	4620      	mov	r0, r4
 8003b12:	f000 ffce 	bl	8004ab2 <xTaskCreate>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d001      	beq.n	8003b20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b20:	68fb      	ldr	r3, [r7, #12]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <osDelay+0x16>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	e000      	b.n	8003b42 <osDelay+0x18>
 8003b40:	2301      	movs	r3, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 f90e 	bl	8004d64 <vTaskDelay>
  
  return osOK;
 8003b48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003b76:	2320      	movs	r3, #32
 8003b78:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d00a      	beq.n	8003b96 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	60fb      	str	r3, [r7, #12]
}
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f983 	bl	8003eb6 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003bb6:	697b      	ldr	r3, [r7, #20]
	}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b090      	sub	sp, #64	; 0x40
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	623b      	str	r3, [r7, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <xEventGroupWaitBits+0x56>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	61fb      	str	r3, [r7, #28]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xEventGroupWaitBits+0x72>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	61bb      	str	r3, [r7, #24]
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c32:	f001 fdbd 	bl	80057b0 <xTaskGetSchedulerState>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <xEventGroupWaitBits+0x82>
 8003c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <xEventGroupWaitBits+0x86>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <xEventGroupWaitBits+0x88>
 8003c46:	2300      	movs	r3, #0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10a      	bne.n	8003c62 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	617b      	str	r3, [r7, #20]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003c62:	f001 f923 	bl	8004eac <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c72:	f000 f8fe 	bl	8003e72 <prvTestWaitCondition>
 8003c76:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00e      	beq.n	8003c9c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d028      	beq.n	8003cde <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	401a      	ands	r2, r3
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e020      	b.n	8003cde <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8003caa:	e018      	b.n	8003cde <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cc6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cca:	1d18      	adds	r0, r3, #4
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f001 fae1 	bl	800529c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003cde:	f001 f8f3 	bl	8004ec8 <xTaskResumeAll>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d031      	beq.n	8003d4e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003cf0:	4b19      	ldr	r3, [pc, #100]	; (8003d58 <xEventGroupWaitBits+0x198>)
 8003cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003d00:	f001 fdfa 	bl	80058f8 <uxTaskResetEventItemValue>
 8003d04:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d11a      	bne.n	8003d46 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003d10:	f002 fae8 	bl	80062e4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d20:	f000 f8a7 	bl	8003e72 <prvTestWaitCondition>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	401a      	ands	r2, r3
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003d42:	f002 faff 	bl	8006344 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3740      	adds	r7, #64	; 0x40
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08e      	sub	sp, #56	; 0x38
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003d66:	2300      	movs	r3, #0
 8003d68:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <xEventGroupSetBits+0x32>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	613b      	str	r3, [r7, #16]
}
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <xEventGroupSetBits+0x52>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	60fb      	str	r3, [r7, #12]
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	3304      	adds	r3, #4
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	3308      	adds	r3, #8
 8003db8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003dba:	f001 f877 	bl	8004eac <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dce:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003dd0:	e03c      	b.n	8003e4c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003de8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003df0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d108      	bne.n	8003e0e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e0c:	e008      	b.n	8003e20 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d101      	bne.n	8003e20 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d010      	beq.n	8003e48 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e40:	4619      	mov	r1, r3
 8003e42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e44:	f001 faf4 	bl	8005430 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d1be      	bne.n	8003dd2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	401a      	ands	r2, r3
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003e62:	f001 f831 	bl	8004ec8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	681b      	ldr	r3, [r3, #0]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3738      	adds	r7, #56	; 0x38
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003e72:	b480      	push	{r7}
 8003e74:	b087      	sub	sp, #28
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	e007      	b.n	8003ea8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d101      	bne.n	8003ea8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003ea8:	697b      	ldr	r3, [r7, #20]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f103 0208 	add.w	r2, r3, #8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ece:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f103 0208 	add.w	r2, r3, #8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f103 0208 	add.w	r2, r3, #8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	601a      	str	r2, [r3, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d103      	bne.n	8003f78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e00c      	b.n	8003f92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e002      	b.n	8003f86 <vListInsert+0x2e>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d2f6      	bcs.n	8003f80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6892      	ldr	r2, [r2, #8]
 8003fe0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6852      	ldr	r2, [r2, #4]
 8003fea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d103      	bne.n	8003ffe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	1e5a      	subs	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <xQueueGenericReset+0x2a>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	60bb      	str	r3, [r7, #8]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800404a:	f002 f94b 	bl	80062e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407a:	3b01      	subs	r3, #1
 800407c:	68f9      	ldr	r1, [r7, #12]
 800407e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	441a      	add	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	22ff      	movs	r2, #255	; 0xff
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d114      	bne.n	80040ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01a      	beq.n	80040de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3310      	adds	r3, #16
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 f95d 	bl	800536c <xTaskRemoveFromEventList>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d012      	beq.n	80040de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <xQueueGenericReset+0xcc>)
 80040ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	f3bf 8f6f 	isb	sy
 80040c8:	e009      	b.n	80040de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3310      	adds	r3, #16
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fef1 	bl	8003eb6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3324      	adds	r3, #36	; 0x24
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff feec 	bl	8003eb6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040de:	f002 f931 	bl	8006344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040e2:	2301      	movs	r3, #1
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	e000ed04 	.word	0xe000ed04

080040f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08e      	sub	sp, #56	; 0x38
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10a      	bne.n	800411a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004116:	bf00      	nop
 8004118:	e7fe      	b.n	8004118 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <xQueueGenericCreateStatic+0x52>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <xQueueGenericCreateStatic+0x56>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <xQueueGenericCreateStatic+0x58>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	623b      	str	r3, [r7, #32]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <xQueueGenericCreateStatic+0x7e>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <xQueueGenericCreateStatic+0x82>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <xQueueGenericCreateStatic+0x84>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	61fb      	str	r3, [r7, #28]
}
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800418e:	2350      	movs	r3, #80	; 0x50
 8004190:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b50      	cmp	r3, #80	; 0x50
 8004196:	d00a      	beq.n	80041ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	61bb      	str	r3, [r7, #24]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80041ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00d      	beq.n	80041d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f805 	bl	80041e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80041d8:	4618      	mov	r0, r3
 80041da:	3730      	adds	r7, #48	; 0x30
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d103      	bne.n	80041fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e002      	b.n	8004202 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800420e:	2101      	movs	r1, #1
 8004210:	69b8      	ldr	r0, [r7, #24]
 8004212:	f7ff ff05 	bl	8004020 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08e      	sub	sp, #56	; 0x38
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004236:	2300      	movs	r3, #0
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10a      	bne.n	800425a <xQueueGenericSend+0x32>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004256:	bf00      	nop
 8004258:	e7fe      	b.n	8004258 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <xQueueGenericSend+0x40>
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <xQueueGenericSend+0x44>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <xQueueGenericSend+0x46>
 800426c:	2300      	movs	r3, #0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <xQueueGenericSend+0x60>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d103      	bne.n	8004296 <xQueueGenericSend+0x6e>
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <xQueueGenericSend+0x72>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <xQueueGenericSend+0x74>
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	623b      	str	r3, [r7, #32]
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042b6:	f001 fa7b 	bl	80057b0 <xTaskGetSchedulerState>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <xQueueGenericSend+0x9e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <xQueueGenericSend+0xa2>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <xQueueGenericSend+0xa4>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	61fb      	str	r3, [r7, #28]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042e6:	f001 fffd 	bl	80062e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d302      	bcc.n	80042fc <xQueueGenericSend+0xd4>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d129      	bne.n	8004350 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004302:	f000 fa0b 	bl	800471c <prvCopyDataToQueue>
 8004306:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	3324      	adds	r3, #36	; 0x24
 8004314:	4618      	mov	r0, r3
 8004316:	f001 f829 	bl	800536c <xTaskRemoveFromEventList>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004320:	4b3f      	ldr	r3, [pc, #252]	; (8004420 <xQueueGenericSend+0x1f8>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	e00a      	b.n	8004348 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <xQueueGenericSend+0x1f8>)
 800433a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004348:	f001 fffc 	bl	8006344 <vPortExitCritical>
				return pdPASS;
 800434c:	2301      	movs	r3, #1
 800434e:	e063      	b.n	8004418 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004356:	f001 fff5 	bl	8006344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800435a:	2300      	movs	r3, #0
 800435c:	e05c      	b.n	8004418 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004360:	2b00      	cmp	r3, #0
 8004362:	d106      	bne.n	8004372 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	4618      	mov	r0, r3
 800436a:	f001 f8c3 	bl	80054f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004372:	f001 ffe7 	bl	8006344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004376:	f000 fd99 	bl	8004eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800437a:	f001 ffb3 	bl	80062e4 <vPortEnterCritical>
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004384:	b25b      	sxtb	r3, r3
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d103      	bne.n	8004394 <xQueueGenericSend+0x16c>
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800439a:	b25b      	sxtb	r3, r3
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d103      	bne.n	80043aa <xQueueGenericSend+0x182>
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043aa:	f001 ffcb 	bl	8006344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ae:	1d3a      	adds	r2, r7, #4
 80043b0:	f107 0314 	add.w	r3, r7, #20
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 f8b2 	bl	8005520 <xTaskCheckForTimeOut>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d124      	bne.n	800440c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043c4:	f000 faa2 	bl	800490c <prvIsQueueFull>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d018      	beq.n	8004400 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	3310      	adds	r3, #16
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 ff3c 	bl	8005254 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043de:	f000 fa2d 	bl	800483c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043e2:	f000 fd71 	bl	8004ec8 <xTaskResumeAll>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f47f af7c 	bne.w	80042e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <xQueueGenericSend+0x1f8>)
 80043f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	e772      	b.n	80042e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004402:	f000 fa1b 	bl	800483c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004406:	f000 fd5f 	bl	8004ec8 <xTaskResumeAll>
 800440a:	e76c      	b.n	80042e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800440c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800440e:	f000 fa15 	bl	800483c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004412:	f000 fd59 	bl	8004ec8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004416:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004418:	4618      	mov	r0, r3
 800441a:	3738      	adds	r7, #56	; 0x38
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	e000ed04 	.word	0xe000ed04

08004424 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b090      	sub	sp, #64	; 0x40
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800443c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004440:	f383 8811 	msr	BASEPRI, r3
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800444e:	bf00      	nop
 8004450:	e7fe      	b.n	8004450 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <xQueueGenericSendFromISR+0x3c>
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <xQueueGenericSendFromISR+0x40>
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <xQueueGenericSendFromISR+0x42>
 8004464:	2300      	movs	r3, #0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10a      	bne.n	8004480 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d103      	bne.n	800448e <xQueueGenericSendFromISR+0x6a>
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <xQueueGenericSendFromISR+0x6e>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <xQueueGenericSendFromISR+0x70>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	623b      	str	r3, [r7, #32]
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044ae:	f001 fffb 	bl	80064a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044b2:	f3ef 8211 	mrs	r2, BASEPRI
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	61fa      	str	r2, [r7, #28]
 80044c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d302      	bcc.n	80044e0 <xQueueGenericSendFromISR+0xbc>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d12f      	bne.n	8004540 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044f6:	f000 f911 	bl	800471c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d112      	bne.n	800452a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d016      	beq.n	800453a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	3324      	adds	r3, #36	; 0x24
 8004510:	4618      	mov	r0, r3
 8004512:	f000 ff2b 	bl	800536c <xTaskRemoveFromEventList>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00e      	beq.n	800453a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00b      	beq.n	800453a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e007      	b.n	800453a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800452a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800452e:	3301      	adds	r3, #1
 8004530:	b2db      	uxtb	r3, r3
 8004532:	b25a      	sxtb	r2, r3
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800453a:	2301      	movs	r3, #1
 800453c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800453e:	e001      	b.n	8004544 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004540:	2300      	movs	r3, #0
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800454e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004552:	4618      	mov	r0, r3
 8004554:	3740      	adds	r7, #64	; 0x40
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08c      	sub	sp, #48	; 0x30
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004568:	2300      	movs	r3, #0
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <xQueueReceive+0x30>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	623b      	str	r3, [r7, #32]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d103      	bne.n	800459a <xQueueReceive+0x3e>
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <xQueueReceive+0x42>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <xQueueReceive+0x44>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <xQueueReceive+0x5e>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61fb      	str	r3, [r7, #28]
}
 80045b6:	bf00      	nop
 80045b8:	e7fe      	b.n	80045b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045ba:	f001 f8f9 	bl	80057b0 <xTaskGetSchedulerState>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <xQueueReceive+0x6e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <xQueueReceive+0x72>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <xQueueReceive+0x74>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <xQueueReceive+0x8e>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	61bb      	str	r3, [r7, #24]
}
 80045e6:	bf00      	nop
 80045e8:	e7fe      	b.n	80045e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ea:	f001 fe7b 	bl	80062e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01f      	beq.n	800463a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045fe:	f000 f8f7 	bl	80047f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	1e5a      	subs	r2, r3, #1
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00f      	beq.n	8004632 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	3310      	adds	r3, #16
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fea8 	bl	800536c <xTaskRemoveFromEventList>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d007      	beq.n	8004632 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004622:	4b3d      	ldr	r3, [pc, #244]	; (8004718 <xQueueReceive+0x1bc>)
 8004624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004632:	f001 fe87 	bl	8006344 <vPortExitCritical>
				return pdPASS;
 8004636:	2301      	movs	r3, #1
 8004638:	e069      	b.n	800470e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004640:	f001 fe80 	bl	8006344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004644:	2300      	movs	r3, #0
 8004646:	e062      	b.n	800470e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800464e:	f107 0310 	add.w	r3, r7, #16
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ff4e 	bl	80054f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800465c:	f001 fe72 	bl	8006344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004660:	f000 fc24 	bl	8004eac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004664:	f001 fe3e 	bl	80062e4 <vPortEnterCritical>
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800466e:	b25b      	sxtb	r3, r3
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d103      	bne.n	800467e <xQueueReceive+0x122>
 8004676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004684:	b25b      	sxtb	r3, r3
 8004686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800468a:	d103      	bne.n	8004694 <xQueueReceive+0x138>
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004694:	f001 fe56 	bl	8006344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004698:	1d3a      	adds	r2, r7, #4
 800469a:	f107 0310 	add.w	r3, r7, #16
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 ff3d 	bl	8005520 <xTaskCheckForTimeOut>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d123      	bne.n	80046f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ae:	f000 f917 	bl	80048e0 <prvIsQueueEmpty>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d017      	beq.n	80046e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	3324      	adds	r3, #36	; 0x24
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 fdc7 	bl	8005254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c8:	f000 f8b8 	bl	800483c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046cc:	f000 fbfc 	bl	8004ec8 <xTaskResumeAll>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d189      	bne.n	80045ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80046d6:	4b10      	ldr	r3, [pc, #64]	; (8004718 <xQueueReceive+0x1bc>)
 80046d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	e780      	b.n	80045ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046ea:	f000 f8a7 	bl	800483c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046ee:	f000 fbeb 	bl	8004ec8 <xTaskResumeAll>
 80046f2:	e77a      	b.n	80045ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046f6:	f000 f8a1 	bl	800483c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046fa:	f000 fbe5 	bl	8004ec8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004700:	f000 f8ee 	bl	80048e0 <prvIsQueueEmpty>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	f43f af6f 	beq.w	80045ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800470c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800470e:	4618      	mov	r0, r3
 8004710:	3730      	adds	r7, #48	; 0x30
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	e000ed04 	.word	0xe000ed04

0800471c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10d      	bne.n	8004756 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d14d      	bne.n	80047de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f001 f850 	bl	80057ec <xTaskPriorityDisinherit>
 800474c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	e043      	b.n	80047de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d119      	bne.n	8004790 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6858      	ldr	r0, [r3, #4]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	461a      	mov	r2, r3
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	f003 f8df 	bl	800792a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	441a      	add	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	d32b      	bcc.n	80047de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	e026      	b.n	80047de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68d8      	ldr	r0, [r3, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	461a      	mov	r2, r3
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	f003 f8c5 	bl	800792a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	425b      	negs	r3, r3
 80047aa:	441a      	add	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d207      	bcs.n	80047cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c4:	425b      	negs	r3, r3
 80047c6:	441a      	add	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d105      	bne.n	80047de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	3b01      	subs	r3, #1
 80047dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047e6:	697b      	ldr	r3, [r7, #20]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d018      	beq.n	8004834 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	441a      	add	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	429a      	cmp	r2, r3
 800481a:	d303      	bcc.n	8004824 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68d9      	ldr	r1, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	461a      	mov	r2, r3
 800482e:	6838      	ldr	r0, [r7, #0]
 8004830:	f003 f87b 	bl	800792a <memcpy>
	}
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004844:	f001 fd4e 	bl	80062e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800484e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004850:	e011      	b.n	8004876 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2b00      	cmp	r3, #0
 8004858:	d012      	beq.n	8004880 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3324      	adds	r3, #36	; 0x24
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fd84 	bl	800536c <xTaskRemoveFromEventList>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800486a:	f000 febb 	bl	80055e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	3b01      	subs	r3, #1
 8004872:	b2db      	uxtb	r3, r3
 8004874:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800487a:	2b00      	cmp	r3, #0
 800487c:	dce9      	bgt.n	8004852 <prvUnlockQueue+0x16>
 800487e:	e000      	b.n	8004882 <prvUnlockQueue+0x46>
					break;
 8004880:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800488a:	f001 fd5b 	bl	8006344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800488e:	f001 fd29 	bl	80062e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004898:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800489a:	e011      	b.n	80048c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d012      	beq.n	80048ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3310      	adds	r3, #16
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fd5f 	bl	800536c <xTaskRemoveFromEventList>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048b4:	f000 fe96 	bl	80055e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048b8:	7bbb      	ldrb	r3, [r7, #14]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dce9      	bgt.n	800489c <prvUnlockQueue+0x60>
 80048c8:	e000      	b.n	80048cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	22ff      	movs	r2, #255	; 0xff
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80048d4:	f001 fd36 	bl	8006344 <vPortExitCritical>
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048e8:	f001 fcfc 	bl	80062e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e001      	b.n	80048fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048fe:	f001 fd21 	bl	8006344 <vPortExitCritical>

	return xReturn;
 8004902:	68fb      	ldr	r3, [r7, #12]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004914:	f001 fce6 	bl	80062e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004920:	429a      	cmp	r2, r3
 8004922:	d102      	bne.n	800492a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e001      	b.n	800492e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800492e:	f001 fd09 	bl	8006344 <vPortExitCritical>

	return xReturn;
 8004932:	68fb      	ldr	r3, [r7, #12]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e014      	b.n	8004976 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800494c:	4a0f      	ldr	r2, [pc, #60]	; (800498c <vQueueAddToRegistry+0x50>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004958:	490c      	ldr	r1, [pc, #48]	; (800498c <vQueueAddToRegistry+0x50>)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004962:	4a0a      	ldr	r2, [pc, #40]	; (800498c <vQueueAddToRegistry+0x50>)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4413      	add	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800496e:	e006      	b.n	800497e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	3301      	adds	r3, #1
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b07      	cmp	r3, #7
 800497a:	d9e7      	bls.n	800494c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	200048e4 	.word	0x200048e4

08004990 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049a0:	f001 fca0 	bl	80062e4 <vPortEnterCritical>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049aa:	b25b      	sxtb	r3, r3
 80049ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b0:	d103      	bne.n	80049ba <vQueueWaitForMessageRestricted+0x2a>
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c0:	b25b      	sxtb	r3, r3
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d103      	bne.n	80049d0 <vQueueWaitForMessageRestricted+0x40>
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d0:	f001 fcb8 	bl	8006344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	3324      	adds	r3, #36	; 0x24
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 fc95 	bl	8005314 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049ea:	6978      	ldr	r0, [r7, #20]
 80049ec:	f7ff ff26 	bl	800483c <prvUnlockQueue>
	}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08e      	sub	sp, #56	; 0x38
 80049fc:	af04      	add	r7, sp, #16
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	623b      	str	r3, [r7, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	e7fe      	b.n	8004a20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10a      	bne.n	8004a3e <xTaskCreateStatic+0x46>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	61fb      	str	r3, [r7, #28]
}
 8004a3a:	bf00      	nop
 8004a3c:	e7fe      	b.n	8004a3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a3e:	23bc      	movs	r3, #188	; 0xbc
 8004a40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2bbc      	cmp	r3, #188	; 0xbc
 8004a46:	d00a      	beq.n	8004a5e <xTaskCreateStatic+0x66>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	61bb      	str	r3, [r7, #24]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01e      	beq.n	8004aa4 <xTaskCreateStatic+0xac>
 8004a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01b      	beq.n	8004aa4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9303      	str	r3, [sp, #12]
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	9302      	str	r3, [sp, #8]
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f850 	bl	8004b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a9e:	f000 f8f3 	bl	8004c88 <prvAddNewTaskToReadyList>
 8004aa2:	e001      	b.n	8004aa8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004aa8:	697b      	ldr	r3, [r7, #20]
	}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3728      	adds	r7, #40	; 0x28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b08c      	sub	sp, #48	; 0x30
 8004ab6:	af04      	add	r7, sp, #16
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	603b      	str	r3, [r7, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 fd2e 	bl	8006528 <pvPortMalloc>
 8004acc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00e      	beq.n	8004af2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ad4:	20bc      	movs	r0, #188	; 0xbc
 8004ad6:	f001 fd27 	bl	8006528 <pvPortMalloc>
 8004ada:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ae8:	e005      	b.n	8004af6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004aea:	6978      	ldr	r0, [r7, #20]
 8004aec:	f001 fde8 	bl	80066c0 <vPortFree>
 8004af0:	e001      	b.n	8004af6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d017      	beq.n	8004b2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	2300      	movs	r3, #0
 8004b08:	9303      	str	r3, [sp, #12]
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	9302      	str	r3, [sp, #8]
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 f80e 	bl	8004b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b20:	69f8      	ldr	r0, [r7, #28]
 8004b22:	f000 f8b1 	bl	8004c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	e002      	b.n	8004b32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b32:	69bb      	ldr	r3, [r7, #24]
	}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	461a      	mov	r2, r3
 8004b54:	21a5      	movs	r1, #165	; 0xa5
 8004b56:	f002 fef6 	bl	8007946 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b64:	3b01      	subs	r3, #1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f023 0307 	bic.w	r3, r3, #7
 8004b72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	617b      	str	r3, [r7, #20]
}
 8004b90:	bf00      	nop
 8004b92:	e7fe      	b.n	8004b92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01f      	beq.n	8004bda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	e012      	b.n	8004bc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	7819      	ldrb	r1, [r3, #0]
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	4413      	add	r3, r2
 8004bae:	3334      	adds	r3, #52	; 0x34
 8004bb0:	460a      	mov	r2, r1
 8004bb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b0f      	cmp	r3, #15
 8004bca:	d9e9      	bls.n	8004ba0 <prvInitialiseNewTask+0x64>
 8004bcc:	e000      	b.n	8004bd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8004bce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd8:	e003      	b.n	8004be2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d901      	bls.n	8004bec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004be8:	2306      	movs	r3, #6
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	3304      	adds	r3, #4
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff f977 	bl	8003ef6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	3318      	adds	r3, #24
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff f972 	bl	8003ef6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	f1c3 0207 	rsb	r2, r3, #7
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	3354      	adds	r3, #84	; 0x54
 8004c3c:	2260      	movs	r2, #96	; 0x60
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f002 fe80 	bl	8007946 <memset>
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <prvInitialiseNewTask+0x140>)
 8004c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4e:	4a0c      	ldr	r2, [pc, #48]	; (8004c80 <prvInitialiseNewTask+0x144>)
 8004c50:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <prvInitialiseNewTask+0x148>)
 8004c56:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	69b8      	ldr	r0, [r7, #24]
 8004c5e:	f001 fa17 	bl	8006090 <pxPortInitialiseStack>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c74:	bf00      	nop
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	08008b88 	.word	0x08008b88
 8004c80:	08008ba8 	.word	0x08008ba8
 8004c84:	08008b68 	.word	0x08008b68

08004c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c90:	f001 fb28 	bl	80062e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c94:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <prvAddNewTaskToReadyList+0xc0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <prvAddNewTaskToReadyList+0xc0>)
 8004c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <prvAddNewTaskToReadyList+0xc4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d109      	bne.n	8004cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ca6:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <prvAddNewTaskToReadyList+0xc4>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004cac:	4b26      	ldr	r3, [pc, #152]	; (8004d48 <prvAddNewTaskToReadyList+0xc0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d110      	bne.n	8004cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004cb4:	f000 fcba 	bl	800562c <prvInitialiseTaskLists>
 8004cb8:	e00d      	b.n	8004cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004cba:	4b25      	ldr	r3, [pc, #148]	; (8004d50 <prvAddNewTaskToReadyList+0xc8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <prvAddNewTaskToReadyList+0xc4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d802      	bhi.n	8004cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cd0:	4a1e      	ldr	r2, [pc, #120]	; (8004d4c <prvAddNewTaskToReadyList+0xc4>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <prvAddNewTaskToReadyList+0xcc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <prvAddNewTaskToReadyList+0xcc>)
 8004cde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ce0:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <prvAddNewTaskToReadyList+0xcc>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	4b19      	ldr	r3, [pc, #100]	; (8004d58 <prvAddNewTaskToReadyList+0xd0>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <prvAddNewTaskToReadyList+0xd0>)
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <prvAddNewTaskToReadyList+0xd4>)
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7ff f8fd 	bl	8003f10 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d16:	f001 fb15 	bl	8006344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <prvAddNewTaskToReadyList+0xc8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <prvAddNewTaskToReadyList+0xc4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d207      	bcs.n	8004d40 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <prvAddNewTaskToReadyList+0xd8>)
 8004d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000994 	.word	0x20000994
 8004d4c:	20000894 	.word	0x20000894
 8004d50:	200009a0 	.word	0x200009a0
 8004d54:	200009b0 	.word	0x200009b0
 8004d58:	2000099c 	.word	0x2000099c
 8004d5c:	20000898 	.word	0x20000898
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d017      	beq.n	8004da6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <vTaskDelay+0x60>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <vTaskDelay+0x30>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	60bb      	str	r3, [r7, #8]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d94:	f000 f88a 	bl	8004eac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d98:	2100      	movs	r1, #0
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fdc4 	bl	8005928 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004da0:	f000 f892 	bl	8004ec8 <xTaskResumeAll>
 8004da4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d107      	bne.n	8004dbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <vTaskDelay+0x64>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200009bc 	.word	0x200009bc
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	; 0x28
 8004dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dda:	463a      	mov	r2, r7
 8004ddc:	1d39      	adds	r1, r7, #4
 8004dde:	f107 0308 	add.w	r3, r7, #8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fb fbc0 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	9202      	str	r2, [sp, #8]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	2300      	movs	r3, #0
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	2300      	movs	r3, #0
 8004df8:	460a      	mov	r2, r1
 8004dfa:	4924      	ldr	r1, [pc, #144]	; (8004e8c <vTaskStartScheduler+0xc0>)
 8004dfc:	4824      	ldr	r0, [pc, #144]	; (8004e90 <vTaskStartScheduler+0xc4>)
 8004dfe:	f7ff fdfb 	bl	80049f8 <xTaskCreateStatic>
 8004e02:	4603      	mov	r3, r0
 8004e04:	4a23      	ldr	r2, [pc, #140]	; (8004e94 <vTaskStartScheduler+0xc8>)
 8004e06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e08:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <vTaskStartScheduler+0xc8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e10:	2301      	movs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e001      	b.n	8004e1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d102      	bne.n	8004e26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e20:	f000 fde8 	bl	80059f4 <xTimerCreateTimerTask>
 8004e24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d11b      	bne.n	8004e64 <vTaskStartScheduler+0x98>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	613b      	str	r3, [r7, #16]
}
 8004e3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e40:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <vTaskStartScheduler+0xcc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3354      	adds	r3, #84	; 0x54
 8004e46:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <vTaskStartScheduler+0xd0>)
 8004e48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <vTaskStartScheduler+0xd4>)
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <vTaskStartScheduler+0xd8>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e58:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <vTaskStartScheduler+0xdc>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e5e:	f001 f99f 	bl	80061a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e62:	e00e      	b.n	8004e82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6a:	d10a      	bne.n	8004e82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	60fb      	str	r3, [r7, #12]
}
 8004e7e:	bf00      	nop
 8004e80:	e7fe      	b.n	8004e80 <vTaskStartScheduler+0xb4>
}
 8004e82:	bf00      	nop
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	080087bc 	.word	0x080087bc
 8004e90:	080055fd 	.word	0x080055fd
 8004e94:	200009b8 	.word	0x200009b8
 8004e98:	20000894 	.word	0x20000894
 8004e9c:	20000098 	.word	0x20000098
 8004ea0:	200009b4 	.word	0x200009b4
 8004ea4:	200009a0 	.word	0x200009a0
 8004ea8:	20000998 	.word	0x20000998

08004eac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004eb0:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <vTaskSuspendAll+0x18>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <vTaskSuspendAll+0x18>)
 8004eb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004eba:	bf00      	nop
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	200009bc 	.word	0x200009bc

08004ec8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ed6:	4b41      	ldr	r3, [pc, #260]	; (8004fdc <xTaskResumeAll+0x114>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	603b      	str	r3, [r7, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ef4:	f001 f9f6 	bl	80062e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ef8:	4b38      	ldr	r3, [pc, #224]	; (8004fdc <xTaskResumeAll+0x114>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4a37      	ldr	r2, [pc, #220]	; (8004fdc <xTaskResumeAll+0x114>)
 8004f00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f02:	4b36      	ldr	r3, [pc, #216]	; (8004fdc <xTaskResumeAll+0x114>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d161      	bne.n	8004fce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f0a:	4b35      	ldr	r3, [pc, #212]	; (8004fe0 <xTaskResumeAll+0x118>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d05d      	beq.n	8004fce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f12:	e02e      	b.n	8004f72 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f14:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <xTaskResumeAll+0x11c>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff f852 	bl	8003fca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff f84d 	bl	8003fca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f34:	2201      	movs	r2, #1
 8004f36:	409a      	lsls	r2, r3
 8004f38:	4b2b      	ldr	r3, [pc, #172]	; (8004fe8 <xTaskResumeAll+0x120>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <xTaskResumeAll+0x120>)
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4a27      	ldr	r2, [pc, #156]	; (8004fec <xTaskResumeAll+0x124>)
 8004f50:	441a      	add	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7fe ffd9 	bl	8003f10 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <xTaskResumeAll+0x128>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d302      	bcc.n	8004f72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <xTaskResumeAll+0x12c>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f72:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <xTaskResumeAll+0x11c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1cc      	bne.n	8004f14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f80:	f000 fbf6 	bl	8005770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <xTaskResumeAll+0x130>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f90:	f000 f846 	bl	8005020 <xTaskIncrementTick>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <xTaskResumeAll+0x12c>)
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1f1      	bne.n	8004f90 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004fac:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <xTaskResumeAll+0x130>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <xTaskResumeAll+0x12c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <xTaskResumeAll+0x134>)
 8004fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fce:	f001 f9b9 	bl	8006344 <vPortExitCritical>

	return xAlreadyYielded;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	200009bc 	.word	0x200009bc
 8004fe0:	20000994 	.word	0x20000994
 8004fe4:	20000954 	.word	0x20000954
 8004fe8:	2000099c 	.word	0x2000099c
 8004fec:	20000898 	.word	0x20000898
 8004ff0:	20000894 	.word	0x20000894
 8004ff4:	200009a8 	.word	0x200009a8
 8004ff8:	200009a4 	.word	0x200009a4
 8004ffc:	e000ed04 	.word	0xe000ed04

08005000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <xTaskGetTickCount+0x1c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800500c:	687b      	ldr	r3, [r7, #4]
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000998 	.word	0x20000998

08005020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800502a:	4b4e      	ldr	r3, [pc, #312]	; (8005164 <xTaskIncrementTick+0x144>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 808e 	bne.w	8005150 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005034:	4b4c      	ldr	r3, [pc, #304]	; (8005168 <xTaskIncrementTick+0x148>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3301      	adds	r3, #1
 800503a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800503c:	4a4a      	ldr	r2, [pc, #296]	; (8005168 <xTaskIncrementTick+0x148>)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d120      	bne.n	800508a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005048:	4b48      	ldr	r3, [pc, #288]	; (800516c <xTaskIncrementTick+0x14c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <xTaskIncrementTick+0x48>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	603b      	str	r3, [r7, #0]
}
 8005064:	bf00      	nop
 8005066:	e7fe      	b.n	8005066 <xTaskIncrementTick+0x46>
 8005068:	4b40      	ldr	r3, [pc, #256]	; (800516c <xTaskIncrementTick+0x14c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	4b40      	ldr	r3, [pc, #256]	; (8005170 <xTaskIncrementTick+0x150>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a3e      	ldr	r2, [pc, #248]	; (800516c <xTaskIncrementTick+0x14c>)
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	4a3e      	ldr	r2, [pc, #248]	; (8005170 <xTaskIncrementTick+0x150>)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	4b3d      	ldr	r3, [pc, #244]	; (8005174 <xTaskIncrementTick+0x154>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	4a3c      	ldr	r2, [pc, #240]	; (8005174 <xTaskIncrementTick+0x154>)
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	f000 fb73 	bl	8005770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800508a:	4b3b      	ldr	r3, [pc, #236]	; (8005178 <xTaskIncrementTick+0x158>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d348      	bcc.n	8005126 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005094:	4b35      	ldr	r3, [pc, #212]	; (800516c <xTaskIncrementTick+0x14c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800509e:	4b36      	ldr	r3, [pc, #216]	; (8005178 <xTaskIncrementTick+0x158>)
 80050a0:	f04f 32ff 	mov.w	r2, #4294967295
 80050a4:	601a      	str	r2, [r3, #0]
					break;
 80050a6:	e03e      	b.n	8005126 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050a8:	4b30      	ldr	r3, [pc, #192]	; (800516c <xTaskIncrementTick+0x14c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d203      	bcs.n	80050c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80050c0:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <xTaskIncrementTick+0x158>)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80050c6:	e02e      	b.n	8005126 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fe ff7c 	bl	8003fca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d004      	beq.n	80050e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	3318      	adds	r3, #24
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe ff73 	bl	8003fca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	2201      	movs	r2, #1
 80050ea:	409a      	lsls	r2, r3
 80050ec:	4b23      	ldr	r3, [pc, #140]	; (800517c <xTaskIncrementTick+0x15c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	4a22      	ldr	r2, [pc, #136]	; (800517c <xTaskIncrementTick+0x15c>)
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <xTaskIncrementTick+0x160>)
 8005104:	441a      	add	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	3304      	adds	r3, #4
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7fe feff 	bl	8003f10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005116:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <xTaskIncrementTick+0x164>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	429a      	cmp	r2, r3
 800511e:	d3b9      	bcc.n	8005094 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005120:	2301      	movs	r3, #1
 8005122:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005124:	e7b6      	b.n	8005094 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005126:	4b17      	ldr	r3, [pc, #92]	; (8005184 <xTaskIncrementTick+0x164>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	4914      	ldr	r1, [pc, #80]	; (8005180 <xTaskIncrementTick+0x160>)
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d901      	bls.n	8005142 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800513e:	2301      	movs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <xTaskIncrementTick+0x168>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800514a:	2301      	movs	r3, #1
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	e004      	b.n	800515a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <xTaskIncrementTick+0x16c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	4a0d      	ldr	r2, [pc, #52]	; (800518c <xTaskIncrementTick+0x16c>)
 8005158:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800515a:	697b      	ldr	r3, [r7, #20]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	200009bc 	.word	0x200009bc
 8005168:	20000998 	.word	0x20000998
 800516c:	2000094c 	.word	0x2000094c
 8005170:	20000950 	.word	0x20000950
 8005174:	200009ac 	.word	0x200009ac
 8005178:	200009b4 	.word	0x200009b4
 800517c:	2000099c 	.word	0x2000099c
 8005180:	20000898 	.word	0x20000898
 8005184:	20000894 	.word	0x20000894
 8005188:	200009a8 	.word	0x200009a8
 800518c:	200009a4 	.word	0x200009a4

08005190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005196:	4b29      	ldr	r3, [pc, #164]	; (800523c <vTaskSwitchContext+0xac>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800519e:	4b28      	ldr	r3, [pc, #160]	; (8005240 <vTaskSwitchContext+0xb0>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80051a4:	e044      	b.n	8005230 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80051a6:	4b26      	ldr	r3, [pc, #152]	; (8005240 <vTaskSwitchContext+0xb0>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ac:	4b25      	ldr	r3, [pc, #148]	; (8005244 <vTaskSwitchContext+0xb4>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	fab3 f383 	clz	r3, r3
 80051b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	f1c3 031f 	rsb	r3, r3, #31
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	4921      	ldr	r1, [pc, #132]	; (8005248 <vTaskSwitchContext+0xb8>)
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	607b      	str	r3, [r7, #4]
}
 80051e8:	bf00      	nop
 80051ea:	e7fe      	b.n	80051ea <vTaskSwitchContext+0x5a>
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4613      	mov	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <vTaskSwitchContext+0xb8>)
 80051f8:	4413      	add	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	3308      	adds	r3, #8
 800520e:	429a      	cmp	r2, r3
 8005210:	d104      	bne.n	800521c <vTaskSwitchContext+0x8c>
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	605a      	str	r2, [r3, #4]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	4a0a      	ldr	r2, [pc, #40]	; (800524c <vTaskSwitchContext+0xbc>)
 8005224:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <vTaskSwitchContext+0xbc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3354      	adds	r3, #84	; 0x54
 800522c:	4a08      	ldr	r2, [pc, #32]	; (8005250 <vTaskSwitchContext+0xc0>)
 800522e:	6013      	str	r3, [r2, #0]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	200009bc 	.word	0x200009bc
 8005240:	200009a8 	.word	0x200009a8
 8005244:	2000099c 	.word	0x2000099c
 8005248:	20000898 	.word	0x20000898
 800524c:	20000894 	.word	0x20000894
 8005250:	20000098 	.word	0x20000098

08005254 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d10a      	bne.n	800527a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	60fb      	str	r3, [r7, #12]
}
 8005276:	bf00      	nop
 8005278:	e7fe      	b.n	8005278 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <vTaskPlaceOnEventList+0x44>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3318      	adds	r3, #24
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fe fe68 	bl	8003f58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005288:	2101      	movs	r1, #1
 800528a:	6838      	ldr	r0, [r7, #0]
 800528c:	f000 fb4c 	bl	8005928 <prvAddCurrentTaskToDelayedList>
}
 8005290:	bf00      	nop
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000894 	.word	0x20000894

0800529c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10a      	bne.n	80052c4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	617b      	str	r3, [r7, #20]
}
 80052c0:	bf00      	nop
 80052c2:	e7fe      	b.n	80052c2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <vTaskPlaceOnUnorderedEventList+0x70>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	613b      	str	r3, [r7, #16]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80052e2:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <vTaskPlaceOnUnorderedEventList+0x74>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80052ec:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <vTaskPlaceOnUnorderedEventList+0x74>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3318      	adds	r3, #24
 80052f4:	4619      	mov	r1, r3
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7fe fe0a 	bl	8003f10 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052fc:	2101      	movs	r1, #1
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fb12 	bl	8005928 <prvAddCurrentTaskToDelayedList>
}
 8005304:	bf00      	nop
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	200009bc 	.word	0x200009bc
 8005310:	20000894 	.word	0x20000894

08005314 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	617b      	str	r3, [r7, #20]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <vTaskPlaceOnEventListRestricted+0x54>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3318      	adds	r3, #24
 8005342:	4619      	mov	r1, r3
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f7fe fde3 	bl	8003f10 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005350:	f04f 33ff 	mov.w	r3, #4294967295
 8005354:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	68b8      	ldr	r0, [r7, #8]
 800535a:	f000 fae5 	bl	8005928 <prvAddCurrentTaskToDelayedList>
	}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000894 	.word	0x20000894

0800536c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	60fb      	str	r3, [r7, #12]
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	3318      	adds	r3, #24
 800539c:	4618      	mov	r0, r3
 800539e:	f7fe fe14 	bl	8003fca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a2:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <xTaskRemoveFromEventList+0xac>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d11c      	bne.n	80053e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe fe0b 	bl	8003fca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	2201      	movs	r2, #1
 80053ba:	409a      	lsls	r2, r3
 80053bc:	4b17      	ldr	r3, [pc, #92]	; (800541c <xTaskRemoveFromEventList+0xb0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	4a16      	ldr	r2, [pc, #88]	; (800541c <xTaskRemoveFromEventList+0xb0>)
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4a13      	ldr	r2, [pc, #76]	; (8005420 <xTaskRemoveFromEventList+0xb4>)
 80053d4:	441a      	add	r2, r3
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3304      	adds	r3, #4
 80053da:	4619      	mov	r1, r3
 80053dc:	4610      	mov	r0, r2
 80053de:	f7fe fd97 	bl	8003f10 <vListInsertEnd>
 80053e2:	e005      	b.n	80053f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3318      	adds	r3, #24
 80053e8:	4619      	mov	r1, r3
 80053ea:	480e      	ldr	r0, [pc, #56]	; (8005424 <xTaskRemoveFromEventList+0xb8>)
 80053ec:	f7fe fd90 	bl	8003f10 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <xTaskRemoveFromEventList+0xbc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d905      	bls.n	800540a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053fe:	2301      	movs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <xTaskRemoveFromEventList+0xc0>)
 8005404:	2201      	movs	r2, #1
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e001      	b.n	800540e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800540e:	697b      	ldr	r3, [r7, #20]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	200009bc 	.word	0x200009bc
 800541c:	2000099c 	.word	0x2000099c
 8005420:	20000898 	.word	0x20000898
 8005424:	20000954 	.word	0x20000954
 8005428:	20000894 	.word	0x20000894
 800542c:	200009a8 	.word	0x200009a8

08005430 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	613b      	str	r3, [r7, #16]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fe fda0 	bl	8003fca <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3304      	adds	r3, #4
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fd9b 	bl	8003fca <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	2201      	movs	r2, #1
 800549a:	409a      	lsls	r2, r3
 800549c:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054aa:	4613      	mov	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4a0d      	ldr	r2, [pc, #52]	; (80054e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80054b4:	441a      	add	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7fe fd27 	bl	8003f10 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <vTaskRemoveFromUnorderedEventList+0xbc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d902      	bls.n	80054d6 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
	}
}
 80054d6:	bf00      	nop
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200009bc 	.word	0x200009bc
 80054e4:	2000099c 	.word	0x2000099c
 80054e8:	20000898 	.word	0x20000898
 80054ec:	20000894 	.word	0x20000894
 80054f0:	200009a8 	.word	0x200009a8

080054f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054fc:	4b06      	ldr	r3, [pc, #24]	; (8005518 <vTaskInternalSetTimeOutState+0x24>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <vTaskInternalSetTimeOutState+0x28>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	200009ac 	.word	0x200009ac
 800551c:	20000998 	.word	0x20000998

08005520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	613b      	str	r3, [r7, #16]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	60fb      	str	r3, [r7, #12]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005562:	f000 febf 	bl	80062e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <xTaskCheckForTimeOut+0xbc>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d102      	bne.n	8005586 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	e023      	b.n	80055ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <xTaskCheckForTimeOut+0xc0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d007      	beq.n	80055a2 <xTaskCheckForTimeOut+0x82>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e015      	b.n	80055ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d20b      	bcs.n	80055c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ff9b 	bl	80054f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
 80055c2:	e004      	b.n	80055ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055ce:	f000 feb9 	bl	8006344 <vPortExitCritical>

	return xReturn;
 80055d2:	69fb      	ldr	r3, [r7, #28]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20000998 	.word	0x20000998
 80055e0:	200009ac 	.word	0x200009ac

080055e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <vTaskMissedYield+0x14>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	200009a8 	.word	0x200009a8

080055fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005604:	f000 f852 	bl	80056ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <prvIdleTask+0x28>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d9f9      	bls.n	8005604 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <prvIdleTask+0x2c>)
 8005612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005620:	e7f0      	b.n	8005604 <prvIdleTask+0x8>
 8005622:	bf00      	nop
 8005624:	20000898 	.word	0x20000898
 8005628:	e000ed04 	.word	0xe000ed04

0800562c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005632:	2300      	movs	r3, #0
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	e00c      	b.n	8005652 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4a12      	ldr	r2, [pc, #72]	; (800568c <prvInitialiseTaskLists+0x60>)
 8005644:	4413      	add	r3, r2
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fc35 	bl	8003eb6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3301      	adds	r3, #1
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b06      	cmp	r3, #6
 8005656:	d9ef      	bls.n	8005638 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005658:	480d      	ldr	r0, [pc, #52]	; (8005690 <prvInitialiseTaskLists+0x64>)
 800565a:	f7fe fc2c 	bl	8003eb6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800565e:	480d      	ldr	r0, [pc, #52]	; (8005694 <prvInitialiseTaskLists+0x68>)
 8005660:	f7fe fc29 	bl	8003eb6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005664:	480c      	ldr	r0, [pc, #48]	; (8005698 <prvInitialiseTaskLists+0x6c>)
 8005666:	f7fe fc26 	bl	8003eb6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800566a:	480c      	ldr	r0, [pc, #48]	; (800569c <prvInitialiseTaskLists+0x70>)
 800566c:	f7fe fc23 	bl	8003eb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005670:	480b      	ldr	r0, [pc, #44]	; (80056a0 <prvInitialiseTaskLists+0x74>)
 8005672:	f7fe fc20 	bl	8003eb6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <prvInitialiseTaskLists+0x78>)
 8005678:	4a05      	ldr	r2, [pc, #20]	; (8005690 <prvInitialiseTaskLists+0x64>)
 800567a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <prvInitialiseTaskLists+0x7c>)
 800567e:	4a05      	ldr	r2, [pc, #20]	; (8005694 <prvInitialiseTaskLists+0x68>)
 8005680:	601a      	str	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000898 	.word	0x20000898
 8005690:	20000924 	.word	0x20000924
 8005694:	20000938 	.word	0x20000938
 8005698:	20000954 	.word	0x20000954
 800569c:	20000968 	.word	0x20000968
 80056a0:	20000980 	.word	0x20000980
 80056a4:	2000094c 	.word	0x2000094c
 80056a8:	20000950 	.word	0x20000950

080056ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056b2:	e019      	b.n	80056e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056b4:	f000 fe16 	bl	80062e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b8:	4b10      	ldr	r3, [pc, #64]	; (80056fc <prvCheckTasksWaitingTermination+0x50>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fc80 	bl	8003fca <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056ca:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <prvCheckTasksWaitingTermination+0x54>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	4a0b      	ldr	r2, [pc, #44]	; (8005700 <prvCheckTasksWaitingTermination+0x54>)
 80056d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <prvCheckTasksWaitingTermination+0x58>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3b01      	subs	r3, #1
 80056da:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <prvCheckTasksWaitingTermination+0x58>)
 80056dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056de:	f000 fe31 	bl	8006344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f810 	bl	8005708 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056e8:	4b06      	ldr	r3, [pc, #24]	; (8005704 <prvCheckTasksWaitingTermination+0x58>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e1      	bne.n	80056b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000968 	.word	0x20000968
 8005700:	20000994 	.word	0x20000994
 8005704:	2000097c 	.word	0x2000097c

08005708 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3354      	adds	r3, #84	; 0x54
 8005714:	4618      	mov	r0, r3
 8005716:	f002 fc75 	bl	8008004 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	4618      	mov	r0, r3
 800572a:	f000 ffc9 	bl	80066c0 <vPortFree>
				vPortFree( pxTCB );
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 ffc6 	bl	80066c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005734:	e018      	b.n	8005768 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800573c:	2b01      	cmp	r3, #1
 800573e:	d103      	bne.n	8005748 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 ffbd 	bl	80066c0 <vPortFree>
	}
 8005746:	e00f      	b.n	8005768 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800574e:	2b02      	cmp	r3, #2
 8005750:	d00a      	beq.n	8005768 <prvDeleteTCB+0x60>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
}
 8005764:	bf00      	nop
 8005766:	e7fe      	b.n	8005766 <prvDeleteTCB+0x5e>
	}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005776:	4b0c      	ldr	r3, [pc, #48]	; (80057a8 <prvResetNextTaskUnblockTime+0x38>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <prvResetNextTaskUnblockTime+0x3c>)
 8005782:	f04f 32ff 	mov.w	r2, #4294967295
 8005786:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005788:	e008      	b.n	800579c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800578a:	4b07      	ldr	r3, [pc, #28]	; (80057a8 <prvResetNextTaskUnblockTime+0x38>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <prvResetNextTaskUnblockTime+0x3c>)
 800579a:	6013      	str	r3, [r2, #0]
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	2000094c 	.word	0x2000094c
 80057ac:	200009b4 	.word	0x200009b4

080057b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057b6:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <xTaskGetSchedulerState+0x34>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057be:	2301      	movs	r3, #1
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	e008      	b.n	80057d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c4:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <xTaskGetSchedulerState+0x38>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057cc:	2302      	movs	r3, #2
 80057ce:	607b      	str	r3, [r7, #4]
 80057d0:	e001      	b.n	80057d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057d6:	687b      	ldr	r3, [r7, #4]
	}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	200009a0 	.word	0x200009a0
 80057e8:	200009bc 	.word	0x200009bc

080057ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d06e      	beq.n	80058e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005802:	4b3a      	ldr	r3, [pc, #232]	; (80058ec <xTaskPriorityDisinherit+0x100>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	429a      	cmp	r2, r3
 800580a:	d00a      	beq.n	8005822 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60fb      	str	r3, [r7, #12]
}
 800581e:	bf00      	nop
 8005820:	e7fe      	b.n	8005820 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	60bb      	str	r3, [r7, #8]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005844:	1e5a      	subs	r2, r3, #1
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	429a      	cmp	r2, r3
 8005854:	d044      	beq.n	80058e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585a:	2b00      	cmp	r3, #0
 800585c:	d140      	bne.n	80058e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3304      	adds	r3, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fbb1 	bl	8003fca <uxListRemove>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d115      	bne.n	800589a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	491f      	ldr	r1, [pc, #124]	; (80058f0 <xTaskPriorityDisinherit+0x104>)
 8005874:	4613      	mov	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xTaskPriorityDisinherit+0xae>
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	2201      	movs	r2, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43da      	mvns	r2, r3
 8005890:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <xTaskPriorityDisinherit+0x108>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4013      	ands	r3, r2
 8005896:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <xTaskPriorityDisinherit+0x108>)
 8005898:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	f1c3 0207 	rsb	r2, r3, #7
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	2201      	movs	r2, #1
 80058b4:	409a      	lsls	r2, r3
 80058b6:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <xTaskPriorityDisinherit+0x108>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	4a0d      	ldr	r2, [pc, #52]	; (80058f4 <xTaskPriorityDisinherit+0x108>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <xTaskPriorityDisinherit+0x104>)
 80058ce:	441a      	add	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7fe fb1a 	bl	8003f10 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058dc:	2301      	movs	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058e0:	697b      	ldr	r3, [r7, #20]
	}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000894 	.word	0x20000894
 80058f0:	20000898 	.word	0x20000898
 80058f4:	2000099c 	.word	0x2000099c

080058f8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <uxTaskResetEventItemValue+0x2c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005906:	4b07      	ldr	r3, [pc, #28]	; (8005924 <uxTaskResetEventItemValue+0x2c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <uxTaskResetEventItemValue+0x2c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1c2 0207 	rsb	r2, r2, #7
 8005914:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005916:	687b      	ldr	r3, [r7, #4]
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	20000894 	.word	0x20000894

08005928 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005932:	4b29      	ldr	r3, [pc, #164]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005938:	4b28      	ldr	r3, [pc, #160]	; (80059dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3304      	adds	r3, #4
 800593e:	4618      	mov	r0, r3
 8005940:	f7fe fb43 	bl	8003fca <uxListRemove>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800594a:	4b24      	ldr	r3, [pc, #144]	; (80059dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	2201      	movs	r2, #1
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43da      	mvns	r2, r3
 8005958:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4013      	ands	r3, r2
 800595e:	4a20      	ldr	r2, [pc, #128]	; (80059e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005960:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d10a      	bne.n	8005980 <prvAddCurrentTaskToDelayedList+0x58>
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d007      	beq.n	8005980 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005970:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3304      	adds	r3, #4
 8005976:	4619      	mov	r1, r3
 8005978:	481a      	ldr	r0, [pc, #104]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800597a:	f7fe fac9 	bl	8003f10 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800597e:	e026      	b.n	80059ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005988:	4b14      	ldr	r3, [pc, #80]	; (80059dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	429a      	cmp	r2, r3
 8005996:	d209      	bcs.n	80059ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3304      	adds	r3, #4
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f7fe fad7 	bl	8003f58 <vListInsert>
}
 80059aa:	e010      	b.n	80059ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3304      	adds	r3, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	4610      	mov	r0, r2
 80059ba:	f7fe facd 	bl	8003f58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059be:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d202      	bcs.n	80059ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059c8:	4a09      	ldr	r2, [pc, #36]	; (80059f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6013      	str	r3, [r2, #0]
}
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000998 	.word	0x20000998
 80059dc:	20000894 	.word	0x20000894
 80059e0:	2000099c 	.word	0x2000099c
 80059e4:	20000980 	.word	0x20000980
 80059e8:	20000950 	.word	0x20000950
 80059ec:	2000094c 	.word	0x2000094c
 80059f0:	200009b4 	.word	0x200009b4

080059f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	; 0x28
 80059f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059fe:	f000 fb07 	bl	8006010 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a02:	4b1c      	ldr	r3, [pc, #112]	; (8005a74 <xTimerCreateTimerTask+0x80>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d021      	beq.n	8005a4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a12:	1d3a      	adds	r2, r7, #4
 8005a14:	f107 0108 	add.w	r1, r7, #8
 8005a18:	f107 030c 	add.w	r3, r7, #12
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fa fdbd 	bl	800059c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	9202      	str	r2, [sp, #8]
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	2300      	movs	r3, #0
 8005a32:	460a      	mov	r2, r1
 8005a34:	4910      	ldr	r1, [pc, #64]	; (8005a78 <xTimerCreateTimerTask+0x84>)
 8005a36:	4811      	ldr	r0, [pc, #68]	; (8005a7c <xTimerCreateTimerTask+0x88>)
 8005a38:	f7fe ffde 	bl	80049f8 <xTaskCreateStatic>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <xTimerCreateTimerTask+0x8c>)
 8005a40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a42:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <xTimerCreateTimerTask+0x8c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	613b      	str	r3, [r7, #16]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a6a:	697b      	ldr	r3, [r7, #20]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	200009f0 	.word	0x200009f0
 8005a78:	080087c4 	.word	0x080087c4
 8005a7c:	08005bb9 	.word	0x08005bb9
 8005a80:	200009f4 	.word	0x200009f4

08005a84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	623b      	str	r3, [r7, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <xTimerGenericCommand+0x98>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d02a      	beq.n	8005b10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b05      	cmp	r3, #5
 8005aca:	dc18      	bgt.n	8005afe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005acc:	f7ff fe70 	bl	80057b0 <xTaskGetSchedulerState>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d109      	bne.n	8005aea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ad6:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <xTimerGenericCommand+0x98>)
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	f107 0110 	add.w	r1, r7, #16
 8005ade:	2300      	movs	r3, #0
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae2:	f7fe fba1 	bl	8004228 <xQueueGenericSend>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ae8:	e012      	b.n	8005b10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005aea:	4b0c      	ldr	r3, [pc, #48]	; (8005b1c <xTimerGenericCommand+0x98>)
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	f107 0110 	add.w	r1, r7, #16
 8005af2:	2300      	movs	r3, #0
 8005af4:	2200      	movs	r2, #0
 8005af6:	f7fe fb97 	bl	8004228 <xQueueGenericSend>
 8005afa:	6278      	str	r0, [r7, #36]	; 0x24
 8005afc:	e008      	b.n	8005b10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005afe:	4b07      	ldr	r3, [pc, #28]	; (8005b1c <xTimerGenericCommand+0x98>)
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	f107 0110 	add.w	r1, r7, #16
 8005b06:	2300      	movs	r3, #0
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	f7fe fc8b 	bl	8004424 <xQueueGenericSendFromISR>
 8005b0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3728      	adds	r7, #40	; 0x28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	200009f0 	.word	0x200009f0

08005b20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b2a:	4b22      	ldr	r3, [pc, #136]	; (8005bb4 <prvProcessExpiredTimer+0x94>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fa46 	bl	8003fca <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d022      	beq.n	8005b92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	699a      	ldr	r2, [r3, #24]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	18d1      	adds	r1, r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	6978      	ldr	r0, [r7, #20]
 8005b5a:	f000 f8d1 	bl	8005d00 <prvInsertTimerInActiveList>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01f      	beq.n	8005ba4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b64:	2300      	movs	r3, #0
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	6978      	ldr	r0, [r7, #20]
 8005b70:	f7ff ff88 	bl	8005a84 <xTimerGenericCommand>
 8005b74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d113      	bne.n	8005ba4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	60fb      	str	r3, [r7, #12]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	6978      	ldr	r0, [r7, #20]
 8005baa:	4798      	blx	r3
}
 8005bac:	bf00      	nop
 8005bae:	3718      	adds	r7, #24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	200009e8 	.word	0x200009e8

08005bb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bc0:	f107 0308 	add.w	r3, r7, #8
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f857 	bl	8005c78 <prvGetNextExpireTime>
 8005bca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f803 	bl	8005bdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005bd6:	f000 f8d5 	bl	8005d84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bda:	e7f1      	b.n	8005bc0 <prvTimerTask+0x8>

08005bdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005be6:	f7ff f961 	bl	8004eac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bea:	f107 0308 	add.w	r3, r7, #8
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 f866 	bl	8005cc0 <prvSampleTimeNow>
 8005bf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d130      	bne.n	8005c5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <prvProcessTimerOrBlockTask+0x3c>
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d806      	bhi.n	8005c18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c0a:	f7ff f95d 	bl	8004ec8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c0e:	68f9      	ldr	r1, [r7, #12]
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7ff ff85 	bl	8005b20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c16:	e024      	b.n	8005c62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d008      	beq.n	8005c30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c1e:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <prvProcessTimerOrBlockTask+0x90>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <prvProcessTimerOrBlockTask+0x50>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <prvProcessTimerOrBlockTask+0x52>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c30:	4b0f      	ldr	r3, [pc, #60]	; (8005c70 <prvProcessTimerOrBlockTask+0x94>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	f7fe fea7 	bl	8004990 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c42:	f7ff f941 	bl	8004ec8 <xTaskResumeAll>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c4c:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <prvProcessTimerOrBlockTask+0x98>)
 8005c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	f3bf 8f6f 	isb	sy
}
 8005c5c:	e001      	b.n	8005c62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c5e:	f7ff f933 	bl	8004ec8 <xTaskResumeAll>
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200009ec 	.word	0x200009ec
 8005c70:	200009f0 	.word	0x200009f0
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <prvGetNextExpireTime+0x44>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <prvGetNextExpireTime+0x16>
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	e000      	b.n	8005c90 <prvGetNextExpireTime+0x18>
 8005c8e:	2200      	movs	r2, #0
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <prvGetNextExpireTime+0x44>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e001      	b.n	8005cac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	200009e8 	.word	0x200009e8

08005cc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005cc8:	f7ff f99a 	bl	8005000 <xTaskGetTickCount>
 8005ccc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005cce:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <prvSampleTimeNow+0x3c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d205      	bcs.n	8005ce4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005cd8:	f000 f936 	bl	8005f48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	e002      	b.n	8005cea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005cea:	4a04      	ldr	r2, [pc, #16]	; (8005cfc <prvSampleTimeNow+0x3c>)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	200009f8 	.word	0x200009f8

08005d00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d812      	bhi.n	8005d4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	1ad2      	subs	r2, r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d302      	bcc.n	8005d3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e01b      	b.n	8005d72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <prvInsertTimerInActiveList+0x7c>)
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f7fe f907 	bl	8003f58 <vListInsert>
 8005d4a:	e012      	b.n	8005d72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d206      	bcs.n	8005d62 <prvInsertTimerInActiveList+0x62>
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d302      	bcc.n	8005d62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	e007      	b.n	8005d72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <prvInsertTimerInActiveList+0x80>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f7fe f8f3 	bl	8003f58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d72:	697b      	ldr	r3, [r7, #20]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	200009ec 	.word	0x200009ec
 8005d80:	200009e8 	.word	0x200009e8

08005d84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08e      	sub	sp, #56	; 0x38
 8005d88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d8a:	e0ca      	b.n	8005f22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da18      	bge.n	8005dc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d92:	1d3b      	adds	r3, r7, #4
 8005d94:	3304      	adds	r3, #4
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10a      	bne.n	8005db4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	61fb      	str	r3, [r7, #28]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dba:	6850      	ldr	r0, [r2, #4]
 8005dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dbe:	6892      	ldr	r2, [r2, #8]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f2c0 80aa 	blt.w	8005f20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe f8f4 	bl	8003fca <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005de2:	463b      	mov	r3, r7
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff ff6b 	bl	8005cc0 <prvSampleTimeNow>
 8005dea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b09      	cmp	r3, #9
 8005df0:	f200 8097 	bhi.w	8005f22 <prvProcessReceivedCommands+0x19e>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <prvProcessReceivedCommands+0x78>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e99 	.word	0x08005e99
 8005e0c:	08005ead 	.word	0x08005ead
 8005e10:	08005ef7 	.word	0x08005ef7
 8005e14:	08005e25 	.word	0x08005e25
 8005e18:	08005e25 	.word	0x08005e25
 8005e1c:	08005e99 	.word	0x08005e99
 8005e20:	08005ead 	.word	0x08005ead
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	18d1      	adds	r1, r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e44:	f7ff ff5c 	bl	8005d00 <prvInsertTimerInActiveList>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d069      	beq.n	8005f22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d05e      	beq.n	8005f22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	441a      	add	r2, r3
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2300      	movs	r3, #0
 8005e72:	2100      	movs	r1, #0
 8005e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e76:	f7ff fe05 	bl	8005a84 <xTimerGenericCommand>
 8005e7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d14f      	bne.n	8005f22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	61bb      	str	r3, [r7, #24]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e9e:	f023 0301 	bic.w	r3, r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005eaa:	e03a      	b.n	8005f22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	617b      	str	r3, [r7, #20]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	18d1      	adds	r1, r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef0:	f7ff ff06 	bl	8005d00 <prvInsertTimerInActiveList>
					break;
 8005ef4:	e015      	b.n	8005f22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f06:	f000 fbdb 	bl	80066c0 <vPortFree>
 8005f0a:	e00a      	b.n	8005f22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f12:	f023 0301 	bic.w	r3, r3, #1
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f1e:	e000      	b.n	8005f22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <prvProcessReceivedCommands+0x1c0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	1d39      	adds	r1, r7, #4
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fe fb16 	bl	800455c <xQueueReceive>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f47f af2a 	bne.w	8005d8c <prvProcessReceivedCommands+0x8>
	}
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	3730      	adds	r7, #48	; 0x30
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200009f0 	.word	0x200009f0

08005f48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b088      	sub	sp, #32
 8005f4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f4e:	e048      	b.n	8005fe2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f50:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <prvSwitchTimerLists+0xc0>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f5a:	4b2b      	ldr	r3, [pc, #172]	; (8006008 <prvSwitchTimerLists+0xc0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fe f82e 	bl	8003fca <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d02e      	beq.n	8005fe2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d90e      	bls.n	8005fb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fa2:	4b19      	ldr	r3, [pc, #100]	; (8006008 <prvSwitchTimerLists+0xc0>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f7fd ffd3 	bl	8003f58 <vListInsert>
 8005fb2:	e016      	b.n	8005fe2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff fd60 	bl	8005a84 <xTimerGenericCommand>
 8005fc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	603b      	str	r3, [r7, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fe2:	4b09      	ldr	r3, [pc, #36]	; (8006008 <prvSwitchTimerLists+0xc0>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1b1      	bne.n	8005f50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <prvSwitchTimerLists+0xc0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <prvSwitchTimerLists+0xc4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a04      	ldr	r2, [pc, #16]	; (8006008 <prvSwitchTimerLists+0xc0>)
 8005ff8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ffa:	4a04      	ldr	r2, [pc, #16]	; (800600c <prvSwitchTimerLists+0xc4>)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6013      	str	r3, [r2, #0]
}
 8006000:	bf00      	nop
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	200009e8 	.word	0x200009e8
 800600c:	200009ec 	.word	0x200009ec

08006010 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006016:	f000 f965 	bl	80062e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800601a:	4b15      	ldr	r3, [pc, #84]	; (8006070 <prvCheckForValidListAndQueue+0x60>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d120      	bne.n	8006064 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006022:	4814      	ldr	r0, [pc, #80]	; (8006074 <prvCheckForValidListAndQueue+0x64>)
 8006024:	f7fd ff47 	bl	8003eb6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006028:	4813      	ldr	r0, [pc, #76]	; (8006078 <prvCheckForValidListAndQueue+0x68>)
 800602a:	f7fd ff44 	bl	8003eb6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800602e:	4b13      	ldr	r3, [pc, #76]	; (800607c <prvCheckForValidListAndQueue+0x6c>)
 8006030:	4a10      	ldr	r2, [pc, #64]	; (8006074 <prvCheckForValidListAndQueue+0x64>)
 8006032:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006034:	4b12      	ldr	r3, [pc, #72]	; (8006080 <prvCheckForValidListAndQueue+0x70>)
 8006036:	4a10      	ldr	r2, [pc, #64]	; (8006078 <prvCheckForValidListAndQueue+0x68>)
 8006038:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800603a:	2300      	movs	r3, #0
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	4b11      	ldr	r3, [pc, #68]	; (8006084 <prvCheckForValidListAndQueue+0x74>)
 8006040:	4a11      	ldr	r2, [pc, #68]	; (8006088 <prvCheckForValidListAndQueue+0x78>)
 8006042:	2110      	movs	r1, #16
 8006044:	200a      	movs	r0, #10
 8006046:	f7fe f853 	bl	80040f0 <xQueueGenericCreateStatic>
 800604a:	4603      	mov	r3, r0
 800604c:	4a08      	ldr	r2, [pc, #32]	; (8006070 <prvCheckForValidListAndQueue+0x60>)
 800604e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <prvCheckForValidListAndQueue+0x60>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <prvCheckForValidListAndQueue+0x60>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	490b      	ldr	r1, [pc, #44]	; (800608c <prvCheckForValidListAndQueue+0x7c>)
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe fc6c 	bl	800493c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006064:	f000 f96e 	bl	8006344 <vPortExitCritical>
}
 8006068:	bf00      	nop
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200009f0 	.word	0x200009f0
 8006074:	200009c0 	.word	0x200009c0
 8006078:	200009d4 	.word	0x200009d4
 800607c:	200009e8 	.word	0x200009e8
 8006080:	200009ec 	.word	0x200009ec
 8006084:	20000a9c 	.word	0x20000a9c
 8006088:	200009fc 	.word	0x200009fc
 800608c:	080087cc 	.word	0x080087cc

08006090 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3b04      	subs	r3, #4
 80060a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3b04      	subs	r3, #4
 80060ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f023 0201 	bic.w	r2, r3, #1
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3b04      	subs	r3, #4
 80060be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060c0:	4a0c      	ldr	r2, [pc, #48]	; (80060f4 <pxPortInitialiseStack+0x64>)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3b14      	subs	r3, #20
 80060ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3b04      	subs	r3, #4
 80060d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f06f 0202 	mvn.w	r2, #2
 80060de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3b20      	subs	r3, #32
 80060e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060e6:	68fb      	ldr	r3, [r7, #12]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	080060f9 	.word	0x080060f9

080060f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060fe:	2300      	movs	r3, #0
 8006100:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <prvTaskExitError+0x54>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610a:	d00a      	beq.n	8006122 <prvTaskExitError+0x2a>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	60fb      	str	r3, [r7, #12]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <prvTaskExitError+0x28>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
}
 8006134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006136:	bf00      	nop
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0fc      	beq.n	8006138 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	2000000c 	.word	0x2000000c

08006150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <pxCurrentTCBConst2>)
 8006152:	6819      	ldr	r1, [r3, #0]
 8006154:	6808      	ldr	r0, [r1, #0]
 8006156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	f380 8809 	msr	PSP, r0
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f380 8811 	msr	BASEPRI, r0
 800616a:	4770      	bx	lr
 800616c:	f3af 8000 	nop.w

08006170 <pxCurrentTCBConst2>:
 8006170:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop

08006178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006178:	4808      	ldr	r0, [pc, #32]	; (800619c <prvPortStartFirstTask+0x24>)
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	6800      	ldr	r0, [r0, #0]
 800617e:	f380 8808 	msr	MSP, r0
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8814 	msr	CONTROL, r0
 800618a:	b662      	cpsie	i
 800618c:	b661      	cpsie	f
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	df00      	svc	0
 8006198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800619a:	bf00      	nop
 800619c:	e000ed08 	.word	0xe000ed08

080061a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061a6:	4b46      	ldr	r3, [pc, #280]	; (80062c0 <xPortStartScheduler+0x120>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a46      	ldr	r2, [pc, #280]	; (80062c4 <xPortStartScheduler+0x124>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10a      	bne.n	80061c6 <xPortStartScheduler+0x26>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061c6:	4b3e      	ldr	r3, [pc, #248]	; (80062c0 <xPortStartScheduler+0x120>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a3f      	ldr	r2, [pc, #252]	; (80062c8 <xPortStartScheduler+0x128>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d10a      	bne.n	80061e6 <xPortStartScheduler+0x46>
	__asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	60fb      	str	r3, [r7, #12]
}
 80061e2:	bf00      	nop
 80061e4:	e7fe      	b.n	80061e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061e6:	4b39      	ldr	r3, [pc, #228]	; (80062cc <xPortStartScheduler+0x12c>)
 80061e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	22ff      	movs	r2, #255	; 0xff
 80061f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006208:	b2da      	uxtb	r2, r3
 800620a:	4b31      	ldr	r3, [pc, #196]	; (80062d0 <xPortStartScheduler+0x130>)
 800620c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800620e:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <xPortStartScheduler+0x134>)
 8006210:	2207      	movs	r2, #7
 8006212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006214:	e009      	b.n	800622a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006216:	4b2f      	ldr	r3, [pc, #188]	; (80062d4 <xPortStartScheduler+0x134>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3b01      	subs	r3, #1
 800621c:	4a2d      	ldr	r2, [pc, #180]	; (80062d4 <xPortStartScheduler+0x134>)
 800621e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	b2db      	uxtb	r3, r3
 8006228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006232:	2b80      	cmp	r3, #128	; 0x80
 8006234:	d0ef      	beq.n	8006216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <xPortStartScheduler+0x134>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1c3 0307 	rsb	r3, r3, #7
 800623e:	2b04      	cmp	r3, #4
 8006240:	d00a      	beq.n	8006258 <xPortStartScheduler+0xb8>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	60bb      	str	r3, [r7, #8]
}
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006258:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <xPortStartScheduler+0x134>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	021b      	lsls	r3, r3, #8
 800625e:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <xPortStartScheduler+0x134>)
 8006260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006262:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <xPortStartScheduler+0x134>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800626a:	4a1a      	ldr	r2, [pc, #104]	; (80062d4 <xPortStartScheduler+0x134>)
 800626c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	b2da      	uxtb	r2, r3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006276:	4b18      	ldr	r3, [pc, #96]	; (80062d8 <xPortStartScheduler+0x138>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <xPortStartScheduler+0x138>)
 800627c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006282:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <xPortStartScheduler+0x138>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a14      	ldr	r2, [pc, #80]	; (80062d8 <xPortStartScheduler+0x138>)
 8006288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800628c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800628e:	f000 f8dd 	bl	800644c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006292:	4b12      	ldr	r3, [pc, #72]	; (80062dc <xPortStartScheduler+0x13c>)
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006298:	f000 f8fc 	bl	8006494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800629c:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <xPortStartScheduler+0x140>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0f      	ldr	r2, [pc, #60]	; (80062e0 <xPortStartScheduler+0x140>)
 80062a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062a8:	f7ff ff66 	bl	8006178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062ac:	f7fe ff70 	bl	8005190 <vTaskSwitchContext>
	prvTaskExitError();
 80062b0:	f7ff ff22 	bl	80060f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	e000ed00 	.word	0xe000ed00
 80062c4:	410fc271 	.word	0x410fc271
 80062c8:	410fc270 	.word	0x410fc270
 80062cc:	e000e400 	.word	0xe000e400
 80062d0:	20000aec 	.word	0x20000aec
 80062d4:	20000af0 	.word	0x20000af0
 80062d8:	e000ed20 	.word	0xe000ed20
 80062dc:	2000000c 	.word	0x2000000c
 80062e0:	e000ef34 	.word	0xe000ef34

080062e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
	__asm volatile
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	607b      	str	r3, [r7, #4]
}
 80062fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062fe:	4b0f      	ldr	r3, [pc, #60]	; (800633c <vPortEnterCritical+0x58>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3301      	adds	r3, #1
 8006304:	4a0d      	ldr	r2, [pc, #52]	; (800633c <vPortEnterCritical+0x58>)
 8006306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006308:	4b0c      	ldr	r3, [pc, #48]	; (800633c <vPortEnterCritical+0x58>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d10f      	bne.n	8006330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <vPortEnterCritical+0x5c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <vPortEnterCritical+0x4c>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	603b      	str	r3, [r7, #0]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <vPortEnterCritical+0x4a>
	}
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	2000000c 	.word	0x2000000c
 8006340:	e000ed04 	.word	0xe000ed04

08006344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800634a:	4b12      	ldr	r3, [pc, #72]	; (8006394 <vPortExitCritical+0x50>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <vPortExitCritical+0x24>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	607b      	str	r3, [r7, #4]
}
 8006364:	bf00      	nop
 8006366:	e7fe      	b.n	8006366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006368:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <vPortExitCritical+0x50>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3b01      	subs	r3, #1
 800636e:	4a09      	ldr	r2, [pc, #36]	; (8006394 <vPortExitCritical+0x50>)
 8006370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006372:	4b08      	ldr	r3, [pc, #32]	; (8006394 <vPortExitCritical+0x50>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d105      	bne.n	8006386 <vPortExitCritical+0x42>
 800637a:	2300      	movs	r3, #0
 800637c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	f383 8811 	msr	BASEPRI, r3
}
 8006384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	2000000c 	.word	0x2000000c
	...

080063a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063a0:	f3ef 8009 	mrs	r0, PSP
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	4b15      	ldr	r3, [pc, #84]	; (8006400 <pxCurrentTCBConst>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	f01e 0f10 	tst.w	lr, #16
 80063b0:	bf08      	it	eq
 80063b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ba:	6010      	str	r0, [r2, #0]
 80063bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063c4:	f380 8811 	msr	BASEPRI, r0
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f7fe fede 	bl	8005190 <vTaskSwitchContext>
 80063d4:	f04f 0000 	mov.w	r0, #0
 80063d8:	f380 8811 	msr	BASEPRI, r0
 80063dc:	bc09      	pop	{r0, r3}
 80063de:	6819      	ldr	r1, [r3, #0]
 80063e0:	6808      	ldr	r0, [r1, #0]
 80063e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e6:	f01e 0f10 	tst.w	lr, #16
 80063ea:	bf08      	it	eq
 80063ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063f0:	f380 8809 	msr	PSP, r0
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	f3af 8000 	nop.w

08006400 <pxCurrentTCBConst>:
 8006400:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop

08006408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006422:	f7fe fdfd 	bl	8005020 <xTaskIncrementTick>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <SysTick_Handler+0x40>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	2300      	movs	r3, #0
 8006436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f383 8811 	msr	BASEPRI, r3
}
 800643e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006450:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <vPortSetupTimerInterrupt+0x34>)
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <vPortSetupTimerInterrupt+0x38>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <vPortSetupTimerInterrupt+0x3c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a0a      	ldr	r2, [pc, #40]	; (800648c <vPortSetupTimerInterrupt+0x40>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	099b      	lsrs	r3, r3, #6
 8006468:	4a09      	ldr	r2, [pc, #36]	; (8006490 <vPortSetupTimerInterrupt+0x44>)
 800646a:	3b01      	subs	r3, #1
 800646c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800646e:	4b04      	ldr	r3, [pc, #16]	; (8006480 <vPortSetupTimerInterrupt+0x34>)
 8006470:	2207      	movs	r2, #7
 8006472:	601a      	str	r2, [r3, #0]
}
 8006474:	bf00      	nop
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	e000e010 	.word	0xe000e010
 8006484:	e000e018 	.word	0xe000e018
 8006488:	20000000 	.word	0x20000000
 800648c:	10624dd3 	.word	0x10624dd3
 8006490:	e000e014 	.word	0xe000e014

08006494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80064a4 <vPortEnableVFP+0x10>
 8006498:	6801      	ldr	r1, [r0, #0]
 800649a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800649e:	6001      	str	r1, [r0, #0]
 80064a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064a2:	bf00      	nop
 80064a4:	e000ed88 	.word	0xe000ed88

080064a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064ae:	f3ef 8305 	mrs	r3, IPSR
 80064b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b0f      	cmp	r3, #15
 80064b8:	d914      	bls.n	80064e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064ba:	4a17      	ldr	r2, [pc, #92]	; (8006518 <vPortValidateInterruptPriority+0x70>)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064c4:	4b15      	ldr	r3, [pc, #84]	; (800651c <vPortValidateInterruptPriority+0x74>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	7afa      	ldrb	r2, [r7, #11]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d20a      	bcs.n	80064e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	607b      	str	r3, [r7, #4]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064e4:	4b0e      	ldr	r3, [pc, #56]	; (8006520 <vPortValidateInterruptPriority+0x78>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064ec:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <vPortValidateInterruptPriority+0x7c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d90a      	bls.n	800650a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	603b      	str	r3, [r7, #0]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <vPortValidateInterruptPriority+0x60>
	}
 800650a:	bf00      	nop
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	e000e3f0 	.word	0xe000e3f0
 800651c:	20000aec 	.word	0x20000aec
 8006520:	e000ed0c 	.word	0xe000ed0c
 8006524:	20000af0 	.word	0x20000af0

08006528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08a      	sub	sp, #40	; 0x28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006530:	2300      	movs	r3, #0
 8006532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006534:	f7fe fcba 	bl	8004eac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006538:	4b5b      	ldr	r3, [pc, #364]	; (80066a8 <pvPortMalloc+0x180>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006540:	f000 f920 	bl	8006784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006544:	4b59      	ldr	r3, [pc, #356]	; (80066ac <pvPortMalloc+0x184>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 8093 	bne.w	8006678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01d      	beq.n	8006594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006558:	2208      	movs	r2, #8
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4413      	add	r3, r2
 800655e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	2b00      	cmp	r3, #0
 8006568:	d014      	beq.n	8006594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f023 0307 	bic.w	r3, r3, #7
 8006570:	3308      	adds	r3, #8
 8006572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <pvPortMalloc+0x6c>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	617b      	str	r3, [r7, #20]
}
 8006590:	bf00      	nop
 8006592:	e7fe      	b.n	8006592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d06e      	beq.n	8006678 <pvPortMalloc+0x150>
 800659a:	4b45      	ldr	r3, [pc, #276]	; (80066b0 <pvPortMalloc+0x188>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d869      	bhi.n	8006678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065a4:	4b43      	ldr	r3, [pc, #268]	; (80066b4 <pvPortMalloc+0x18c>)
 80065a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065a8:	4b42      	ldr	r3, [pc, #264]	; (80066b4 <pvPortMalloc+0x18c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065ae:	e004      	b.n	80065ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d903      	bls.n	80065cc <pvPortMalloc+0xa4>
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1f1      	bne.n	80065b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065cc:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <pvPortMalloc+0x180>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d050      	beq.n	8006678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2208      	movs	r2, #8
 80065dc:	4413      	add	r3, r2
 80065de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	1ad2      	subs	r2, r2, r3
 80065f0:	2308      	movs	r3, #8
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d91f      	bls.n	8006638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <pvPortMalloc+0xf8>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	613b      	str	r3, [r7, #16]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006632:	69b8      	ldr	r0, [r7, #24]
 8006634:	f000 f908 	bl	8006848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006638:	4b1d      	ldr	r3, [pc, #116]	; (80066b0 <pvPortMalloc+0x188>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	4a1b      	ldr	r2, [pc, #108]	; (80066b0 <pvPortMalloc+0x188>)
 8006644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006646:	4b1a      	ldr	r3, [pc, #104]	; (80066b0 <pvPortMalloc+0x188>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <pvPortMalloc+0x190>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	429a      	cmp	r2, r3
 8006650:	d203      	bcs.n	800665a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006652:	4b17      	ldr	r3, [pc, #92]	; (80066b0 <pvPortMalloc+0x188>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <pvPortMalloc+0x190>)
 8006658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	685a      	ldr	r2, [r3, #4]
 800665e:	4b13      	ldr	r3, [pc, #76]	; (80066ac <pvPortMalloc+0x184>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	431a      	orrs	r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800666e:	4b13      	ldr	r3, [pc, #76]	; (80066bc <pvPortMalloc+0x194>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3301      	adds	r3, #1
 8006674:	4a11      	ldr	r2, [pc, #68]	; (80066bc <pvPortMalloc+0x194>)
 8006676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006678:	f7fe fc26 	bl	8004ec8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <pvPortMalloc+0x174>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60fb      	str	r3, [r7, #12]
}
 8006698:	bf00      	nop
 800669a:	e7fe      	b.n	800669a <pvPortMalloc+0x172>
	return pvReturn;
 800669c:	69fb      	ldr	r3, [r7, #28]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3728      	adds	r7, #40	; 0x28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200046fc 	.word	0x200046fc
 80066ac:	20004710 	.word	0x20004710
 80066b0:	20004700 	.word	0x20004700
 80066b4:	200046f4 	.word	0x200046f4
 80066b8:	20004704 	.word	0x20004704
 80066bc:	20004708 	.word	0x20004708

080066c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d04d      	beq.n	800676e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066d2:	2308      	movs	r3, #8
 80066d4:	425b      	negs	r3, r3
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4413      	add	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <vPortFree+0xb8>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4013      	ands	r3, r2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <vPortFree+0x44>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60fb      	str	r3, [r7, #12]
}
 8006700:	bf00      	nop
 8006702:	e7fe      	b.n	8006702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <vPortFree+0x62>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60bb      	str	r3, [r7, #8]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	4b14      	ldr	r3, [pc, #80]	; (8006778 <vPortFree+0xb8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01e      	beq.n	800676e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11a      	bne.n	800676e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <vPortFree+0xb8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	43db      	mvns	r3, r3
 8006742:	401a      	ands	r2, r3
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006748:	f7fe fbb0 	bl	8004eac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	4b0a      	ldr	r3, [pc, #40]	; (800677c <vPortFree+0xbc>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4413      	add	r3, r2
 8006756:	4a09      	ldr	r2, [pc, #36]	; (800677c <vPortFree+0xbc>)
 8006758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800675a:	6938      	ldr	r0, [r7, #16]
 800675c:	f000 f874 	bl	8006848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <vPortFree+0xc0>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a06      	ldr	r2, [pc, #24]	; (8006780 <vPortFree+0xc0>)
 8006768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800676a:	f7fe fbad 	bl	8004ec8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800676e:	bf00      	nop
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20004710 	.word	0x20004710
 800677c:	20004700 	.word	0x20004700
 8006780:	2000470c 	.word	0x2000470c

08006784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800678a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800678e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006790:	4b27      	ldr	r3, [pc, #156]	; (8006830 <prvHeapInit+0xac>)
 8006792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00c      	beq.n	80067b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3307      	adds	r3, #7
 80067a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0307 	bic.w	r3, r3, #7
 80067aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	4a1f      	ldr	r2, [pc, #124]	; (8006830 <prvHeapInit+0xac>)
 80067b4:	4413      	add	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067bc:	4a1d      	ldr	r2, [pc, #116]	; (8006834 <prvHeapInit+0xb0>)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <prvHeapInit+0xb0>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	4413      	add	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067d0:	2208      	movs	r2, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1a9b      	subs	r3, r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0307 	bic.w	r3, r3, #7
 80067de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4a15      	ldr	r2, [pc, #84]	; (8006838 <prvHeapInit+0xb4>)
 80067e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067e6:	4b14      	ldr	r3, [pc, #80]	; (8006838 <prvHeapInit+0xb4>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2200      	movs	r2, #0
 80067ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ee:	4b12      	ldr	r3, [pc, #72]	; (8006838 <prvHeapInit+0xb4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006804:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <prvHeapInit+0xb4>)
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	4a0a      	ldr	r2, [pc, #40]	; (800683c <prvHeapInit+0xb8>)
 8006812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4a09      	ldr	r2, [pc, #36]	; (8006840 <prvHeapInit+0xbc>)
 800681a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <prvHeapInit+0xc0>)
 800681e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006822:	601a      	str	r2, [r3, #0]
}
 8006824:	bf00      	nop
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	20000af4 	.word	0x20000af4
 8006834:	200046f4 	.word	0x200046f4
 8006838:	200046fc 	.word	0x200046fc
 800683c:	20004704 	.word	0x20004704
 8006840:	20004700 	.word	0x20004700
 8006844:	20004710 	.word	0x20004710

08006848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006850:	4b28      	ldr	r3, [pc, #160]	; (80068f4 <prvInsertBlockIntoFreeList+0xac>)
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e002      	b.n	800685c <prvInsertBlockIntoFreeList+0x14>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	429a      	cmp	r2, r3
 8006864:	d8f7      	bhi.n	8006856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4413      	add	r3, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	d108      	bne.n	800688a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	441a      	add	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	441a      	add	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d118      	bne.n	80068d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <prvInsertBlockIntoFreeList+0xb0>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d00d      	beq.n	80068c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	441a      	add	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e008      	b.n	80068d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068c6:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <prvInsertBlockIntoFreeList+0xb0>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	e003      	b.n	80068d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d002      	beq.n	80068e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	200046f4 	.word	0x200046f4
 80068f8:	200046fc 	.word	0x200046fc

080068fc <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	2b05      	cmp	r3, #5
 8006910:	d122      	bne.n	8006958 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3301      	adds	r3, #1
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3302      	adds	r3, #2
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b29a      	uxth	r2, r3
 8006926:	89bb      	ldrh	r3, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800692c:	89bb      	ldrh	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	1cd8      	adds	r0, r3, #3
 8006936:	89b9      	ldrh	r1, [r7, #12]
 8006938:	2301      	movs	r3, #1
 800693a:	2201      	movs	r2, #1
 800693c:	f000 fe8e 	bl	800765c <eMBRegHoldingCB>
 8006940:	4603      	mov	r3, r0
 8006942:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8006944:	7afb      	ldrb	r3, [r7, #11]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d008      	beq.n	800695c <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 f90b 	bl	8006b68 <prveMBError2Exception>
 8006952:	4603      	mov	r3, r0
 8006954:	73fb      	strb	r3, [r7, #15]
 8006956:	e001      	b.n	800695c <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006958:	2303      	movs	r3, #3
 800695a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b086      	sub	sp, #24
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8006970:	2300      	movs	r3, #0
 8006972:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	2b05      	cmp	r3, #5
 800697a:	d15f      	bne.n	8006a3c <eMBFuncReadHoldingRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3301      	adds	r3, #1
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3302      	adds	r3, #2
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	b29a      	uxth	r2, r3
 8006990:	8abb      	ldrh	r3, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8006996:	8abb      	ldrh	r3, [r7, #20]
 8006998:	3301      	adds	r3, #1
 800699a:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3303      	adds	r3, #3
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3304      	adds	r3, #4
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	8a7b      	ldrh	r3, [r7, #18]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80069b6:	8a7b      	ldrh	r3, [r7, #18]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d03c      	beq.n	8006a36 <eMBFuncReadHoldingRegister+0xd0>
 80069bc:	8a7b      	ldrh	r3, [r7, #18]
 80069be:	2b7d      	cmp	r3, #125	; 0x7d
 80069c0:	d839      	bhi.n	8006a36 <eMBFuncReadHoldingRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2200      	movs	r2, #0
 80069ca:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	60fa      	str	r2, [r7, #12]
 80069d2:	2203      	movs	r2, #3
 80069d4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	3301      	adds	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80069e2:	8a7b      	ldrh	r3, [r7, #18]
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1c59      	adds	r1, r3, #1
 80069ea:	60f9      	str	r1, [r7, #12]
 80069ec:	0052      	lsls	r2, r2, #1
 80069ee:	b2d2      	uxtb	r2, r2
 80069f0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80069fe:	8a7a      	ldrh	r2, [r7, #18]
 8006a00:	8ab9      	ldrh	r1, [r7, #20]
 8006a02:	2300      	movs	r3, #0
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fe29 	bl	800765c <eMBRegHoldingCB>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006a0e:	7afb      	ldrb	r3, [r7, #11]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <eMBFuncReadHoldingRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f8a6 	bl	8006b68 <prveMBError2Exception>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8006a20:	e00e      	b.n	8006a40 <eMBFuncReadHoldingRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	881a      	ldrh	r2, [r3, #0]
 8006a26:	8a7b      	ldrh	r3, [r7, #18]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006a34:	e004      	b.n	8006a40 <eMBFuncReadHoldingRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006a36:	2303      	movs	r3, #3
 8006a38:	75fb      	strb	r3, [r7, #23]
 8006a3a:	e001      	b.n	8006a40 <eMBFuncReadHoldingRegister+0xda>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
 8006a52:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	2b05      	cmp	r3, #5
 8006a5e:	d15f      	bne.n	8006b20 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3301      	adds	r3, #1
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3302      	adds	r3, #2
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	8abb      	ldrh	r3, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8006a7a:	8abb      	ldrh	r3, [r7, #20]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3303      	adds	r3, #3
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	8a7b      	ldrh	r3, [r7, #18]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 8006a9a:	8a7b      	ldrh	r3, [r7, #18]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d03c      	beq.n	8006b1a <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8006aa0:	8a7b      	ldrh	r3, [r7, #18]
 8006aa2:	2b7c      	cmp	r3, #124	; 0x7c
 8006aa4:	d839      	bhi.n	8006b1a <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2200      	movs	r2, #0
 8006aae:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	60fa      	str	r2, [r7, #12]
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 8006ac6:	8a7b      	ldrh	r3, [r7, #18]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	1c59      	adds	r1, r3, #1
 8006ace:	60f9      	str	r1, [r7, #12]
 8006ad0:	0052      	lsls	r2, r2, #1
 8006ad2:	b2d2      	uxtb	r2, r2
 8006ad4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	3301      	adds	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8006ae2:	8a7a      	ldrh	r2, [r7, #18]
 8006ae4:	8abb      	ldrh	r3, [r7, #20]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fd67 	bl	80075bc <eMBRegInputCB>
 8006aee:	4603      	mov	r3, r0
 8006af0:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006af2:	7afb      	ldrb	r3, [r7, #11]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d006      	beq.n	8006b06 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006af8:	7afb      	ldrb	r3, [r7, #11]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f834 	bl	8006b68 <prveMBError2Exception>
 8006b00:	4603      	mov	r3, r0
 8006b02:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8006b04:	e00e      	b.n	8006b24 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	8a7b      	ldrh	r3, [r7, #18]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006b18:	e004      	b.n	8006b24 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	75fb      	strb	r3, [r7, #23]
 8006b1e:	e001      	b.n	8006b24 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006b20:	2303      	movs	r3, #3
 8006b22:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
	...

08006b30 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <eMBFuncReportSlaveID+0x30>)
 8006b40:	8812      	ldrh	r2, [r2, #0]
 8006b42:	4908      	ldr	r1, [pc, #32]	; (8006b64 <eMBFuncReportSlaveID+0x34>)
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fef0 	bl	800792a <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <eMBFuncReportSlaveID+0x30>)
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20004734 	.word	0x20004734
 8006b64:	20004714 	.word	0x20004714

08006b68 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	2b07      	cmp	r3, #7
 8006b76:	d00c      	beq.n	8006b92 <prveMBError2Exception+0x2a>
 8006b78:	2b07      	cmp	r3, #7
 8006b7a:	dc0d      	bgt.n	8006b98 <prveMBError2Exception+0x30>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <prveMBError2Exception+0x1e>
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d003      	beq.n	8006b8c <prveMBError2Exception+0x24>
 8006b84:	e008      	b.n	8006b98 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
            break;
 8006b8a:	e008      	b.n	8006b9e <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	73fb      	strb	r3, [r7, #15]
            break;
 8006b90:	e005      	b.n	8006b9e <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8006b92:	2306      	movs	r3, #6
 8006b94:	73fb      	strb	r3, [r7, #15]
            break;
 8006b96:	e002      	b.n	8006b9e <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8006b98:	2304      	movs	r3, #4
 8006b9a:	73fb      	strb	r3, [r7, #15]
            break;
 8006b9c:	bf00      	nop
    }

    return eStatus;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	71fb      	strb	r3, [r7, #7]
 8006bb8:	460b      	mov	r3, r1
 8006bba:	71bb      	strb	r3, [r7, #6]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8006bc4:	79bb      	ldrb	r3, [r7, #6]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <eMBInit+0x2a>
 8006bca:	79bb      	ldrb	r3, [r7, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8006bd0:	79bb      	ldrb	r3, [r7, #6]
 8006bd2:	2bf7      	cmp	r3, #247	; 0xf7
 8006bd4:	d902      	bls.n	8006bdc <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8006bd6:	2302      	movs	r3, #2
 8006bd8:	73fb      	strb	r3, [r7, #15]
 8006bda:	e03b      	b.n	8006c54 <eMBInit+0xa8>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8006bdc:	4a20      	ldr	r2, [pc, #128]	; (8006c60 <eMBInit+0xb4>)
 8006bde:	79bb      	ldrb	r3, [r7, #6]
 8006be0:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d121      	bne.n	8006c2c <eMBInit+0x80>
        {
#if MB_SLAVE_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8006be8:	4b1e      	ldr	r3, [pc, #120]	; (8006c64 <eMBInit+0xb8>)
 8006bea:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <eMBInit+0xbc>)
 8006bec:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8006bee:	4b1f      	ldr	r3, [pc, #124]	; (8006c6c <eMBInit+0xc0>)
 8006bf0:	4a1f      	ldr	r2, [pc, #124]	; (8006c70 <eMBInit+0xc4>)
 8006bf2:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8006bf4:	4b1f      	ldr	r3, [pc, #124]	; (8006c74 <eMBInit+0xc8>)
 8006bf6:	4a20      	ldr	r2, [pc, #128]	; (8006c78 <eMBInit+0xcc>)
 8006bf8:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8006bfa:	4b20      	ldr	r3, [pc, #128]	; (8006c7c <eMBInit+0xd0>)
 8006bfc:	4a20      	ldr	r2, [pc, #128]	; (8006c80 <eMBInit+0xd4>)
 8006bfe:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8006c00:	4b20      	ldr	r3, [pc, #128]	; (8006c84 <eMBInit+0xd8>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8006c06:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <eMBInit+0xdc>)
 8006c08:	4a20      	ldr	r2, [pc, #128]	; (8006c8c <eMBInit+0xe0>)
 8006c0a:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8006c0c:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <eMBInit+0xe4>)
 8006c0e:	4a21      	ldr	r2, [pc, #132]	; (8006c94 <eMBInit+0xe8>)
 8006c10:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8006c12:	4b21      	ldr	r3, [pc, #132]	; (8006c98 <eMBInit+0xec>)
 8006c14:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <eMBInit+0xf0>)
 8006c16:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8006c18:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <eMBInit+0xb4>)
 8006c1a:	7818      	ldrb	r0, [r3, #0]
 8006c1c:	7e3b      	ldrb	r3, [r7, #24]
 8006c1e:	7979      	ldrb	r1, [r7, #5]
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	f000 fa85 	bl	8007130 <eMBRTUInit>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
            break;
 8006c2a:	e002      	b.n	8006c32 <eMBInit+0x86>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	73fb      	strb	r3, [r7, #15]
            break;
 8006c30:	bf00      	nop
        }

        if( eStatus == MB_ENOERR )
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10d      	bne.n	8006c54 <eMBInit+0xa8>
        {
            if( !xMBPortEventInit(  ) )
 8006c38:	f000 f918 	bl	8006e6c <xMBPortEventInit>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <eMBInit+0x9c>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8006c42:	2303      	movs	r3, #3
 8006c44:	73fb      	strb	r3, [r7, #15]
 8006c46:	e005      	b.n	8006c54 <eMBInit+0xa8>
            }
            else
            {
                eMBCurrentMode = eMode;
 8006c48:	4a15      	ldr	r2, [pc, #84]	; (8006ca0 <eMBInit+0xf4>)
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <eMBInit+0xf8>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	20004736 	.word	0x20004736
 8006c64:	2000473c 	.word	0x2000473c
 8006c68:	080071a9 	.word	0x080071a9
 8006c6c:	20004740 	.word	0x20004740
 8006c70:	080071d1 	.word	0x080071d1
 8006c74:	20004738 	.word	0x20004738
 8006c78:	08007289 	.word	0x08007289
 8006c7c:	20004744 	.word	0x20004744
 8006c80:	080071ed 	.word	0x080071ed
 8006c84:	20004748 	.word	0x20004748
 8006c88:	2000492c 	.word	0x2000492c
 8006c8c:	08007351 	.word	0x08007351
 8006c90:	20004924 	.word	0x20004924
 8006c94:	08007421 	.word	0x08007421
 8006c98:	20004928 	.word	0x20004928
 8006c9c:	080074d1 	.word	0x080074d1
 8006ca0:	20004737 	.word	0x20004737
 8006ca4:	20000010 	.word	0x20000010

08006ca8 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <eMBEnable+0x30>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d106      	bne.n	8006cc8 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 8006cba:	4b08      	ldr	r3, [pc, #32]	; (8006cdc <eMBEnable+0x34>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 8006cc0:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <eMBEnable+0x30>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	e001      	b.n	8006ccc <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 8006cc8:	2306      	movs	r3, #6
 8006cca:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000010 	.word	0x20000010
 8006cdc:	2000473c 	.word	0x2000473c

08006ce0 <eMBPoll>:
    }
    return eStatus;
}

eMBErrorCode eMBPoll( void )
{
 8006ce0:	b590      	push	{r4, r7, lr}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8006cea:	4b56      	ldr	r3, [pc, #344]	; (8006e44 <eMBPoll+0x164>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 8006cf2:	2306      	movs	r3, #6
 8006cf4:	e0a1      	b.n	8006e3a <eMBPoll+0x15a>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8006cf6:	1cbb      	adds	r3, r7, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 f8db 	bl	8006eb4 <xMBPortEventGet>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	f040 8094 	bne.w	8006e2e <eMBPoll+0x14e>
    {
        switch ( eEvent )
 8006d06:	78bb      	ldrb	r3, [r7, #2]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	2b07      	cmp	r3, #7
 8006d0c:	f200 8094 	bhi.w	8006e38 <eMBPoll+0x158>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <eMBPoll+0x38>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006e39 	.word	0x08006e39
 8006d1c:	08006d39 	.word	0x08006d39
 8006d20:	08006e39 	.word	0x08006e39
 8006d24:	08006d6b 	.word	0x08006d6b
 8006d28:	08006e39 	.word	0x08006e39
 8006d2c:	08006e39 	.word	0x08006e39
 8006d30:	08006e39 	.word	0x08006e39
 8006d34:	08006e39 	.word	0x08006e39
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8006d38:	4b43      	ldr	r3, [pc, #268]	; (8006e48 <eMBPoll+0x168>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a43      	ldr	r2, [pc, #268]	; (8006e4c <eMBPoll+0x16c>)
 8006d3e:	4944      	ldr	r1, [pc, #272]	; (8006e50 <eMBPoll+0x170>)
 8006d40:	4844      	ldr	r0, [pc, #272]	; (8006e54 <eMBPoll+0x174>)
 8006d42:	4798      	blx	r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d171      	bne.n	8006e32 <eMBPoll+0x152>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8006d4e:	4b41      	ldr	r3, [pc, #260]	; (8006e54 <eMBPoll+0x174>)
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	4b41      	ldr	r3, [pc, #260]	; (8006e58 <eMBPoll+0x178>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d003      	beq.n	8006d62 <eMBPoll+0x82>
 8006d5a:	4b3e      	ldr	r3, [pc, #248]	; (8006e54 <eMBPoll+0x174>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d167      	bne.n	8006e32 <eMBPoll+0x152>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 8006d62:	2004      	movs	r0, #4
 8006d64:	f000 f892 	bl	8006e8c <xMBPortEventPost>
                }
            }
            break;
 8006d68:	e063      	b.n	8006e32 <eMBPoll+0x152>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8006d6a:	4b39      	ldr	r3, [pc, #228]	; (8006e50 <eMBPoll+0x170>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	781a      	ldrb	r2, [r3, #0]
 8006d70:	4b3a      	ldr	r3, [pc, #232]	; (8006e5c <eMBPoll+0x17c>)
 8006d72:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 8006d74:	4b3a      	ldr	r3, [pc, #232]	; (8006e60 <eMBPoll+0x180>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	607b      	str	r3, [r7, #4]
 8006d7e:	e01f      	b.n	8006dc0 <eMBPoll+0xe0>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8006d80:	4a38      	ldr	r2, [pc, #224]	; (8006e64 <eMBPoll+0x184>)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01d      	beq.n	8006dc8 <eMBPoll+0xe8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8006d8c:	4a35      	ldr	r2, [pc, #212]	; (8006e64 <eMBPoll+0x184>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8006d94:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <eMBPoll+0x17c>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d10e      	bne.n	8006dba <eMBPoll+0xda>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8006d9c:	4a31      	ldr	r2, [pc, #196]	; (8006e64 <eMBPoll+0x184>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	4413      	add	r3, r2
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <eMBPoll+0x170>)
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	4928      	ldr	r1, [pc, #160]	; (8006e4c <eMBPoll+0x16c>)
 8006dac:	4610      	mov	r0, r2
 8006dae:	4798      	blx	r3
 8006db0:	4603      	mov	r3, r0
 8006db2:	461a      	mov	r2, r3
 8006db4:	4b2a      	ldr	r3, [pc, #168]	; (8006e60 <eMBPoll+0x180>)
 8006db6:	701a      	strb	r2, [r3, #0]
                    break;
 8006db8:	e007      	b.n	8006dca <eMBPoll+0xea>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	607b      	str	r3, [r7, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b0f      	cmp	r3, #15
 8006dc4:	dddc      	ble.n	8006d80 <eMBPoll+0xa0>
 8006dc6:	e000      	b.n	8006dca <eMBPoll+0xea>
                    break;
 8006dc8:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 8006dca:	4b22      	ldr	r3, [pc, #136]	; (8006e54 <eMBPoll+0x174>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d031      	beq.n	8006e36 <eMBPoll+0x156>
            {
                if( eException != MB_EX_NONE )
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <eMBPoll+0x180>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01d      	beq.n	8006e16 <eMBPoll+0x136>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 8006dda:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <eMBPoll+0x16c>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 8006de0:	4b1e      	ldr	r3, [pc, #120]	; (8006e5c <eMBPoll+0x17c>)
 8006de2:	781a      	ldrb	r2, [r3, #0]
 8006de4:	4b1a      	ldr	r3, [pc, #104]	; (8006e50 <eMBPoll+0x170>)
 8006de6:	6819      	ldr	r1, [r3, #0]
 8006de8:	4b18      	ldr	r3, [pc, #96]	; (8006e4c <eMBPoll+0x16c>)
 8006dea:	881b      	ldrh	r3, [r3, #0]
 8006dec:	1c58      	adds	r0, r3, #1
 8006dee:	b284      	uxth	r4, r0
 8006df0:	4816      	ldr	r0, [pc, #88]	; (8006e4c <eMBPoll+0x16c>)
 8006df2:	8004      	strh	r4, [r0, #0]
 8006df4:	440b      	add	r3, r1
 8006df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8006dfe:	4b14      	ldr	r3, [pc, #80]	; (8006e50 <eMBPoll+0x170>)
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <eMBPoll+0x16c>)
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	1c59      	adds	r1, r3, #1
 8006e08:	b288      	uxth	r0, r1
 8006e0a:	4910      	ldr	r1, [pc, #64]	; (8006e4c <eMBPoll+0x16c>)
 8006e0c:	8008      	strh	r0, [r1, #0]
 8006e0e:	4413      	add	r3, r2
 8006e10:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <eMBPoll+0x180>)
 8006e12:	7812      	ldrb	r2, [r2, #0]
 8006e14:	701a      	strb	r2, [r3, #0]
                }
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <eMBPoll+0x188>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a0f      	ldr	r2, [pc, #60]	; (8006e58 <eMBPoll+0x178>)
 8006e1c:	7810      	ldrb	r0, [r2, #0]
 8006e1e:	4a0c      	ldr	r2, [pc, #48]	; (8006e50 <eMBPoll+0x170>)
 8006e20:	6811      	ldr	r1, [r2, #0]
 8006e22:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <eMBPoll+0x16c>)
 8006e24:	8812      	ldrh	r2, [r2, #0]
 8006e26:	4798      	blx	r3
 8006e28:	4603      	mov	r3, r0
 8006e2a:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8006e2c:	e003      	b.n	8006e36 <eMBPoll+0x156>

        case EV_FRAME_SENT:
            break;
        }
    }
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <eMBPoll+0x158>
            break;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <eMBPoll+0x158>
            break;
 8006e36:	bf00      	nop
    return MB_ENOERR;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd90      	pop	{r4, r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000010 	.word	0x20000010
 8006e48:	20004744 	.word	0x20004744
 8006e4c:	20004754 	.word	0x20004754
 8006e50:	20004750 	.word	0x20004750
 8006e54:	2000474c 	.word	0x2000474c
 8006e58:	20004736 	.word	0x20004736
 8006e5c:	20004756 	.word	0x20004756
 8006e60:	20004757 	.word	0x20004757
 8006e64:	20000014 	.word	0x20000014
 8006e68:	20004738 	.word	0x20004738

08006e6c <xMBPortEventInit>:
static StaticEventGroup_t xSlaveOsEventGroup;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
    xSlaveOsEvent_h = xEventGroupCreateStatic( &xSlaveOsEventGroup );
 8006e70:	4804      	ldr	r0, [pc, #16]	; (8006e84 <xMBPortEventInit+0x18>)
 8006e72:	f7fc fe6e 	bl	8003b52 <xEventGroupCreateStatic>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4a03      	ldr	r2, [pc, #12]	; (8006e88 <xMBPortEventInit+0x1c>)
 8006e7a:	6013      	str	r3, [r2, #0]

    return TRUE;
 8006e7c:	2301      	movs	r3, #1
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	2000475c 	.word	0x2000475c
 8006e88:	20004758 	.word	0x20004758

08006e8c <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	4603      	mov	r3, r0
 8006e94:	71fb      	strb	r3, [r7, #7]
    xEventGroupSetBits(xSlaveOsEvent_h, eEvent);
 8006e96:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <xMBPortEventPost+0x24>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	79fa      	ldrb	r2, [r7, #7]
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fc ff5c 	bl	8003d5c <xEventGroupSetBits>
    return TRUE;
 8006ea4:	2301      	movs	r3, #1
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20004758 	.word	0x20004758

08006eb4 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	6078      	str	r0, [r7, #4]
    EventBits_t uxBits;
    const TickType_t xTicksToWait = 0xFFFFFFFF;
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec0:	60fb      	str	r3, [r7, #12]

    /* waiting forever OS event */
    uxBits  = xEventGroupWaitBits(xSlaveOsEvent_h,
 8006ec2:	4b19      	ldr	r3, [pc, #100]	; (8006f28 <xMBPortEventGet+0x74>)
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2201      	movs	r2, #1
 8006ece:	210f      	movs	r1, #15
 8006ed0:	f7fc fe76 	bl	8003bc0 <xEventGroupWaitBits>
 8006ed4:	60b8      	str	r0, [r7, #8]
            EV_READY | EV_FRAME_RECEIVED | EV_EXECUTE | EV_FRAME_SENT,
            pdTRUE,
            pdFALSE,
            xTicksToWait );

    if (uxBits & EV_READY) {
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <xMBPortEventGet+0x34>
        *eEvent = EV_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e019      	b.n	8006f1c <xMBPortEventGet+0x68>
    }else if (uxBits &EV_FRAME_RECEIVED) {
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <xMBPortEventGet+0x46>
        *eEvent = EV_FRAME_RECEIVED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e010      	b.n	8006f1c <xMBPortEventGet+0x68>
    }else if (uxBits & EV_EXECUTE){
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <xMBPortEventGet+0x58>
        *eEvent = EV_EXECUTE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2204      	movs	r2, #4
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	e007      	b.n	8006f1c <xMBPortEventGet+0x68>
    }else if (uxBits & EV_FRAME_SENT) {
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f003 0308 	and.w	r3, r3, #8
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <xMBPortEventGet+0x68>
        *eEvent = EV_FRAME_SENT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2208      	movs	r2, #8
 8006f1a:	701a      	strb	r2, [r3, #0]
    }else {

    }
    
    return TRUE;
 8006f1c:	2301      	movs	r3, #1
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20004758 	.word	0x20004758

08006f2c <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart2;
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	4603      	mov	r3, r0
 8006f34:	460a      	mov	r2, r1
 8006f36:	71fb      	strb	r3, [r7, #7]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d008      	beq.n	8006f54 <vMBPortSerialEnable+0x28>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8006f42:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <vMBPortSerialEnable+0x6c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <vMBPortSerialEnable+0x6c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0220 	orr.w	r2, r2, #32
 8006f50:	60da      	str	r2, [r3, #12]
 8006f52:	e007      	b.n	8006f64 <vMBPortSerialEnable+0x38>
  } else {    
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <vMBPortSerialEnable+0x6c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	; (8006f98 <vMBPortSerialEnable+0x6c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0220 	bic.w	r2, r2, #32
 8006f62:	60da      	str	r2, [r3, #12]
  }
  
  if (xTxEnable) {    
 8006f64:	79bb      	ldrb	r3, [r7, #6]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <vMBPortSerialEnable+0x50>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <vMBPortSerialEnable+0x6c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <vMBPortSerialEnable+0x6c>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f78:	60da      	str	r2, [r3, #12]
  } else {
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
  }  
}
 8006f7a:	e007      	b.n	8006f8c <vMBPortSerialEnable+0x60>
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8006f7c:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <vMBPortSerialEnable+0x6c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <vMBPortSerialEnable+0x6c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8a:	60da      	str	r2, [r3, #12]
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	2000480c 	.word	0x2000480c

08006f9c <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6039      	str	r1, [r7, #0]
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4603      	mov	r3, r0
 8006faa:	71fb      	strb	r3, [r7, #7]
 8006fac:	460b      	mov	r3, r1
 8006fae:	71bb      	strb	r3, [r7, #6]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	717b      	strb	r3, [r7, #5]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8006fb4:	2301      	movs	r3, #1
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
	...

08006fc4 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10));
 8006fce:	1df9      	adds	r1, r7, #7
 8006fd0:	230a      	movs	r3, #10
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	4806      	ldr	r0, [pc, #24]	; (8006ff0 <xMBPortSerialPutByte+0x2c>)
 8006fd6:	f7fb fe22 	bl	8002c1e <HAL_UART_Transmit>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf0c      	ite	eq
 8006fe0:	2301      	moveq	r3, #1
 8006fe2:	2300      	movne	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2000480c 	.word	0x2000480c

08006ff4 <xMBPortSerialGetByte>:
}

/*TODO: can be replaced by Queue mechanism*/
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);  
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <xMBPortSerialGetByte+0x24>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	b2da      	uxtb	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8007008:	2301      	movs	r3, #1
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	2000480c 	.word	0x2000480c

0800701c <xMBPortTimersInit>:
volatile USHORT usT35TimeOut50us;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  /*Tick: 50uS */
  htim7.Instance = TIM7;
 8007026:	4b19      	ldr	r3, [pc, #100]	; (800708c <xMBPortTimersInit+0x70>)
 8007028:	4a19      	ldr	r2, [pc, #100]	; (8007090 <xMBPortTimersInit+0x74>)
 800702a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 800702c:	f7fb fa00 	bl	8002430 <HAL_RCC_GetPCLK1Freq>
 8007030:	4603      	mov	r3, r0
 8007032:	4a18      	ldr	r2, [pc, #96]	; (8007094 <xMBPortTimersInit+0x78>)
 8007034:	fba2 2303 	umull	r2, r3, r2, r3
 8007038:	0c9b      	lsrs	r3, r3, #18
 800703a:	3b01      	subs	r3, #1
 800703c:	4a13      	ldr	r2, [pc, #76]	; (800708c <xMBPortTimersInit+0x70>)
 800703e:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007040:	4b12      	ldr	r3, [pc, #72]	; (800708c <xMBPortTimersInit+0x70>)
 8007042:	2200      	movs	r2, #0
 8007044:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50 - 1;
 8007046:	4b11      	ldr	r3, [pc, #68]	; (800708c <xMBPortTimersInit+0x70>)
 8007048:	2231      	movs	r2, #49	; 0x31
 800704a:	60da      	str	r2, [r3, #12]
  
  usT35TimeOut50us = usTim1Timerout50us;
 800704c:	4a12      	ldr	r2, [pc, #72]	; (8007098 <xMBPortTimersInit+0x7c>)
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007052:	480e      	ldr	r0, [pc, #56]	; (800708c <xMBPortTimersInit+0x70>)
 8007054:	f7fb fa46 	bl	80024e4 <HAL_TIM_Base_Init>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <xMBPortTimersInit+0x46>
  {
    return FALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	e00f      	b.n	8007082 <xMBPortTimersInit+0x66>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007062:	2320      	movs	r3, #32
 8007064:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800706a:	f107 0308 	add.w	r3, r7, #8
 800706e:	4619      	mov	r1, r3
 8007070:	4806      	ldr	r0, [pc, #24]	; (800708c <xMBPortTimersInit+0x70>)
 8007072:	f7fb fcf7 	bl	8002a64 <HAL_TIMEx_MasterConfigSynchronization>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <xMBPortTimersInit+0x64>
  {
    return FALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	e000      	b.n	8007082 <xMBPortTimersInit+0x66>
  }
  
  return TRUE;
 8007080:	2301      	movs	r3, #1
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20004850 	.word	0x20004850
 8007090:	40001400 	.word	0x40001400
 8007094:	431bde83 	.word	0x431bde83
 8007098:	20004938 	.word	0x20004938

0800709c <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  HAL_TIM_Base_Start_IT(&htim7);
 80070a0:	4802      	ldr	r0, [pc, #8]	; (80070ac <vMBPortTimersEnable+0x10>)
 80070a2:	f7fb fa6f 	bl	8002584 <HAL_TIM_Base_Start_IT>
}
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20004850 	.word	0x20004850

080070b0 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim7);
 80070b4:	4802      	ldr	r0, [pc, #8]	; (80070c0 <vMBPortTimersDisable+0x10>)
 80070b6:	f7fb fad5 	bl	8002664 <HAL_TIM_Base_Stop_IT>
}
 80070ba:	bf00      	nop
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20004850 	.word	0x20004850

080070c4 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 80070d0:	23ff      	movs	r3, #255	; 0xff
 80070d2:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 80070d4:	23ff      	movs	r3, #255	; 0xff
 80070d6:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 80070d8:	e013      	b.n	8007102 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	4053      	eors	r3, r2
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 80070ea:	4a0f      	ldr	r2, [pc, #60]	; (8007128 <usMBCRC16+0x64>)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4413      	add	r3, r2
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	4053      	eors	r3, r2
 80070f6:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 80070f8:	4a0c      	ldr	r2, [pc, #48]	; (800712c <usMBCRC16+0x68>)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8007102:	887b      	ldrh	r3, [r7, #2]
 8007104:	1e5a      	subs	r2, r3, #1
 8007106:	807a      	strh	r2, [r7, #2]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e6      	bne.n	80070da <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	b21a      	sxth	r2, r3
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	b21b      	sxth	r3, r3
 8007116:	4313      	orrs	r3, r2
 8007118:	b21b      	sxth	r3, r3
 800711a:	b29b      	uxth	r3, r3
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	080088dc 	.word	0x080088dc
 800712c:	080089dc 	.word	0x080089dc

08007130 <eMBRTUInit>:

volatile uint8_t  txDmaDone = 0;
/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	603a      	str	r2, [r7, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	4603      	mov	r3, r0
 800713c:	71fb      	strb	r3, [r7, #7]
 800713e:	460b      	mov	r3, r1
 8007140:	71bb      	strb	r3, [r7, #6]
 8007142:	4613      	mov	r3, r2
 8007144:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007146:	2300      	movs	r3, #0
 8007148:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
 800714a:	f7ff f8cb 	bl	80062e4 <vPortEnterCritical>

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 800714e:	797b      	ldrb	r3, [r7, #5]
 8007150:	79b8      	ldrb	r0, [r7, #6]
 8007152:	2208      	movs	r2, #8
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	f7ff ff21 	bl	8006f9c <xMBPortSerialInit>
 800715a:	4603      	mov	r3, r0
 800715c:	2b01      	cmp	r3, #1
 800715e:	d002      	beq.n	8007166 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8007160:	2303      	movs	r3, #3
 8007162:	73fb      	strb	r3, [r7, #15]
 8007164:	e016      	b.n	8007194 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 800716c:	d902      	bls.n	8007174 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 800716e:	2323      	movs	r3, #35	; 0x23
 8007170:	60bb      	str	r3, [r7, #8]
 8007172:	e005      	b.n	8007180 <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	005b      	lsls	r3, r3, #1
 8007178:	4a0a      	ldr	r2, [pc, #40]	; (80071a4 <eMBRTUInit+0x74>)
 800717a:	fbb2 f3f3 	udiv	r3, r2, r3
 800717e:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	b29b      	uxth	r3, r3
 8007184:	4618      	mov	r0, r3
 8007186:	f7ff ff49 	bl	800701c <xMBPortTimersInit>
 800718a:	4603      	mov	r3, r0
 800718c:	2b01      	cmp	r3, #1
 800718e:	d001      	beq.n	8007194 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8007190:	2303      	movs	r3, #3
 8007192:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8007194:	f7ff f8d6 	bl	8006344 <vPortExitCritical>

    return eStatus;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	00177fa0 	.word	0x00177fa0

080071a8 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80071ac:	f7ff f89a 	bl	80062e4 <vPortEnterCritical>
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <eMBRTUStart+0x24>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 80071b6:	2100      	movs	r1, #0
 80071b8:	2001      	movs	r0, #1
 80071ba:	f7ff feb7 	bl	8006f2c <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 80071be:	f7ff ff6d 	bl	800709c <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
 80071c2:	f7ff f8bf 	bl	8006344 <vPortExitCritical>
}
 80071c6:	bf00      	nop
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	2000477d 	.word	0x2000477d

080071d0 <eMBRTUStop>:

void
eMBRTUStop( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 80071d4:	f7ff f886 	bl	80062e4 <vPortEnterCritical>
    vMBPortSerialEnable( FALSE, FALSE );
 80071d8:	2100      	movs	r1, #0
 80071da:	2000      	movs	r0, #0
 80071dc:	f7ff fea6 	bl	8006f2c <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 80071e0:	f7ff ff66 	bl	80070b0 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 80071e4:	f7ff f8ae 	bl	8006344 <vPortExitCritical>
}
 80071e8:	bf00      	nop
 80071ea:	bd80      	pop	{r7, pc}

080071ec <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]
	
	
	 (void)(xFrameReceived);
	

    ENTER_CRITICAL_SECTION(  );
 8007200:	f7ff f870 	bl	80062e4 <vPortEnterCritical>
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8007204:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <eMBRTUReceive+0x84>)
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	2bff      	cmp	r3, #255	; 0xff
 800720c:	d905      	bls.n	800721a <eMBRTUReceive+0x2e>
 800720e:	4b19      	ldr	r3, [pc, #100]	; (8007274 <eMBRTUReceive+0x88>)
 8007210:	4a19      	ldr	r2, [pc, #100]	; (8007278 <eMBRTUReceive+0x8c>)
 8007212:	21a3      	movs	r1, #163	; 0xa3
 8007214:	4819      	ldr	r0, [pc, #100]	; (800727c <eMBRTUReceive+0x90>)
 8007216:	f000 fa35 	bl	8007684 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 800721a:	4b15      	ldr	r3, [pc, #84]	; (8007270 <eMBRTUReceive+0x84>)
 800721c:	881b      	ldrh	r3, [r3, #0]
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b03      	cmp	r3, #3
 8007222:	d91b      	bls.n	800725c <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8007224:	4b12      	ldr	r3, [pc, #72]	; (8007270 <eMBRTUReceive+0x84>)
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	4814      	ldr	r0, [pc, #80]	; (8007280 <eMBRTUReceive+0x94>)
 800722e:	f7ff ff49 	bl	80070c4 <usMBCRC16>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d111      	bne.n	800725c <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8007238:	4b11      	ldr	r3, [pc, #68]	; (8007280 <eMBRTUReceive+0x94>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8007242:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <eMBRTUReceive+0x84>)
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	3b03      	subs	r3, #3
 800724a:	b29a      	uxth	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4a0c      	ldr	r2, [pc, #48]	; (8007284 <eMBRTUReceive+0x98>)
 8007254:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8007256:	2301      	movs	r3, #1
 8007258:	75bb      	strb	r3, [r7, #22]
 800725a:	e001      	b.n	8007260 <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 800725c:	2305      	movs	r3, #5
 800725e:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8007260:	f7ff f870 	bl	8006344 <vPortExitCritical>
    return eStatus;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20004786 	.word	0x20004786
 8007274:	080087d4 	.word	0x080087d4
 8007278:	08008adc 	.word	0x08008adc
 800727c:	080087fc 	.word	0x080087fc
 8007280:	2000493c 	.word	0x2000493c
 8007284:	2000493d 	.word	0x2000493d

08007288 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	6039      	str	r1, [r7, #0]
 8007292:	71fb      	strb	r3, [r7, #7]
 8007294:	4613      	mov	r3, r2
 8007296:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007298:	2300      	movs	r3, #0
 800729a:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
 800729c:	f7ff f822 	bl	80062e4 <vPortEnterCritical>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 80072a0:	4b26      	ldr	r3, [pc, #152]	; (800733c <eMBRTUSend+0xb4>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d13f      	bne.n	800732a <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	4a24      	ldr	r2, [pc, #144]	; (8007340 <eMBRTUSend+0xb8>)
 80072b0:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 80072b2:	4b24      	ldr	r3, [pc, #144]	; (8007344 <eMBRTUSend+0xbc>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 80072b8:	4b21      	ldr	r3, [pc, #132]	; (8007340 <eMBRTUSend+0xb8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	79fa      	ldrb	r2, [r7, #7]
 80072be:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 80072c0:	4b20      	ldr	r3, [pc, #128]	; (8007344 <eMBRTUSend+0xbc>)
 80072c2:	881b      	ldrh	r3, [r3, #0]
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	88bb      	ldrh	r3, [r7, #4]
 80072c8:	4413      	add	r3, r2
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <eMBRTUSend+0xbc>)
 80072ce:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 80072d0:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <eMBRTUSend+0xb8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a1b      	ldr	r2, [pc, #108]	; (8007344 <eMBRTUSend+0xbc>)
 80072d6:	8812      	ldrh	r2, [r2, #0]
 80072d8:	b292      	uxth	r2, r2
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff fef1 	bl	80070c4 <usMBCRC16>
 80072e2:	4603      	mov	r3, r0
 80072e4:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 80072e6:	4b17      	ldr	r3, [pc, #92]	; (8007344 <eMBRTUSend+0xbc>)
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	b291      	uxth	r1, r2
 80072f0:	4a14      	ldr	r2, [pc, #80]	; (8007344 <eMBRTUSend+0xbc>)
 80072f2:	8011      	strh	r1, [r2, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	89bb      	ldrh	r3, [r7, #12]
 80072f8:	b2d9      	uxtb	r1, r3
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <eMBRTUSend+0xc0>)
 80072fc:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 80072fe:	89bb      	ldrh	r3, [r7, #12]
 8007300:	0a1b      	lsrs	r3, r3, #8
 8007302:	b299      	uxth	r1, r3
 8007304:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <eMBRTUSend+0xbc>)
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	b290      	uxth	r0, r2
 800730e:	4a0d      	ldr	r2, [pc, #52]	; (8007344 <eMBRTUSend+0xbc>)
 8007310:	8010      	strh	r0, [r2, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	b2c9      	uxtb	r1, r1
 8007316:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <eMBRTUSend+0xc0>)
 8007318:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <eMBRTUSend+0xc4>)
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8007320:	2101      	movs	r1, #1
 8007322:	2000      	movs	r0, #0
 8007324:	f7ff fe02 	bl	8006f2c <vMBPortSerialEnable>
 8007328:	e001      	b.n	800732e <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 800732a:	2305      	movs	r3, #5
 800732c:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 800732e:	f7ff f809 	bl	8006344 <vPortExitCritical>
    return eStatus;
 8007332:	7bfb      	ldrb	r3, [r7, #15]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	2000477d 	.word	0x2000477d
 8007340:	20004780 	.word	0x20004780
 8007344:	20004784 	.word	0x20004784
 8007348:	2000493c 	.word	0x2000493c
 800734c:	2000477c 	.word	0x2000477c

08007350 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8007356:	2300      	movs	r3, #0
 8007358:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 800735a:	4b2a      	ldr	r3, [pc, #168]	; (8007404 <xMBRTUReceiveFSM+0xb4>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <xMBRTUReceiveFSM+0x20>
 8007364:	4b28      	ldr	r3, [pc, #160]	; (8007408 <xMBRTUReceiveFSM+0xb8>)
 8007366:	4a29      	ldr	r2, [pc, #164]	; (800740c <xMBRTUReceiveFSM+0xbc>)
 8007368:	21ed      	movs	r1, #237	; 0xed
 800736a:	4829      	ldr	r0, [pc, #164]	; (8007410 <xMBRTUReceiveFSM+0xc0>)
 800736c:	f000 f98a 	bl	8007684 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8007370:	1dbb      	adds	r3, r7, #6
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fe3e 	bl	8006ff4 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8007378:	4b26      	ldr	r3, [pc, #152]	; (8007414 <xMBRTUReceiveFSM+0xc4>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d83b      	bhi.n	80073fa <xMBRTUReceiveFSM+0xaa>
 8007382:	a201      	add	r2, pc, #4	; (adr r2, 8007388 <xMBRTUReceiveFSM+0x38>)
 8007384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007388:	08007399 	.word	0x08007399
 800738c:	080073a5 	.word	0x080073a5
 8007390:	080073cd 	.word	0x080073cd
 8007394:	0800739f 	.word	0x0800739f
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8007398:	f7ff fe80 	bl	800709c <vMBPortTimersEnable>
        break;
 800739c:	e02d      	b.n	80073fa <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 800739e:	f7ff fe7d 	bl	800709c <vMBPortTimersEnable>
        break;
 80073a2:	e02a      	b.n	80073fa <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 80073a4:	4b1c      	ldr	r3, [pc, #112]	; (8007418 <xMBRTUReceiveFSM+0xc8>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 80073aa:	4b1b      	ldr	r3, [pc, #108]	; (8007418 <xMBRTUReceiveFSM+0xc8>)
 80073ac:	881b      	ldrh	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	b291      	uxth	r1, r2
 80073b4:	4a18      	ldr	r2, [pc, #96]	; (8007418 <xMBRTUReceiveFSM+0xc8>)
 80073b6:	8011      	strh	r1, [r2, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	79b9      	ldrb	r1, [r7, #6]
 80073bc:	4b17      	ldr	r3, [pc, #92]	; (800741c <xMBRTUReceiveFSM+0xcc>)
 80073be:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 80073c0:	4b14      	ldr	r3, [pc, #80]	; (8007414 <xMBRTUReceiveFSM+0xc4>)
 80073c2:	2202      	movs	r2, #2
 80073c4:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 80073c6:	f7ff fe69 	bl	800709c <vMBPortTimersEnable>
        break;
 80073ca:	e016      	b.n	80073fa <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 80073cc:	4b12      	ldr	r3, [pc, #72]	; (8007418 <xMBRTUReceiveFSM+0xc8>)
 80073ce:	881b      	ldrh	r3, [r3, #0]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	2bff      	cmp	r3, #255	; 0xff
 80073d4:	d80b      	bhi.n	80073ee <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 80073d6:	4b10      	ldr	r3, [pc, #64]	; (8007418 <xMBRTUReceiveFSM+0xc8>)
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	b291      	uxth	r1, r2
 80073e0:	4a0d      	ldr	r2, [pc, #52]	; (8007418 <xMBRTUReceiveFSM+0xc8>)
 80073e2:	8011      	strh	r1, [r2, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	79b9      	ldrb	r1, [r7, #6]
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <xMBRTUReceiveFSM+0xcc>)
 80073ea:	5499      	strb	r1, [r3, r2]
 80073ec:	e002      	b.n	80073f4 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 80073ee:	4b09      	ldr	r3, [pc, #36]	; (8007414 <xMBRTUReceiveFSM+0xc4>)
 80073f0:	2203      	movs	r2, #3
 80073f2:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 80073f4:	f7ff fe52 	bl	800709c <vMBPortTimersEnable>
        break;
 80073f8:	bf00      	nop
    }
    return xTaskNeedSwitch;
 80073fa:	79fb      	ldrb	r3, [r7, #7]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	2000477c 	.word	0x2000477c
 8007408:	08008820 	.word	0x08008820
 800740c:	08008aec 	.word	0x08008aec
 8007410:	080087fc 	.word	0x080087fc
 8007414:	2000477d 	.word	0x2000477d
 8007418:	20004786 	.word	0x20004786
 800741c:	2000493c 	.word	0x2000493c

08007420 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8007426:	2300      	movs	r3, #0
 8007428:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 800742a:	4b22      	ldr	r3, [pc, #136]	; (80074b4 <xMBRTUTransmitFSM+0x94>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b01      	cmp	r3, #1
 8007432:	d006      	beq.n	8007442 <xMBRTUTransmitFSM+0x22>
 8007434:	4b20      	ldr	r3, [pc, #128]	; (80074b8 <xMBRTUTransmitFSM+0x98>)
 8007436:	4a21      	ldr	r2, [pc, #132]	; (80074bc <xMBRTUTransmitFSM+0x9c>)
 8007438:	f44f 7194 	mov.w	r1, #296	; 0x128
 800743c:	4820      	ldr	r0, [pc, #128]	; (80074c0 <xMBRTUTransmitFSM+0xa0>)
 800743e:	f000 f921 	bl	8007684 <__assert_func>

    switch ( eSndState )
 8007442:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <xMBRTUTransmitFSM+0xa4>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <xMBRTUTransmitFSM+0x32>
 800744c:	2b01      	cmp	r3, #1
 800744e:	d005      	beq.n	800745c <xMBRTUTransmitFSM+0x3c>
 8007450:	e02a      	b.n	80074a8 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8007452:	2100      	movs	r1, #0
 8007454:	2001      	movs	r0, #1
 8007456:	f7ff fd69 	bl	8006f2c <vMBPortSerialEnable>
        break;
 800745a:	e025      	b.n	80074a8 <xMBRTUTransmitFSM+0x88>
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
        eSndState = STATE_TX_IDLE;     
#else 
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 800745c:	4b1a      	ldr	r3, [pc, #104]	; (80074c8 <xMBRTUTransmitFSM+0xa8>)
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d013      	beq.n	800748e <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8007466:	4b19      	ldr	r3, [pc, #100]	; (80074cc <xMBRTUTransmitFSM+0xac>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fda8 	bl	8006fc4 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8007474:	4b15      	ldr	r3, [pc, #84]	; (80074cc <xMBRTUTransmitFSM+0xac>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	4a14      	ldr	r2, [pc, #80]	; (80074cc <xMBRTUTransmitFSM+0xac>)
 800747c:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <xMBRTUTransmitFSM+0xa8>)
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <xMBRTUTransmitFSM+0xa8>)
 800748a:	801a      	strh	r2, [r3, #0]
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
#endif /* MB_RTU_USE_DMA */        
        break;
 800748c:	e00b      	b.n	80074a6 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 800748e:	2008      	movs	r0, #8
 8007490:	f7ff fcfc 	bl	8006e8c <xMBPortEventPost>
 8007494:	4603      	mov	r3, r0
 8007496:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8007498:	2100      	movs	r1, #0
 800749a:	2001      	movs	r0, #1
 800749c:	f7ff fd46 	bl	8006f2c <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 80074a0:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <xMBRTUTransmitFSM+0xa4>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
        break;
 80074a6:	bf00      	nop
    }

    return xNeedPoll;
 80074a8:	79fb      	ldrb	r3, [r7, #7]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	2000477d 	.word	0x2000477d
 80074b8:	0800883c 	.word	0x0800883c
 80074bc:	08008b00 	.word	0x08008b00
 80074c0:	080087fc 	.word	0x080087fc
 80074c4:	2000477c 	.word	0x2000477c
 80074c8:	20004784 	.word	0x20004784
 80074cc:	20004780 	.word	0x20004780

080074d0 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 80074da:	4b1c      	ldr	r3, [pc, #112]	; (800754c <xMBRTUTimerT35Expired+0x7c>)
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d028      	beq.n	8007536 <xMBRTUTimerT35Expired+0x66>
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	dc10      	bgt.n	800750a <xMBRTUTimerT35Expired+0x3a>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <xMBRTUTimerT35Expired+0x22>
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d006      	beq.n	80074fe <xMBRTUTimerT35Expired+0x2e>
 80074f0:	e00b      	b.n	800750a <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 80074f2:	2001      	movs	r0, #1
 80074f4:	f7ff fcca 	bl	8006e8c <xMBPortEventPost>
 80074f8:	4603      	mov	r3, r0
 80074fa:	71fb      	strb	r3, [r7, #7]
        break;
 80074fc:	e01c      	b.n	8007538 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 80074fe:	2002      	movs	r0, #2
 8007500:	f7ff fcc4 	bl	8006e8c <xMBPortEventPost>
 8007504:	4603      	mov	r3, r0
 8007506:	71fb      	strb	r3, [r7, #7]
        break;
 8007508:	e016      	b.n	8007538 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 800750a:	4b10      	ldr	r3, [pc, #64]	; (800754c <xMBRTUTimerT35Expired+0x7c>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	d011      	beq.n	8007538 <xMBRTUTimerT35Expired+0x68>
 8007514:	4b0d      	ldr	r3, [pc, #52]	; (800754c <xMBRTUTimerT35Expired+0x7c>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d00c      	beq.n	8007538 <xMBRTUTimerT35Expired+0x68>
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <xMBRTUTimerT35Expired+0x7c>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b03      	cmp	r3, #3
 8007526:	d007      	beq.n	8007538 <xMBRTUTimerT35Expired+0x68>
 8007528:	4b09      	ldr	r3, [pc, #36]	; (8007550 <xMBRTUTimerT35Expired+0x80>)
 800752a:	4a0a      	ldr	r2, [pc, #40]	; (8007554 <xMBRTUTimerT35Expired+0x84>)
 800752c:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007530:	4809      	ldr	r0, [pc, #36]	; (8007558 <xMBRTUTimerT35Expired+0x88>)
 8007532:	f000 f8a7 	bl	8007684 <__assert_func>
        break;
 8007536:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8007538:	f7ff fdba 	bl	80070b0 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 800753c:	4b03      	ldr	r3, [pc, #12]	; (800754c <xMBRTUTimerT35Expired+0x7c>)
 800753e:	2201      	movs	r2, #1
 8007540:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8007542:	79fb      	ldrb	r3, [r7, #7]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	2000477d 	.word	0x2000477d
 8007550:	08008858 	.word	0x08008858
 8007554:	08008b14 	.word	0x08008b14
 8007558:	080087fc 	.word	0x080087fc

0800755c <ModbusSlaveRTUTask>:

static USHORT usRegInputStart = REG_INPUT_START;
static USHORT usRegInputBuf[REG_INPUT_NREGS];

void ModbusSlaveRTUTask(void const * argument)
{ 
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af02      	add	r7, sp, #8
 8007562:	6078      	str	r0, [r7, #4]
  /* ABCDEF */
  usRegInputBuf[0] = 11;
 8007564:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <ModbusSlaveRTUTask+0x5c>)
 8007566:	220b      	movs	r2, #11
 8007568:	801a      	strh	r2, [r3, #0]
  usRegInputBuf[1] = 22;
 800756a:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <ModbusSlaveRTUTask+0x5c>)
 800756c:	2216      	movs	r2, #22
 800756e:	805a      	strh	r2, [r3, #2]
  usRegInputBuf[2] = 33;
 8007570:	4b11      	ldr	r3, [pc, #68]	; (80075b8 <ModbusSlaveRTUTask+0x5c>)
 8007572:	2221      	movs	r2, #33	; 0x21
 8007574:	809a      	strh	r2, [r3, #4]
  usRegInputBuf[3] = 44;
 8007576:	4b10      	ldr	r3, [pc, #64]	; (80075b8 <ModbusSlaveRTUTask+0x5c>)
 8007578:	222c      	movs	r2, #44	; 0x2c
 800757a:	80da      	strh	r2, [r3, #6]
  usRegInputBuf[4] = 55;
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <ModbusSlaveRTUTask+0x5c>)
 800757e:	2237      	movs	r2, #55	; 0x37
 8007580:	811a      	strh	r2, [r3, #8]
  usRegInputBuf[5] = 66;
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <ModbusSlaveRTUTask+0x5c>)
 8007584:	2242      	movs	r2, #66	; 0x42
 8007586:	815a      	strh	r2, [r3, #10]
  usRegInputBuf[6] = 77;
 8007588:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <ModbusSlaveRTUTask+0x5c>)
 800758a:	224d      	movs	r2, #77	; 0x4d
 800758c:	819a      	strh	r2, [r3, #12]
  usRegInputBuf[7] = 88;  
 800758e:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <ModbusSlaveRTUTask+0x5c>)
 8007590:	2258      	movs	r2, #88	; 0x58
 8007592:	81da      	strh	r2, [r3, #14]
  
  eMBErrorCode eStatus = eMBInit( MB_RTU, 1, 3, 19200, MB_PAR_NONE );
 8007594:	2300      	movs	r3, #0
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800759c:	2203      	movs	r2, #3
 800759e:	2101      	movs	r1, #1
 80075a0:	2000      	movs	r0, #0
 80075a2:	f7ff fb03 	bl	8006bac <eMBInit>
 80075a6:	4603      	mov	r3, r0
 80075a8:	73fb      	strb	r3, [r7, #15]
  eStatus = eMBEnable();
 80075aa:	f7ff fb7d 	bl	8006ca8 <eMBEnable>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
  
  while(1) {
    eMBPoll();           
 80075b2:	f7ff fb95 	bl	8006ce0 <eMBPoll>
 80075b6:	e7fc      	b.n	80075b2 <ModbusSlaveRTUTask+0x56>
 80075b8:	20004788 	.word	0x20004788

080075bc <eMBRegInputCB>:
  }
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	807b      	strh	r3, [r7, #2]
 80075c8:	4613      	mov	r3, r2
 80075ca:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 80075d0:	887b      	ldrh	r3, [r7, #2]
 80075d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d6:	d32e      	bcc.n	8007636 <eMBRegInputCB+0x7a>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 80075d8:	887a      	ldrh	r2, [r7, #2]
 80075da:	883b      	ldrh	r3, [r7, #0]
 80075dc:	4413      	add	r3, r2
 80075de:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 80075e2:	dc28      	bgt.n	8007636 <eMBRegInputCB+0x7a>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 80075e4:	887b      	ldrh	r3, [r7, #2]
 80075e6:	4a1a      	ldr	r2, [pc, #104]	; (8007650 <eMBRegInputCB+0x94>)
 80075e8:	8812      	ldrh	r2, [r2, #0]
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	60bb      	str	r3, [r7, #8]
        while( usNRegs > 0 )
 80075ee:	e019      	b.n	8007624 <eMBRegInputCB+0x68>
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 80075f0:	4a18      	ldr	r2, [pc, #96]	; (8007654 <eMBRegInputCB+0x98>)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075f8:	0a1b      	lsrs	r3, r3, #8
 80075fa:	b299      	uxth	r1, r3
            *pucRegBuffer++ =
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8007602:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8007604:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8007606:	4a13      	ldr	r2, [pc, #76]	; (8007654 <eMBRegInputCB+0x98>)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
            *pucRegBuffer++ =
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8007614:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8007616:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3301      	adds	r3, #1
 800761c:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 800761e:	883b      	ldrh	r3, [r7, #0]
 8007620:	3b01      	subs	r3, #1
 8007622:	803b      	strh	r3, [r7, #0]
        while( usNRegs > 0 )
 8007624:	883b      	ldrh	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e2      	bne.n	80075f0 <eMBRegInputCB+0x34>
        }
				
				HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800762a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800762e:	480a      	ldr	r0, [pc, #40]	; (8007658 <eMBRegInputCB+0x9c>)
 8007630:	f7fa fa97 	bl	8001b62 <HAL_GPIO_TogglePin>
 8007634:	e006      	b.n	8007644 <eMBRegInputCB+0x88>
    }
    else
    {
			  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8007636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800763a:	4807      	ldr	r0, [pc, #28]	; (8007658 <eMBRegInputCB+0x9c>)
 800763c:	f7fa fa91 	bl	8001b62 <HAL_GPIO_TogglePin>
        eStatus = MB_ENOREG;			
 8007640:	2301      	movs	r3, #1
 8007642:	73fb      	strb	r3, [r7, #15]
    }

    return eStatus;
 8007644:	7bfb      	ldrb	r3, [r7, #15]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000094 	.word	0x20000094
 8007654:	20004788 	.word	0x20004788
 8007658:	40020c00 	.word	0x40020c00

0800765c <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	4608      	mov	r0, r1
 8007666:	4611      	mov	r1, r2
 8007668:	461a      	mov	r2, r3
 800766a:	4603      	mov	r3, r0
 800766c:	817b      	strh	r3, [r7, #10]
 800766e:	460b      	mov	r3, r1
 8007670:	813b      	strh	r3, [r7, #8]
 8007672:	4613      	mov	r3, r2
 8007674:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 8007676:	2301      	movs	r3, #1
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <__assert_func>:
 8007684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007686:	4614      	mov	r4, r2
 8007688:	461a      	mov	r2, r3
 800768a:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <__assert_func+0x2c>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4605      	mov	r5, r0
 8007690:	68d8      	ldr	r0, [r3, #12]
 8007692:	b14c      	cbz	r4, 80076a8 <__assert_func+0x24>
 8007694:	4b07      	ldr	r3, [pc, #28]	; (80076b4 <__assert_func+0x30>)
 8007696:	9100      	str	r1, [sp, #0]
 8007698:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800769c:	4906      	ldr	r1, [pc, #24]	; (80076b8 <__assert_func+0x34>)
 800769e:	462b      	mov	r3, r5
 80076a0:	f000 f8ea 	bl	8007878 <fiprintf>
 80076a4:	f000 fe30 	bl	8008308 <abort>
 80076a8:	4b04      	ldr	r3, [pc, #16]	; (80076bc <__assert_func+0x38>)
 80076aa:	461c      	mov	r4, r3
 80076ac:	e7f3      	b.n	8007696 <__assert_func+0x12>
 80076ae:	bf00      	nop
 80076b0:	20000098 	.word	0x20000098
 80076b4:	08008b2a 	.word	0x08008b2a
 80076b8:	08008b37 	.word	0x08008b37
 80076bc:	08008b65 	.word	0x08008b65

080076c0 <__errno>:
 80076c0:	4b01      	ldr	r3, [pc, #4]	; (80076c8 <__errno+0x8>)
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20000098 	.word	0x20000098

080076cc <std>:
 80076cc:	2300      	movs	r3, #0
 80076ce:	b510      	push	{r4, lr}
 80076d0:	4604      	mov	r4, r0
 80076d2:	e9c0 3300 	strd	r3, r3, [r0]
 80076d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076da:	6083      	str	r3, [r0, #8]
 80076dc:	8181      	strh	r1, [r0, #12]
 80076de:	6643      	str	r3, [r0, #100]	; 0x64
 80076e0:	81c2      	strh	r2, [r0, #14]
 80076e2:	6183      	str	r3, [r0, #24]
 80076e4:	4619      	mov	r1, r3
 80076e6:	2208      	movs	r2, #8
 80076e8:	305c      	adds	r0, #92	; 0x5c
 80076ea:	f000 f92c 	bl	8007946 <memset>
 80076ee:	4b05      	ldr	r3, [pc, #20]	; (8007704 <std+0x38>)
 80076f0:	6263      	str	r3, [r4, #36]	; 0x24
 80076f2:	4b05      	ldr	r3, [pc, #20]	; (8007708 <std+0x3c>)
 80076f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <std+0x40>)
 80076f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076fa:	4b05      	ldr	r3, [pc, #20]	; (8007710 <std+0x44>)
 80076fc:	6224      	str	r4, [r4, #32]
 80076fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007700:	bd10      	pop	{r4, pc}
 8007702:	bf00      	nop
 8007704:	080080dd 	.word	0x080080dd
 8007708:	080080ff 	.word	0x080080ff
 800770c:	08008137 	.word	0x08008137
 8007710:	0800815b 	.word	0x0800815b

08007714 <_cleanup_r>:
 8007714:	4901      	ldr	r1, [pc, #4]	; (800771c <_cleanup_r+0x8>)
 8007716:	f000 b8c1 	b.w	800789c <_fwalk_reent>
 800771a:	bf00      	nop
 800771c:	08008445 	.word	0x08008445

08007720 <__sfmoreglue>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	1e4a      	subs	r2, r1, #1
 8007724:	2568      	movs	r5, #104	; 0x68
 8007726:	4355      	muls	r5, r2
 8007728:	460e      	mov	r6, r1
 800772a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800772e:	f000 f913 	bl	8007958 <_malloc_r>
 8007732:	4604      	mov	r4, r0
 8007734:	b140      	cbz	r0, 8007748 <__sfmoreglue+0x28>
 8007736:	2100      	movs	r1, #0
 8007738:	e9c0 1600 	strd	r1, r6, [r0]
 800773c:	300c      	adds	r0, #12
 800773e:	60a0      	str	r0, [r4, #8]
 8007740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007744:	f000 f8ff 	bl	8007946 <memset>
 8007748:	4620      	mov	r0, r4
 800774a:	bd70      	pop	{r4, r5, r6, pc}

0800774c <__sfp_lock_acquire>:
 800774c:	4801      	ldr	r0, [pc, #4]	; (8007754 <__sfp_lock_acquire+0x8>)
 800774e:	f000 b8ea 	b.w	8007926 <__retarget_lock_acquire_recursive>
 8007752:	bf00      	nop
 8007754:	20004a44 	.word	0x20004a44

08007758 <__sfp_lock_release>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__sfp_lock_release+0x8>)
 800775a:	f000 b8e5 	b.w	8007928 <__retarget_lock_release_recursive>
 800775e:	bf00      	nop
 8007760:	20004a44 	.word	0x20004a44

08007764 <__sinit_lock_acquire>:
 8007764:	4801      	ldr	r0, [pc, #4]	; (800776c <__sinit_lock_acquire+0x8>)
 8007766:	f000 b8de 	b.w	8007926 <__retarget_lock_acquire_recursive>
 800776a:	bf00      	nop
 800776c:	20004a3f 	.word	0x20004a3f

08007770 <__sinit_lock_release>:
 8007770:	4801      	ldr	r0, [pc, #4]	; (8007778 <__sinit_lock_release+0x8>)
 8007772:	f000 b8d9 	b.w	8007928 <__retarget_lock_release_recursive>
 8007776:	bf00      	nop
 8007778:	20004a3f 	.word	0x20004a3f

0800777c <__sinit>:
 800777c:	b510      	push	{r4, lr}
 800777e:	4604      	mov	r4, r0
 8007780:	f7ff fff0 	bl	8007764 <__sinit_lock_acquire>
 8007784:	69a3      	ldr	r3, [r4, #24]
 8007786:	b11b      	cbz	r3, 8007790 <__sinit+0x14>
 8007788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778c:	f7ff bff0 	b.w	8007770 <__sinit_lock_release>
 8007790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007794:	6523      	str	r3, [r4, #80]	; 0x50
 8007796:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <__sinit+0x68>)
 8007798:	4a13      	ldr	r2, [pc, #76]	; (80077e8 <__sinit+0x6c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	62a2      	str	r2, [r4, #40]	; 0x28
 800779e:	42a3      	cmp	r3, r4
 80077a0:	bf04      	itt	eq
 80077a2:	2301      	moveq	r3, #1
 80077a4:	61a3      	streq	r3, [r4, #24]
 80077a6:	4620      	mov	r0, r4
 80077a8:	f000 f820 	bl	80077ec <__sfp>
 80077ac:	6060      	str	r0, [r4, #4]
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 f81c 	bl	80077ec <__sfp>
 80077b4:	60a0      	str	r0, [r4, #8]
 80077b6:	4620      	mov	r0, r4
 80077b8:	f000 f818 	bl	80077ec <__sfp>
 80077bc:	2200      	movs	r2, #0
 80077be:	60e0      	str	r0, [r4, #12]
 80077c0:	2104      	movs	r1, #4
 80077c2:	6860      	ldr	r0, [r4, #4]
 80077c4:	f7ff ff82 	bl	80076cc <std>
 80077c8:	68a0      	ldr	r0, [r4, #8]
 80077ca:	2201      	movs	r2, #1
 80077cc:	2109      	movs	r1, #9
 80077ce:	f7ff ff7d 	bl	80076cc <std>
 80077d2:	68e0      	ldr	r0, [r4, #12]
 80077d4:	2202      	movs	r2, #2
 80077d6:	2112      	movs	r1, #18
 80077d8:	f7ff ff78 	bl	80076cc <std>
 80077dc:	2301      	movs	r3, #1
 80077de:	61a3      	str	r3, [r4, #24]
 80077e0:	e7d2      	b.n	8007788 <__sinit+0xc>
 80077e2:	bf00      	nop
 80077e4:	08008bc8 	.word	0x08008bc8
 80077e8:	08007715 	.word	0x08007715

080077ec <__sfp>:
 80077ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ee:	4607      	mov	r7, r0
 80077f0:	f7ff ffac 	bl	800774c <__sfp_lock_acquire>
 80077f4:	4b1e      	ldr	r3, [pc, #120]	; (8007870 <__sfp+0x84>)
 80077f6:	681e      	ldr	r6, [r3, #0]
 80077f8:	69b3      	ldr	r3, [r6, #24]
 80077fa:	b913      	cbnz	r3, 8007802 <__sfp+0x16>
 80077fc:	4630      	mov	r0, r6
 80077fe:	f7ff ffbd 	bl	800777c <__sinit>
 8007802:	3648      	adds	r6, #72	; 0x48
 8007804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007808:	3b01      	subs	r3, #1
 800780a:	d503      	bpl.n	8007814 <__sfp+0x28>
 800780c:	6833      	ldr	r3, [r6, #0]
 800780e:	b30b      	cbz	r3, 8007854 <__sfp+0x68>
 8007810:	6836      	ldr	r6, [r6, #0]
 8007812:	e7f7      	b.n	8007804 <__sfp+0x18>
 8007814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007818:	b9d5      	cbnz	r5, 8007850 <__sfp+0x64>
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <__sfp+0x88>)
 800781c:	60e3      	str	r3, [r4, #12]
 800781e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007822:	6665      	str	r5, [r4, #100]	; 0x64
 8007824:	f000 f87e 	bl	8007924 <__retarget_lock_init_recursive>
 8007828:	f7ff ff96 	bl	8007758 <__sfp_lock_release>
 800782c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007834:	6025      	str	r5, [r4, #0]
 8007836:	61a5      	str	r5, [r4, #24]
 8007838:	2208      	movs	r2, #8
 800783a:	4629      	mov	r1, r5
 800783c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007840:	f000 f881 	bl	8007946 <memset>
 8007844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800784c:	4620      	mov	r0, r4
 800784e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007850:	3468      	adds	r4, #104	; 0x68
 8007852:	e7d9      	b.n	8007808 <__sfp+0x1c>
 8007854:	2104      	movs	r1, #4
 8007856:	4638      	mov	r0, r7
 8007858:	f7ff ff62 	bl	8007720 <__sfmoreglue>
 800785c:	4604      	mov	r4, r0
 800785e:	6030      	str	r0, [r6, #0]
 8007860:	2800      	cmp	r0, #0
 8007862:	d1d5      	bne.n	8007810 <__sfp+0x24>
 8007864:	f7ff ff78 	bl	8007758 <__sfp_lock_release>
 8007868:	230c      	movs	r3, #12
 800786a:	603b      	str	r3, [r7, #0]
 800786c:	e7ee      	b.n	800784c <__sfp+0x60>
 800786e:	bf00      	nop
 8007870:	08008bc8 	.word	0x08008bc8
 8007874:	ffff0001 	.word	0xffff0001

08007878 <fiprintf>:
 8007878:	b40e      	push	{r1, r2, r3}
 800787a:	b503      	push	{r0, r1, lr}
 800787c:	4601      	mov	r1, r0
 800787e:	ab03      	add	r3, sp, #12
 8007880:	4805      	ldr	r0, [pc, #20]	; (8007898 <fiprintf+0x20>)
 8007882:	f853 2b04 	ldr.w	r2, [r3], #4
 8007886:	6800      	ldr	r0, [r0, #0]
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	f000 f8e9 	bl	8007a60 <_vfiprintf_r>
 800788e:	b002      	add	sp, #8
 8007890:	f85d eb04 	ldr.w	lr, [sp], #4
 8007894:	b003      	add	sp, #12
 8007896:	4770      	bx	lr
 8007898:	20000098 	.word	0x20000098

0800789c <_fwalk_reent>:
 800789c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	4606      	mov	r6, r0
 80078a2:	4688      	mov	r8, r1
 80078a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078a8:	2700      	movs	r7, #0
 80078aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ae:	f1b9 0901 	subs.w	r9, r9, #1
 80078b2:	d505      	bpl.n	80078c0 <_fwalk_reent+0x24>
 80078b4:	6824      	ldr	r4, [r4, #0]
 80078b6:	2c00      	cmp	r4, #0
 80078b8:	d1f7      	bne.n	80078aa <_fwalk_reent+0xe>
 80078ba:	4638      	mov	r0, r7
 80078bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c0:	89ab      	ldrh	r3, [r5, #12]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d907      	bls.n	80078d6 <_fwalk_reent+0x3a>
 80078c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078ca:	3301      	adds	r3, #1
 80078cc:	d003      	beq.n	80078d6 <_fwalk_reent+0x3a>
 80078ce:	4629      	mov	r1, r5
 80078d0:	4630      	mov	r0, r6
 80078d2:	47c0      	blx	r8
 80078d4:	4307      	orrs	r7, r0
 80078d6:	3568      	adds	r5, #104	; 0x68
 80078d8:	e7e9      	b.n	80078ae <_fwalk_reent+0x12>
	...

080078dc <__libc_init_array>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4d0d      	ldr	r5, [pc, #52]	; (8007914 <__libc_init_array+0x38>)
 80078e0:	4c0d      	ldr	r4, [pc, #52]	; (8007918 <__libc_init_array+0x3c>)
 80078e2:	1b64      	subs	r4, r4, r5
 80078e4:	10a4      	asrs	r4, r4, #2
 80078e6:	2600      	movs	r6, #0
 80078e8:	42a6      	cmp	r6, r4
 80078ea:	d109      	bne.n	8007900 <__libc_init_array+0x24>
 80078ec:	4d0b      	ldr	r5, [pc, #44]	; (800791c <__libc_init_array+0x40>)
 80078ee:	4c0c      	ldr	r4, [pc, #48]	; (8007920 <__libc_init_array+0x44>)
 80078f0:	f000 ff2e 	bl	8008750 <_init>
 80078f4:	1b64      	subs	r4, r4, r5
 80078f6:	10a4      	asrs	r4, r4, #2
 80078f8:	2600      	movs	r6, #0
 80078fa:	42a6      	cmp	r6, r4
 80078fc:	d105      	bne.n	800790a <__libc_init_array+0x2e>
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	f855 3b04 	ldr.w	r3, [r5], #4
 8007904:	4798      	blx	r3
 8007906:	3601      	adds	r6, #1
 8007908:	e7ee      	b.n	80078e8 <__libc_init_array+0xc>
 800790a:	f855 3b04 	ldr.w	r3, [r5], #4
 800790e:	4798      	blx	r3
 8007910:	3601      	adds	r6, #1
 8007912:	e7f2      	b.n	80078fa <__libc_init_array+0x1e>
 8007914:	08008c08 	.word	0x08008c08
 8007918:	08008c08 	.word	0x08008c08
 800791c:	08008c08 	.word	0x08008c08
 8007920:	08008c0c 	.word	0x08008c0c

08007924 <__retarget_lock_init_recursive>:
 8007924:	4770      	bx	lr

08007926 <__retarget_lock_acquire_recursive>:
 8007926:	4770      	bx	lr

08007928 <__retarget_lock_release_recursive>:
 8007928:	4770      	bx	lr

0800792a <memcpy>:
 800792a:	440a      	add	r2, r1
 800792c:	4291      	cmp	r1, r2
 800792e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007932:	d100      	bne.n	8007936 <memcpy+0xc>
 8007934:	4770      	bx	lr
 8007936:	b510      	push	{r4, lr}
 8007938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800793c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007940:	4291      	cmp	r1, r2
 8007942:	d1f9      	bne.n	8007938 <memcpy+0xe>
 8007944:	bd10      	pop	{r4, pc}

08007946 <memset>:
 8007946:	4402      	add	r2, r0
 8007948:	4603      	mov	r3, r0
 800794a:	4293      	cmp	r3, r2
 800794c:	d100      	bne.n	8007950 <memset+0xa>
 800794e:	4770      	bx	lr
 8007950:	f803 1b01 	strb.w	r1, [r3], #1
 8007954:	e7f9      	b.n	800794a <memset+0x4>
	...

08007958 <_malloc_r>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	1ccd      	adds	r5, r1, #3
 800795c:	f025 0503 	bic.w	r5, r5, #3
 8007960:	3508      	adds	r5, #8
 8007962:	2d0c      	cmp	r5, #12
 8007964:	bf38      	it	cc
 8007966:	250c      	movcc	r5, #12
 8007968:	2d00      	cmp	r5, #0
 800796a:	4606      	mov	r6, r0
 800796c:	db01      	blt.n	8007972 <_malloc_r+0x1a>
 800796e:	42a9      	cmp	r1, r5
 8007970:	d903      	bls.n	800797a <_malloc_r+0x22>
 8007972:	230c      	movs	r3, #12
 8007974:	6033      	str	r3, [r6, #0]
 8007976:	2000      	movs	r0, #0
 8007978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797a:	f000 fe15 	bl	80085a8 <__malloc_lock>
 800797e:	4921      	ldr	r1, [pc, #132]	; (8007a04 <_malloc_r+0xac>)
 8007980:	680a      	ldr	r2, [r1, #0]
 8007982:	4614      	mov	r4, r2
 8007984:	b99c      	cbnz	r4, 80079ae <_malloc_r+0x56>
 8007986:	4f20      	ldr	r7, [pc, #128]	; (8007a08 <_malloc_r+0xb0>)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	b923      	cbnz	r3, 8007996 <_malloc_r+0x3e>
 800798c:	4621      	mov	r1, r4
 800798e:	4630      	mov	r0, r6
 8007990:	f000 fb94 	bl	80080bc <_sbrk_r>
 8007994:	6038      	str	r0, [r7, #0]
 8007996:	4629      	mov	r1, r5
 8007998:	4630      	mov	r0, r6
 800799a:	f000 fb8f 	bl	80080bc <_sbrk_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d123      	bne.n	80079ea <_malloc_r+0x92>
 80079a2:	230c      	movs	r3, #12
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 fe04 	bl	80085b4 <__malloc_unlock>
 80079ac:	e7e3      	b.n	8007976 <_malloc_r+0x1e>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	1b5b      	subs	r3, r3, r5
 80079b2:	d417      	bmi.n	80079e4 <_malloc_r+0x8c>
 80079b4:	2b0b      	cmp	r3, #11
 80079b6:	d903      	bls.n	80079c0 <_malloc_r+0x68>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	441c      	add	r4, r3
 80079bc:	6025      	str	r5, [r4, #0]
 80079be:	e004      	b.n	80079ca <_malloc_r+0x72>
 80079c0:	6863      	ldr	r3, [r4, #4]
 80079c2:	42a2      	cmp	r2, r4
 80079c4:	bf0c      	ite	eq
 80079c6:	600b      	streq	r3, [r1, #0]
 80079c8:	6053      	strne	r3, [r2, #4]
 80079ca:	4630      	mov	r0, r6
 80079cc:	f000 fdf2 	bl	80085b4 <__malloc_unlock>
 80079d0:	f104 000b 	add.w	r0, r4, #11
 80079d4:	1d23      	adds	r3, r4, #4
 80079d6:	f020 0007 	bic.w	r0, r0, #7
 80079da:	1ac2      	subs	r2, r0, r3
 80079dc:	d0cc      	beq.n	8007978 <_malloc_r+0x20>
 80079de:	1a1b      	subs	r3, r3, r0
 80079e0:	50a3      	str	r3, [r4, r2]
 80079e2:	e7c9      	b.n	8007978 <_malloc_r+0x20>
 80079e4:	4622      	mov	r2, r4
 80079e6:	6864      	ldr	r4, [r4, #4]
 80079e8:	e7cc      	b.n	8007984 <_malloc_r+0x2c>
 80079ea:	1cc4      	adds	r4, r0, #3
 80079ec:	f024 0403 	bic.w	r4, r4, #3
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d0e3      	beq.n	80079bc <_malloc_r+0x64>
 80079f4:	1a21      	subs	r1, r4, r0
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 fb60 	bl	80080bc <_sbrk_r>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d1dd      	bne.n	80079bc <_malloc_r+0x64>
 8007a00:	e7cf      	b.n	80079a2 <_malloc_r+0x4a>
 8007a02:	bf00      	nop
 8007a04:	20004798 	.word	0x20004798
 8007a08:	2000479c 	.word	0x2000479c

08007a0c <__sfputc_r>:
 8007a0c:	6893      	ldr	r3, [r2, #8]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	b410      	push	{r4}
 8007a14:	6093      	str	r3, [r2, #8]
 8007a16:	da08      	bge.n	8007a2a <__sfputc_r+0x1e>
 8007a18:	6994      	ldr	r4, [r2, #24]
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	db01      	blt.n	8007a22 <__sfputc_r+0x16>
 8007a1e:	290a      	cmp	r1, #10
 8007a20:	d103      	bne.n	8007a2a <__sfputc_r+0x1e>
 8007a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a26:	f000 bb9d 	b.w	8008164 <__swbuf_r>
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	1c58      	adds	r0, r3, #1
 8007a2e:	6010      	str	r0, [r2, #0]
 8007a30:	7019      	strb	r1, [r3, #0]
 8007a32:	4608      	mov	r0, r1
 8007a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <__sfputs_r>:
 8007a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	4614      	mov	r4, r2
 8007a42:	18d5      	adds	r5, r2, r3
 8007a44:	42ac      	cmp	r4, r5
 8007a46:	d101      	bne.n	8007a4c <__sfputs_r+0x12>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e007      	b.n	8007a5c <__sfputs_r+0x22>
 8007a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a50:	463a      	mov	r2, r7
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff ffda 	bl	8007a0c <__sfputc_r>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d1f3      	bne.n	8007a44 <__sfputs_r+0xa>
 8007a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a60 <_vfiprintf_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460d      	mov	r5, r1
 8007a66:	b09d      	sub	sp, #116	; 0x74
 8007a68:	4614      	mov	r4, r2
 8007a6a:	4698      	mov	r8, r3
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	b118      	cbz	r0, 8007a78 <_vfiprintf_r+0x18>
 8007a70:	6983      	ldr	r3, [r0, #24]
 8007a72:	b90b      	cbnz	r3, 8007a78 <_vfiprintf_r+0x18>
 8007a74:	f7ff fe82 	bl	800777c <__sinit>
 8007a78:	4b89      	ldr	r3, [pc, #548]	; (8007ca0 <_vfiprintf_r+0x240>)
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	d11b      	bne.n	8007ab6 <_vfiprintf_r+0x56>
 8007a7e:	6875      	ldr	r5, [r6, #4]
 8007a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	d405      	bmi.n	8007a92 <_vfiprintf_r+0x32>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_vfiprintf_r+0x32>
 8007a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a8e:	f7ff ff4a 	bl	8007926 <__retarget_lock_acquire_recursive>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	071b      	lsls	r3, r3, #28
 8007a96:	d501      	bpl.n	8007a9c <_vfiprintf_r+0x3c>
 8007a98:	692b      	ldr	r3, [r5, #16]
 8007a9a:	b9eb      	cbnz	r3, 8007ad8 <_vfiprintf_r+0x78>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f000 fbc4 	bl	800822c <__swsetup_r>
 8007aa4:	b1c0      	cbz	r0, 8007ad8 <_vfiprintf_r+0x78>
 8007aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aa8:	07dc      	lsls	r4, r3, #31
 8007aaa:	d50e      	bpl.n	8007aca <_vfiprintf_r+0x6a>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab0:	b01d      	add	sp, #116	; 0x74
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	4b7b      	ldr	r3, [pc, #492]	; (8007ca4 <_vfiprintf_r+0x244>)
 8007ab8:	429d      	cmp	r5, r3
 8007aba:	d101      	bne.n	8007ac0 <_vfiprintf_r+0x60>
 8007abc:	68b5      	ldr	r5, [r6, #8]
 8007abe:	e7df      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007ac0:	4b79      	ldr	r3, [pc, #484]	; (8007ca8 <_vfiprintf_r+0x248>)
 8007ac2:	429d      	cmp	r5, r3
 8007ac4:	bf08      	it	eq
 8007ac6:	68f5      	ldreq	r5, [r6, #12]
 8007ac8:	e7da      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007aca:	89ab      	ldrh	r3, [r5, #12]
 8007acc:	0598      	lsls	r0, r3, #22
 8007ace:	d4ed      	bmi.n	8007aac <_vfiprintf_r+0x4c>
 8007ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ad2:	f7ff ff29 	bl	8007928 <__retarget_lock_release_recursive>
 8007ad6:	e7e9      	b.n	8007aac <_vfiprintf_r+0x4c>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	2320      	movs	r3, #32
 8007ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ae6:	2330      	movs	r3, #48	; 0x30
 8007ae8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cac <_vfiprintf_r+0x24c>
 8007aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af0:	f04f 0901 	mov.w	r9, #1
 8007af4:	4623      	mov	r3, r4
 8007af6:	469a      	mov	sl, r3
 8007af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afc:	b10a      	cbz	r2, 8007b02 <_vfiprintf_r+0xa2>
 8007afe:	2a25      	cmp	r2, #37	; 0x25
 8007b00:	d1f9      	bne.n	8007af6 <_vfiprintf_r+0x96>
 8007b02:	ebba 0b04 	subs.w	fp, sl, r4
 8007b06:	d00b      	beq.n	8007b20 <_vfiprintf_r+0xc0>
 8007b08:	465b      	mov	r3, fp
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7ff ff93 	bl	8007a3a <__sfputs_r>
 8007b14:	3001      	adds	r0, #1
 8007b16:	f000 80aa 	beq.w	8007c6e <_vfiprintf_r+0x20e>
 8007b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b1c:	445a      	add	r2, fp
 8007b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b20:	f89a 3000 	ldrb.w	r3, [sl]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80a2 	beq.w	8007c6e <_vfiprintf_r+0x20e>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b34:	f10a 0a01 	add.w	sl, sl, #1
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b40:	931a      	str	r3, [sp, #104]	; 0x68
 8007b42:	4654      	mov	r4, sl
 8007b44:	2205      	movs	r2, #5
 8007b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4a:	4858      	ldr	r0, [pc, #352]	; (8007cac <_vfiprintf_r+0x24c>)
 8007b4c:	f7f8 fb40 	bl	80001d0 <memchr>
 8007b50:	9a04      	ldr	r2, [sp, #16]
 8007b52:	b9d8      	cbnz	r0, 8007b8c <_vfiprintf_r+0x12c>
 8007b54:	06d1      	lsls	r1, r2, #27
 8007b56:	bf44      	itt	mi
 8007b58:	2320      	movmi	r3, #32
 8007b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b5e:	0713      	lsls	r3, r2, #28
 8007b60:	bf44      	itt	mi
 8007b62:	232b      	movmi	r3, #43	; 0x2b
 8007b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b68:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b6e:	d015      	beq.n	8007b9c <_vfiprintf_r+0x13c>
 8007b70:	9a07      	ldr	r2, [sp, #28]
 8007b72:	4654      	mov	r4, sl
 8007b74:	2000      	movs	r0, #0
 8007b76:	f04f 0c0a 	mov.w	ip, #10
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b80:	3b30      	subs	r3, #48	; 0x30
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d94e      	bls.n	8007c24 <_vfiprintf_r+0x1c4>
 8007b86:	b1b0      	cbz	r0, 8007bb6 <_vfiprintf_r+0x156>
 8007b88:	9207      	str	r2, [sp, #28]
 8007b8a:	e014      	b.n	8007bb6 <_vfiprintf_r+0x156>
 8007b8c:	eba0 0308 	sub.w	r3, r0, r8
 8007b90:	fa09 f303 	lsl.w	r3, r9, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	9304      	str	r3, [sp, #16]
 8007b98:	46a2      	mov	sl, r4
 8007b9a:	e7d2      	b.n	8007b42 <_vfiprintf_r+0xe2>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	1d19      	adds	r1, r3, #4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	9103      	str	r1, [sp, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bfbb      	ittet	lt
 8007ba8:	425b      	neglt	r3, r3
 8007baa:	f042 0202 	orrlt.w	r2, r2, #2
 8007bae:	9307      	strge	r3, [sp, #28]
 8007bb0:	9307      	strlt	r3, [sp, #28]
 8007bb2:	bfb8      	it	lt
 8007bb4:	9204      	strlt	r2, [sp, #16]
 8007bb6:	7823      	ldrb	r3, [r4, #0]
 8007bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007bba:	d10c      	bne.n	8007bd6 <_vfiprintf_r+0x176>
 8007bbc:	7863      	ldrb	r3, [r4, #1]
 8007bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc0:	d135      	bne.n	8007c2e <_vfiprintf_r+0x1ce>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	1d1a      	adds	r2, r3, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	9203      	str	r2, [sp, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bfb8      	it	lt
 8007bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd2:	3402      	adds	r4, #2
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cbc <_vfiprintf_r+0x25c>
 8007bda:	7821      	ldrb	r1, [r4, #0]
 8007bdc:	2203      	movs	r2, #3
 8007bde:	4650      	mov	r0, sl
 8007be0:	f7f8 faf6 	bl	80001d0 <memchr>
 8007be4:	b140      	cbz	r0, 8007bf8 <_vfiprintf_r+0x198>
 8007be6:	2340      	movs	r3, #64	; 0x40
 8007be8:	eba0 000a 	sub.w	r0, r0, sl
 8007bec:	fa03 f000 	lsl.w	r0, r3, r0
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	4303      	orrs	r3, r0
 8007bf4:	3401      	adds	r4, #1
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	482c      	ldr	r0, [pc, #176]	; (8007cb0 <_vfiprintf_r+0x250>)
 8007bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c02:	2206      	movs	r2, #6
 8007c04:	f7f8 fae4 	bl	80001d0 <memchr>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d03f      	beq.n	8007c8c <_vfiprintf_r+0x22c>
 8007c0c:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <_vfiprintf_r+0x254>)
 8007c0e:	bb1b      	cbnz	r3, 8007c58 <_vfiprintf_r+0x1f8>
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	3307      	adds	r3, #7
 8007c14:	f023 0307 	bic.w	r3, r3, #7
 8007c18:	3308      	adds	r3, #8
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1e:	443b      	add	r3, r7
 8007c20:	9309      	str	r3, [sp, #36]	; 0x24
 8007c22:	e767      	b.n	8007af4 <_vfiprintf_r+0x94>
 8007c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c28:	460c      	mov	r4, r1
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	e7a5      	b.n	8007b7a <_vfiprintf_r+0x11a>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	3401      	adds	r4, #1
 8007c32:	9305      	str	r3, [sp, #20]
 8007c34:	4619      	mov	r1, r3
 8007c36:	f04f 0c0a 	mov.w	ip, #10
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c40:	3a30      	subs	r2, #48	; 0x30
 8007c42:	2a09      	cmp	r2, #9
 8007c44:	d903      	bls.n	8007c4e <_vfiprintf_r+0x1ee>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0c5      	beq.n	8007bd6 <_vfiprintf_r+0x176>
 8007c4a:	9105      	str	r1, [sp, #20]
 8007c4c:	e7c3      	b.n	8007bd6 <_vfiprintf_r+0x176>
 8007c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c52:	4604      	mov	r4, r0
 8007c54:	2301      	movs	r3, #1
 8007c56:	e7f0      	b.n	8007c3a <_vfiprintf_r+0x1da>
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <_vfiprintf_r+0x258>)
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	4630      	mov	r0, r6
 8007c64:	f3af 8000 	nop.w
 8007c68:	4607      	mov	r7, r0
 8007c6a:	1c78      	adds	r0, r7, #1
 8007c6c:	d1d6      	bne.n	8007c1c <_vfiprintf_r+0x1bc>
 8007c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c70:	07d9      	lsls	r1, r3, #31
 8007c72:	d405      	bmi.n	8007c80 <_vfiprintf_r+0x220>
 8007c74:	89ab      	ldrh	r3, [r5, #12]
 8007c76:	059a      	lsls	r2, r3, #22
 8007c78:	d402      	bmi.n	8007c80 <_vfiprintf_r+0x220>
 8007c7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c7c:	f7ff fe54 	bl	8007928 <__retarget_lock_release_recursive>
 8007c80:	89ab      	ldrh	r3, [r5, #12]
 8007c82:	065b      	lsls	r3, r3, #25
 8007c84:	f53f af12 	bmi.w	8007aac <_vfiprintf_r+0x4c>
 8007c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c8a:	e711      	b.n	8007ab0 <_vfiprintf_r+0x50>
 8007c8c:	ab03      	add	r3, sp, #12
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4b09      	ldr	r3, [pc, #36]	; (8007cb8 <_vfiprintf_r+0x258>)
 8007c94:	a904      	add	r1, sp, #16
 8007c96:	4630      	mov	r0, r6
 8007c98:	f000 f880 	bl	8007d9c <_printf_i>
 8007c9c:	e7e4      	b.n	8007c68 <_vfiprintf_r+0x208>
 8007c9e:	bf00      	nop
 8007ca0:	08008b88 	.word	0x08008b88
 8007ca4:	08008ba8 	.word	0x08008ba8
 8007ca8:	08008b68 	.word	0x08008b68
 8007cac:	08008bcc 	.word	0x08008bcc
 8007cb0:	08008bd6 	.word	0x08008bd6
 8007cb4:	00000000 	.word	0x00000000
 8007cb8:	08007a3b 	.word	0x08007a3b
 8007cbc:	08008bd2 	.word	0x08008bd2

08007cc0 <_printf_common>:
 8007cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc4:	4616      	mov	r6, r2
 8007cc6:	4699      	mov	r9, r3
 8007cc8:	688a      	ldr	r2, [r1, #8]
 8007cca:	690b      	ldr	r3, [r1, #16]
 8007ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	bfb8      	it	lt
 8007cd4:	4613      	movlt	r3, r2
 8007cd6:	6033      	str	r3, [r6, #0]
 8007cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cdc:	4607      	mov	r7, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	b10a      	cbz	r2, 8007ce6 <_printf_common+0x26>
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	6033      	str	r3, [r6, #0]
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	0699      	lsls	r1, r3, #26
 8007cea:	bf42      	ittt	mi
 8007cec:	6833      	ldrmi	r3, [r6, #0]
 8007cee:	3302      	addmi	r3, #2
 8007cf0:	6033      	strmi	r3, [r6, #0]
 8007cf2:	6825      	ldr	r5, [r4, #0]
 8007cf4:	f015 0506 	ands.w	r5, r5, #6
 8007cf8:	d106      	bne.n	8007d08 <_printf_common+0x48>
 8007cfa:	f104 0a19 	add.w	sl, r4, #25
 8007cfe:	68e3      	ldr	r3, [r4, #12]
 8007d00:	6832      	ldr	r2, [r6, #0]
 8007d02:	1a9b      	subs	r3, r3, r2
 8007d04:	42ab      	cmp	r3, r5
 8007d06:	dc26      	bgt.n	8007d56 <_printf_common+0x96>
 8007d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d0c:	1e13      	subs	r3, r2, #0
 8007d0e:	6822      	ldr	r2, [r4, #0]
 8007d10:	bf18      	it	ne
 8007d12:	2301      	movne	r3, #1
 8007d14:	0692      	lsls	r2, r2, #26
 8007d16:	d42b      	bmi.n	8007d70 <_printf_common+0xb0>
 8007d18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	4638      	mov	r0, r7
 8007d20:	47c0      	blx	r8
 8007d22:	3001      	adds	r0, #1
 8007d24:	d01e      	beq.n	8007d64 <_printf_common+0xa4>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	68e5      	ldr	r5, [r4, #12]
 8007d2a:	6832      	ldr	r2, [r6, #0]
 8007d2c:	f003 0306 	and.w	r3, r3, #6
 8007d30:	2b04      	cmp	r3, #4
 8007d32:	bf08      	it	eq
 8007d34:	1aad      	subeq	r5, r5, r2
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	6922      	ldr	r2, [r4, #16]
 8007d3a:	bf0c      	ite	eq
 8007d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d40:	2500      	movne	r5, #0
 8007d42:	4293      	cmp	r3, r2
 8007d44:	bfc4      	itt	gt
 8007d46:	1a9b      	subgt	r3, r3, r2
 8007d48:	18ed      	addgt	r5, r5, r3
 8007d4a:	2600      	movs	r6, #0
 8007d4c:	341a      	adds	r4, #26
 8007d4e:	42b5      	cmp	r5, r6
 8007d50:	d11a      	bne.n	8007d88 <_printf_common+0xc8>
 8007d52:	2000      	movs	r0, #0
 8007d54:	e008      	b.n	8007d68 <_printf_common+0xa8>
 8007d56:	2301      	movs	r3, #1
 8007d58:	4652      	mov	r2, sl
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	47c0      	blx	r8
 8007d60:	3001      	adds	r0, #1
 8007d62:	d103      	bne.n	8007d6c <_printf_common+0xac>
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	e7c6      	b.n	8007cfe <_printf_common+0x3e>
 8007d70:	18e1      	adds	r1, r4, r3
 8007d72:	1c5a      	adds	r2, r3, #1
 8007d74:	2030      	movs	r0, #48	; 0x30
 8007d76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d7a:	4422      	add	r2, r4
 8007d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d84:	3302      	adds	r3, #2
 8007d86:	e7c7      	b.n	8007d18 <_printf_common+0x58>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4622      	mov	r2, r4
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	4638      	mov	r0, r7
 8007d90:	47c0      	blx	r8
 8007d92:	3001      	adds	r0, #1
 8007d94:	d0e6      	beq.n	8007d64 <_printf_common+0xa4>
 8007d96:	3601      	adds	r6, #1
 8007d98:	e7d9      	b.n	8007d4e <_printf_common+0x8e>
	...

08007d9c <_printf_i>:
 8007d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	460c      	mov	r4, r1
 8007da2:	4691      	mov	r9, r2
 8007da4:	7e27      	ldrb	r7, [r4, #24]
 8007da6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007da8:	2f78      	cmp	r7, #120	; 0x78
 8007daa:	4680      	mov	r8, r0
 8007dac:	469a      	mov	sl, r3
 8007dae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007db2:	d807      	bhi.n	8007dc4 <_printf_i+0x28>
 8007db4:	2f62      	cmp	r7, #98	; 0x62
 8007db6:	d80a      	bhi.n	8007dce <_printf_i+0x32>
 8007db8:	2f00      	cmp	r7, #0
 8007dba:	f000 80d8 	beq.w	8007f6e <_printf_i+0x1d2>
 8007dbe:	2f58      	cmp	r7, #88	; 0x58
 8007dc0:	f000 80a3 	beq.w	8007f0a <_printf_i+0x16e>
 8007dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007dcc:	e03a      	b.n	8007e44 <_printf_i+0xa8>
 8007dce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dd2:	2b15      	cmp	r3, #21
 8007dd4:	d8f6      	bhi.n	8007dc4 <_printf_i+0x28>
 8007dd6:	a001      	add	r0, pc, #4	; (adr r0, 8007ddc <_printf_i+0x40>)
 8007dd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ddc:	08007e35 	.word	0x08007e35
 8007de0:	08007e49 	.word	0x08007e49
 8007de4:	08007dc5 	.word	0x08007dc5
 8007de8:	08007dc5 	.word	0x08007dc5
 8007dec:	08007dc5 	.word	0x08007dc5
 8007df0:	08007dc5 	.word	0x08007dc5
 8007df4:	08007e49 	.word	0x08007e49
 8007df8:	08007dc5 	.word	0x08007dc5
 8007dfc:	08007dc5 	.word	0x08007dc5
 8007e00:	08007dc5 	.word	0x08007dc5
 8007e04:	08007dc5 	.word	0x08007dc5
 8007e08:	08007f55 	.word	0x08007f55
 8007e0c:	08007e79 	.word	0x08007e79
 8007e10:	08007f37 	.word	0x08007f37
 8007e14:	08007dc5 	.word	0x08007dc5
 8007e18:	08007dc5 	.word	0x08007dc5
 8007e1c:	08007f77 	.word	0x08007f77
 8007e20:	08007dc5 	.word	0x08007dc5
 8007e24:	08007e79 	.word	0x08007e79
 8007e28:	08007dc5 	.word	0x08007dc5
 8007e2c:	08007dc5 	.word	0x08007dc5
 8007e30:	08007f3f 	.word	0x08007f3f
 8007e34:	680b      	ldr	r3, [r1, #0]
 8007e36:	1d1a      	adds	r2, r3, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	600a      	str	r2, [r1, #0]
 8007e3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e44:	2301      	movs	r3, #1
 8007e46:	e0a3      	b.n	8007f90 <_printf_i+0x1f4>
 8007e48:	6825      	ldr	r5, [r4, #0]
 8007e4a:	6808      	ldr	r0, [r1, #0]
 8007e4c:	062e      	lsls	r6, r5, #24
 8007e4e:	f100 0304 	add.w	r3, r0, #4
 8007e52:	d50a      	bpl.n	8007e6a <_printf_i+0xce>
 8007e54:	6805      	ldr	r5, [r0, #0]
 8007e56:	600b      	str	r3, [r1, #0]
 8007e58:	2d00      	cmp	r5, #0
 8007e5a:	da03      	bge.n	8007e64 <_printf_i+0xc8>
 8007e5c:	232d      	movs	r3, #45	; 0x2d
 8007e5e:	426d      	negs	r5, r5
 8007e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e64:	485e      	ldr	r0, [pc, #376]	; (8007fe0 <_printf_i+0x244>)
 8007e66:	230a      	movs	r3, #10
 8007e68:	e019      	b.n	8007e9e <_printf_i+0x102>
 8007e6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e6e:	6805      	ldr	r5, [r0, #0]
 8007e70:	600b      	str	r3, [r1, #0]
 8007e72:	bf18      	it	ne
 8007e74:	b22d      	sxthne	r5, r5
 8007e76:	e7ef      	b.n	8007e58 <_printf_i+0xbc>
 8007e78:	680b      	ldr	r3, [r1, #0]
 8007e7a:	6825      	ldr	r5, [r4, #0]
 8007e7c:	1d18      	adds	r0, r3, #4
 8007e7e:	6008      	str	r0, [r1, #0]
 8007e80:	0628      	lsls	r0, r5, #24
 8007e82:	d501      	bpl.n	8007e88 <_printf_i+0xec>
 8007e84:	681d      	ldr	r5, [r3, #0]
 8007e86:	e002      	b.n	8007e8e <_printf_i+0xf2>
 8007e88:	0669      	lsls	r1, r5, #25
 8007e8a:	d5fb      	bpl.n	8007e84 <_printf_i+0xe8>
 8007e8c:	881d      	ldrh	r5, [r3, #0]
 8007e8e:	4854      	ldr	r0, [pc, #336]	; (8007fe0 <_printf_i+0x244>)
 8007e90:	2f6f      	cmp	r7, #111	; 0x6f
 8007e92:	bf0c      	ite	eq
 8007e94:	2308      	moveq	r3, #8
 8007e96:	230a      	movne	r3, #10
 8007e98:	2100      	movs	r1, #0
 8007e9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e9e:	6866      	ldr	r6, [r4, #4]
 8007ea0:	60a6      	str	r6, [r4, #8]
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	bfa2      	ittt	ge
 8007ea6:	6821      	ldrge	r1, [r4, #0]
 8007ea8:	f021 0104 	bicge.w	r1, r1, #4
 8007eac:	6021      	strge	r1, [r4, #0]
 8007eae:	b90d      	cbnz	r5, 8007eb4 <_printf_i+0x118>
 8007eb0:	2e00      	cmp	r6, #0
 8007eb2:	d04d      	beq.n	8007f50 <_printf_i+0x1b4>
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eba:	fb03 5711 	mls	r7, r3, r1, r5
 8007ebe:	5dc7      	ldrb	r7, [r0, r7]
 8007ec0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ec4:	462f      	mov	r7, r5
 8007ec6:	42bb      	cmp	r3, r7
 8007ec8:	460d      	mov	r5, r1
 8007eca:	d9f4      	bls.n	8007eb6 <_printf_i+0x11a>
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d10b      	bne.n	8007ee8 <_printf_i+0x14c>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	07df      	lsls	r7, r3, #31
 8007ed4:	d508      	bpl.n	8007ee8 <_printf_i+0x14c>
 8007ed6:	6923      	ldr	r3, [r4, #16]
 8007ed8:	6861      	ldr	r1, [r4, #4]
 8007eda:	4299      	cmp	r1, r3
 8007edc:	bfde      	ittt	le
 8007ede:	2330      	movle	r3, #48	; 0x30
 8007ee0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ee4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ee8:	1b92      	subs	r2, r2, r6
 8007eea:	6122      	str	r2, [r4, #16]
 8007eec:	f8cd a000 	str.w	sl, [sp]
 8007ef0:	464b      	mov	r3, r9
 8007ef2:	aa03      	add	r2, sp, #12
 8007ef4:	4621      	mov	r1, r4
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	f7ff fee2 	bl	8007cc0 <_printf_common>
 8007efc:	3001      	adds	r0, #1
 8007efe:	d14c      	bne.n	8007f9a <_printf_i+0x1fe>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	b004      	add	sp, #16
 8007f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f0a:	4835      	ldr	r0, [pc, #212]	; (8007fe0 <_printf_i+0x244>)
 8007f0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	680e      	ldr	r6, [r1, #0]
 8007f14:	061f      	lsls	r7, r3, #24
 8007f16:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f1a:	600e      	str	r6, [r1, #0]
 8007f1c:	d514      	bpl.n	8007f48 <_printf_i+0x1ac>
 8007f1e:	07d9      	lsls	r1, r3, #31
 8007f20:	bf44      	itt	mi
 8007f22:	f043 0320 	orrmi.w	r3, r3, #32
 8007f26:	6023      	strmi	r3, [r4, #0]
 8007f28:	b91d      	cbnz	r5, 8007f32 <_printf_i+0x196>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	f023 0320 	bic.w	r3, r3, #32
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	2310      	movs	r3, #16
 8007f34:	e7b0      	b.n	8007e98 <_printf_i+0xfc>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	f043 0320 	orr.w	r3, r3, #32
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	2378      	movs	r3, #120	; 0x78
 8007f40:	4828      	ldr	r0, [pc, #160]	; (8007fe4 <_printf_i+0x248>)
 8007f42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f46:	e7e3      	b.n	8007f10 <_printf_i+0x174>
 8007f48:	065e      	lsls	r6, r3, #25
 8007f4a:	bf48      	it	mi
 8007f4c:	b2ad      	uxthmi	r5, r5
 8007f4e:	e7e6      	b.n	8007f1e <_printf_i+0x182>
 8007f50:	4616      	mov	r6, r2
 8007f52:	e7bb      	b.n	8007ecc <_printf_i+0x130>
 8007f54:	680b      	ldr	r3, [r1, #0]
 8007f56:	6826      	ldr	r6, [r4, #0]
 8007f58:	6960      	ldr	r0, [r4, #20]
 8007f5a:	1d1d      	adds	r5, r3, #4
 8007f5c:	600d      	str	r5, [r1, #0]
 8007f5e:	0635      	lsls	r5, r6, #24
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	d501      	bpl.n	8007f68 <_printf_i+0x1cc>
 8007f64:	6018      	str	r0, [r3, #0]
 8007f66:	e002      	b.n	8007f6e <_printf_i+0x1d2>
 8007f68:	0671      	lsls	r1, r6, #25
 8007f6a:	d5fb      	bpl.n	8007f64 <_printf_i+0x1c8>
 8007f6c:	8018      	strh	r0, [r3, #0]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6123      	str	r3, [r4, #16]
 8007f72:	4616      	mov	r6, r2
 8007f74:	e7ba      	b.n	8007eec <_printf_i+0x150>
 8007f76:	680b      	ldr	r3, [r1, #0]
 8007f78:	1d1a      	adds	r2, r3, #4
 8007f7a:	600a      	str	r2, [r1, #0]
 8007f7c:	681e      	ldr	r6, [r3, #0]
 8007f7e:	6862      	ldr	r2, [r4, #4]
 8007f80:	2100      	movs	r1, #0
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7f8 f924 	bl	80001d0 <memchr>
 8007f88:	b108      	cbz	r0, 8007f8e <_printf_i+0x1f2>
 8007f8a:	1b80      	subs	r0, r0, r6
 8007f8c:	6060      	str	r0, [r4, #4]
 8007f8e:	6863      	ldr	r3, [r4, #4]
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	2300      	movs	r3, #0
 8007f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f98:	e7a8      	b.n	8007eec <_printf_i+0x150>
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	47d0      	blx	sl
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d0ab      	beq.n	8007f00 <_printf_i+0x164>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	079b      	lsls	r3, r3, #30
 8007fac:	d413      	bmi.n	8007fd6 <_printf_i+0x23a>
 8007fae:	68e0      	ldr	r0, [r4, #12]
 8007fb0:	9b03      	ldr	r3, [sp, #12]
 8007fb2:	4298      	cmp	r0, r3
 8007fb4:	bfb8      	it	lt
 8007fb6:	4618      	movlt	r0, r3
 8007fb8:	e7a4      	b.n	8007f04 <_printf_i+0x168>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	47d0      	blx	sl
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d09b      	beq.n	8007f00 <_printf_i+0x164>
 8007fc8:	3501      	adds	r5, #1
 8007fca:	68e3      	ldr	r3, [r4, #12]
 8007fcc:	9903      	ldr	r1, [sp, #12]
 8007fce:	1a5b      	subs	r3, r3, r1
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	dcf2      	bgt.n	8007fba <_printf_i+0x21e>
 8007fd4:	e7eb      	b.n	8007fae <_printf_i+0x212>
 8007fd6:	2500      	movs	r5, #0
 8007fd8:	f104 0619 	add.w	r6, r4, #25
 8007fdc:	e7f5      	b.n	8007fca <_printf_i+0x22e>
 8007fde:	bf00      	nop
 8007fe0:	08008bdd 	.word	0x08008bdd
 8007fe4:	08008bee 	.word	0x08008bee

08007fe8 <cleanup_glue>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	460c      	mov	r4, r1
 8007fec:	6809      	ldr	r1, [r1, #0]
 8007fee:	4605      	mov	r5, r0
 8007ff0:	b109      	cbz	r1, 8007ff6 <cleanup_glue+0xe>
 8007ff2:	f7ff fff9 	bl	8007fe8 <cleanup_glue>
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ffe:	f000 badf 	b.w	80085c0 <_free_r>
	...

08008004 <_reclaim_reent>:
 8008004:	4b2c      	ldr	r3, [pc, #176]	; (80080b8 <_reclaim_reent+0xb4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4283      	cmp	r3, r0
 800800a:	b570      	push	{r4, r5, r6, lr}
 800800c:	4604      	mov	r4, r0
 800800e:	d051      	beq.n	80080b4 <_reclaim_reent+0xb0>
 8008010:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008012:	b143      	cbz	r3, 8008026 <_reclaim_reent+0x22>
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d14a      	bne.n	80080b0 <_reclaim_reent+0xac>
 800801a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800801c:	6819      	ldr	r1, [r3, #0]
 800801e:	b111      	cbz	r1, 8008026 <_reclaim_reent+0x22>
 8008020:	4620      	mov	r0, r4
 8008022:	f000 facd 	bl	80085c0 <_free_r>
 8008026:	6961      	ldr	r1, [r4, #20]
 8008028:	b111      	cbz	r1, 8008030 <_reclaim_reent+0x2c>
 800802a:	4620      	mov	r0, r4
 800802c:	f000 fac8 	bl	80085c0 <_free_r>
 8008030:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008032:	b111      	cbz	r1, 800803a <_reclaim_reent+0x36>
 8008034:	4620      	mov	r0, r4
 8008036:	f000 fac3 	bl	80085c0 <_free_r>
 800803a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800803c:	b111      	cbz	r1, 8008044 <_reclaim_reent+0x40>
 800803e:	4620      	mov	r0, r4
 8008040:	f000 fabe 	bl	80085c0 <_free_r>
 8008044:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008046:	b111      	cbz	r1, 800804e <_reclaim_reent+0x4a>
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fab9 	bl	80085c0 <_free_r>
 800804e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008050:	b111      	cbz	r1, 8008058 <_reclaim_reent+0x54>
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fab4 	bl	80085c0 <_free_r>
 8008058:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800805a:	b111      	cbz	r1, 8008062 <_reclaim_reent+0x5e>
 800805c:	4620      	mov	r0, r4
 800805e:	f000 faaf 	bl	80085c0 <_free_r>
 8008062:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008064:	b111      	cbz	r1, 800806c <_reclaim_reent+0x68>
 8008066:	4620      	mov	r0, r4
 8008068:	f000 faaa 	bl	80085c0 <_free_r>
 800806c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800806e:	b111      	cbz	r1, 8008076 <_reclaim_reent+0x72>
 8008070:	4620      	mov	r0, r4
 8008072:	f000 faa5 	bl	80085c0 <_free_r>
 8008076:	69a3      	ldr	r3, [r4, #24]
 8008078:	b1e3      	cbz	r3, 80080b4 <_reclaim_reent+0xb0>
 800807a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800807c:	4620      	mov	r0, r4
 800807e:	4798      	blx	r3
 8008080:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008082:	b1b9      	cbz	r1, 80080b4 <_reclaim_reent+0xb0>
 8008084:	4620      	mov	r0, r4
 8008086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800808a:	f7ff bfad 	b.w	8007fe8 <cleanup_glue>
 800808e:	5949      	ldr	r1, [r1, r5]
 8008090:	b941      	cbnz	r1, 80080a4 <_reclaim_reent+0xa0>
 8008092:	3504      	adds	r5, #4
 8008094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008096:	2d80      	cmp	r5, #128	; 0x80
 8008098:	68d9      	ldr	r1, [r3, #12]
 800809a:	d1f8      	bne.n	800808e <_reclaim_reent+0x8a>
 800809c:	4620      	mov	r0, r4
 800809e:	f000 fa8f 	bl	80085c0 <_free_r>
 80080a2:	e7ba      	b.n	800801a <_reclaim_reent+0x16>
 80080a4:	680e      	ldr	r6, [r1, #0]
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fa8a 	bl	80085c0 <_free_r>
 80080ac:	4631      	mov	r1, r6
 80080ae:	e7ef      	b.n	8008090 <_reclaim_reent+0x8c>
 80080b0:	2500      	movs	r5, #0
 80080b2:	e7ef      	b.n	8008094 <_reclaim_reent+0x90>
 80080b4:	bd70      	pop	{r4, r5, r6, pc}
 80080b6:	bf00      	nop
 80080b8:	20000098 	.word	0x20000098

080080bc <_sbrk_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4d06      	ldr	r5, [pc, #24]	; (80080d8 <_sbrk_r+0x1c>)
 80080c0:	2300      	movs	r3, #0
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7f8 fe84 	bl	8000dd4 <_sbrk>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_sbrk_r+0x1a>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_sbrk_r+0x1a>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	20004a48 	.word	0x20004a48

080080dc <__sread>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	460c      	mov	r4, r1
 80080e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e4:	f000 fabc 	bl	8008660 <_read_r>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	bfab      	itete	ge
 80080ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080ee:	89a3      	ldrhlt	r3, [r4, #12]
 80080f0:	181b      	addge	r3, r3, r0
 80080f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080f6:	bfac      	ite	ge
 80080f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80080fa:	81a3      	strhlt	r3, [r4, #12]
 80080fc:	bd10      	pop	{r4, pc}

080080fe <__swrite>:
 80080fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008102:	461f      	mov	r7, r3
 8008104:	898b      	ldrh	r3, [r1, #12]
 8008106:	05db      	lsls	r3, r3, #23
 8008108:	4605      	mov	r5, r0
 800810a:	460c      	mov	r4, r1
 800810c:	4616      	mov	r6, r2
 800810e:	d505      	bpl.n	800811c <__swrite+0x1e>
 8008110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008114:	2302      	movs	r3, #2
 8008116:	2200      	movs	r2, #0
 8008118:	f000 f9d0 	bl	80084bc <_lseek_r>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	4632      	mov	r2, r6
 800812a:	463b      	mov	r3, r7
 800812c:	4628      	mov	r0, r5
 800812e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	f000 b869 	b.w	8008208 <_write_r>

08008136 <__sseek>:
 8008136:	b510      	push	{r4, lr}
 8008138:	460c      	mov	r4, r1
 800813a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800813e:	f000 f9bd 	bl	80084bc <_lseek_r>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	bf15      	itete	ne
 8008148:	6560      	strne	r0, [r4, #84]	; 0x54
 800814a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800814e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008152:	81a3      	strheq	r3, [r4, #12]
 8008154:	bf18      	it	ne
 8008156:	81a3      	strhne	r3, [r4, #12]
 8008158:	bd10      	pop	{r4, pc}

0800815a <__sclose>:
 800815a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815e:	f000 b8db 	b.w	8008318 <_close_r>
	...

08008164 <__swbuf_r>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	460e      	mov	r6, r1
 8008168:	4614      	mov	r4, r2
 800816a:	4605      	mov	r5, r0
 800816c:	b118      	cbz	r0, 8008176 <__swbuf_r+0x12>
 800816e:	6983      	ldr	r3, [r0, #24]
 8008170:	b90b      	cbnz	r3, 8008176 <__swbuf_r+0x12>
 8008172:	f7ff fb03 	bl	800777c <__sinit>
 8008176:	4b21      	ldr	r3, [pc, #132]	; (80081fc <__swbuf_r+0x98>)
 8008178:	429c      	cmp	r4, r3
 800817a:	d12b      	bne.n	80081d4 <__swbuf_r+0x70>
 800817c:	686c      	ldr	r4, [r5, #4]
 800817e:	69a3      	ldr	r3, [r4, #24]
 8008180:	60a3      	str	r3, [r4, #8]
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	071a      	lsls	r2, r3, #28
 8008186:	d52f      	bpl.n	80081e8 <__swbuf_r+0x84>
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	b36b      	cbz	r3, 80081e8 <__swbuf_r+0x84>
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	6820      	ldr	r0, [r4, #0]
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	6963      	ldr	r3, [r4, #20]
 8008194:	b2f6      	uxtb	r6, r6
 8008196:	4283      	cmp	r3, r0
 8008198:	4637      	mov	r7, r6
 800819a:	dc04      	bgt.n	80081a6 <__swbuf_r+0x42>
 800819c:	4621      	mov	r1, r4
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 f950 	bl	8008444 <_fflush_r>
 80081a4:	bb30      	cbnz	r0, 80081f4 <__swbuf_r+0x90>
 80081a6:	68a3      	ldr	r3, [r4, #8]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	60a3      	str	r3, [r4, #8]
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	6022      	str	r2, [r4, #0]
 80081b2:	701e      	strb	r6, [r3, #0]
 80081b4:	6963      	ldr	r3, [r4, #20]
 80081b6:	3001      	adds	r0, #1
 80081b8:	4283      	cmp	r3, r0
 80081ba:	d004      	beq.n	80081c6 <__swbuf_r+0x62>
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	07db      	lsls	r3, r3, #31
 80081c0:	d506      	bpl.n	80081d0 <__swbuf_r+0x6c>
 80081c2:	2e0a      	cmp	r6, #10
 80081c4:	d104      	bne.n	80081d0 <__swbuf_r+0x6c>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 f93b 	bl	8008444 <_fflush_r>
 80081ce:	b988      	cbnz	r0, 80081f4 <__swbuf_r+0x90>
 80081d0:	4638      	mov	r0, r7
 80081d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d4:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <__swbuf_r+0x9c>)
 80081d6:	429c      	cmp	r4, r3
 80081d8:	d101      	bne.n	80081de <__swbuf_r+0x7a>
 80081da:	68ac      	ldr	r4, [r5, #8]
 80081dc:	e7cf      	b.n	800817e <__swbuf_r+0x1a>
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <__swbuf_r+0xa0>)
 80081e0:	429c      	cmp	r4, r3
 80081e2:	bf08      	it	eq
 80081e4:	68ec      	ldreq	r4, [r5, #12]
 80081e6:	e7ca      	b.n	800817e <__swbuf_r+0x1a>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f81e 	bl	800822c <__swsetup_r>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0cb      	beq.n	800818c <__swbuf_r+0x28>
 80081f4:	f04f 37ff 	mov.w	r7, #4294967295
 80081f8:	e7ea      	b.n	80081d0 <__swbuf_r+0x6c>
 80081fa:	bf00      	nop
 80081fc:	08008b88 	.word	0x08008b88
 8008200:	08008ba8 	.word	0x08008ba8
 8008204:	08008b68 	.word	0x08008b68

08008208 <_write_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d07      	ldr	r5, [pc, #28]	; (8008228 <_write_r+0x20>)
 800820c:	4604      	mov	r4, r0
 800820e:	4608      	mov	r0, r1
 8008210:	4611      	mov	r1, r2
 8008212:	2200      	movs	r2, #0
 8008214:	602a      	str	r2, [r5, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7f8 fd8b 	bl	8000d32 <_write>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_write_r+0x1e>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_write_r+0x1e>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	20004a48 	.word	0x20004a48

0800822c <__swsetup_r>:
 800822c:	4b32      	ldr	r3, [pc, #200]	; (80082f8 <__swsetup_r+0xcc>)
 800822e:	b570      	push	{r4, r5, r6, lr}
 8008230:	681d      	ldr	r5, [r3, #0]
 8008232:	4606      	mov	r6, r0
 8008234:	460c      	mov	r4, r1
 8008236:	b125      	cbz	r5, 8008242 <__swsetup_r+0x16>
 8008238:	69ab      	ldr	r3, [r5, #24]
 800823a:	b913      	cbnz	r3, 8008242 <__swsetup_r+0x16>
 800823c:	4628      	mov	r0, r5
 800823e:	f7ff fa9d 	bl	800777c <__sinit>
 8008242:	4b2e      	ldr	r3, [pc, #184]	; (80082fc <__swsetup_r+0xd0>)
 8008244:	429c      	cmp	r4, r3
 8008246:	d10f      	bne.n	8008268 <__swsetup_r+0x3c>
 8008248:	686c      	ldr	r4, [r5, #4]
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008250:	0719      	lsls	r1, r3, #28
 8008252:	d42c      	bmi.n	80082ae <__swsetup_r+0x82>
 8008254:	06dd      	lsls	r5, r3, #27
 8008256:	d411      	bmi.n	800827c <__swsetup_r+0x50>
 8008258:	2309      	movs	r3, #9
 800825a:	6033      	str	r3, [r6, #0]
 800825c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008260:	81a3      	strh	r3, [r4, #12]
 8008262:	f04f 30ff 	mov.w	r0, #4294967295
 8008266:	e03e      	b.n	80082e6 <__swsetup_r+0xba>
 8008268:	4b25      	ldr	r3, [pc, #148]	; (8008300 <__swsetup_r+0xd4>)
 800826a:	429c      	cmp	r4, r3
 800826c:	d101      	bne.n	8008272 <__swsetup_r+0x46>
 800826e:	68ac      	ldr	r4, [r5, #8]
 8008270:	e7eb      	b.n	800824a <__swsetup_r+0x1e>
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <__swsetup_r+0xd8>)
 8008274:	429c      	cmp	r4, r3
 8008276:	bf08      	it	eq
 8008278:	68ec      	ldreq	r4, [r5, #12]
 800827a:	e7e6      	b.n	800824a <__swsetup_r+0x1e>
 800827c:	0758      	lsls	r0, r3, #29
 800827e:	d512      	bpl.n	80082a6 <__swsetup_r+0x7a>
 8008280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008282:	b141      	cbz	r1, 8008296 <__swsetup_r+0x6a>
 8008284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008288:	4299      	cmp	r1, r3
 800828a:	d002      	beq.n	8008292 <__swsetup_r+0x66>
 800828c:	4630      	mov	r0, r6
 800828e:	f000 f997 	bl	80085c0 <_free_r>
 8008292:	2300      	movs	r3, #0
 8008294:	6363      	str	r3, [r4, #52]	; 0x34
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	2300      	movs	r3, #0
 80082a0:	6063      	str	r3, [r4, #4]
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	f043 0308 	orr.w	r3, r3, #8
 80082ac:	81a3      	strh	r3, [r4, #12]
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	b94b      	cbnz	r3, 80082c6 <__swsetup_r+0x9a>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082bc:	d003      	beq.n	80082c6 <__swsetup_r+0x9a>
 80082be:	4621      	mov	r1, r4
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f931 	bl	8008528 <__smakebuf_r>
 80082c6:	89a0      	ldrh	r0, [r4, #12]
 80082c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082cc:	f010 0301 	ands.w	r3, r0, #1
 80082d0:	d00a      	beq.n	80082e8 <__swsetup_r+0xbc>
 80082d2:	2300      	movs	r3, #0
 80082d4:	60a3      	str	r3, [r4, #8]
 80082d6:	6963      	ldr	r3, [r4, #20]
 80082d8:	425b      	negs	r3, r3
 80082da:	61a3      	str	r3, [r4, #24]
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	b943      	cbnz	r3, 80082f2 <__swsetup_r+0xc6>
 80082e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082e4:	d1ba      	bne.n	800825c <__swsetup_r+0x30>
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	0781      	lsls	r1, r0, #30
 80082ea:	bf58      	it	pl
 80082ec:	6963      	ldrpl	r3, [r4, #20]
 80082ee:	60a3      	str	r3, [r4, #8]
 80082f0:	e7f4      	b.n	80082dc <__swsetup_r+0xb0>
 80082f2:	2000      	movs	r0, #0
 80082f4:	e7f7      	b.n	80082e6 <__swsetup_r+0xba>
 80082f6:	bf00      	nop
 80082f8:	20000098 	.word	0x20000098
 80082fc:	08008b88 	.word	0x08008b88
 8008300:	08008ba8 	.word	0x08008ba8
 8008304:	08008b68 	.word	0x08008b68

08008308 <abort>:
 8008308:	b508      	push	{r3, lr}
 800830a:	2006      	movs	r0, #6
 800830c:	f000 f9e2 	bl	80086d4 <raise>
 8008310:	2001      	movs	r0, #1
 8008312:	f7f8 fce7 	bl	8000ce4 <_exit>
	...

08008318 <_close_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4d06      	ldr	r5, [pc, #24]	; (8008334 <_close_r+0x1c>)
 800831c:	2300      	movs	r3, #0
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	602b      	str	r3, [r5, #0]
 8008324:	f7f8 fd21 	bl	8000d6a <_close>
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d102      	bne.n	8008332 <_close_r+0x1a>
 800832c:	682b      	ldr	r3, [r5, #0]
 800832e:	b103      	cbz	r3, 8008332 <_close_r+0x1a>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	20004a48 	.word	0x20004a48

08008338 <__sflush_r>:
 8008338:	898a      	ldrh	r2, [r1, #12]
 800833a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800833e:	4605      	mov	r5, r0
 8008340:	0710      	lsls	r0, r2, #28
 8008342:	460c      	mov	r4, r1
 8008344:	d458      	bmi.n	80083f8 <__sflush_r+0xc0>
 8008346:	684b      	ldr	r3, [r1, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	dc05      	bgt.n	8008358 <__sflush_r+0x20>
 800834c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800834e:	2b00      	cmp	r3, #0
 8008350:	dc02      	bgt.n	8008358 <__sflush_r+0x20>
 8008352:	2000      	movs	r0, #0
 8008354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800835a:	2e00      	cmp	r6, #0
 800835c:	d0f9      	beq.n	8008352 <__sflush_r+0x1a>
 800835e:	2300      	movs	r3, #0
 8008360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008364:	682f      	ldr	r7, [r5, #0]
 8008366:	602b      	str	r3, [r5, #0]
 8008368:	d032      	beq.n	80083d0 <__sflush_r+0x98>
 800836a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800836c:	89a3      	ldrh	r3, [r4, #12]
 800836e:	075a      	lsls	r2, r3, #29
 8008370:	d505      	bpl.n	800837e <__sflush_r+0x46>
 8008372:	6863      	ldr	r3, [r4, #4]
 8008374:	1ac0      	subs	r0, r0, r3
 8008376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008378:	b10b      	cbz	r3, 800837e <__sflush_r+0x46>
 800837a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800837c:	1ac0      	subs	r0, r0, r3
 800837e:	2300      	movs	r3, #0
 8008380:	4602      	mov	r2, r0
 8008382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008384:	6a21      	ldr	r1, [r4, #32]
 8008386:	4628      	mov	r0, r5
 8008388:	47b0      	blx	r6
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	d106      	bne.n	800839e <__sflush_r+0x66>
 8008390:	6829      	ldr	r1, [r5, #0]
 8008392:	291d      	cmp	r1, #29
 8008394:	d82c      	bhi.n	80083f0 <__sflush_r+0xb8>
 8008396:	4a2a      	ldr	r2, [pc, #168]	; (8008440 <__sflush_r+0x108>)
 8008398:	40ca      	lsrs	r2, r1
 800839a:	07d6      	lsls	r6, r2, #31
 800839c:	d528      	bpl.n	80083f0 <__sflush_r+0xb8>
 800839e:	2200      	movs	r2, #0
 80083a0:	6062      	str	r2, [r4, #4]
 80083a2:	04d9      	lsls	r1, r3, #19
 80083a4:	6922      	ldr	r2, [r4, #16]
 80083a6:	6022      	str	r2, [r4, #0]
 80083a8:	d504      	bpl.n	80083b4 <__sflush_r+0x7c>
 80083aa:	1c42      	adds	r2, r0, #1
 80083ac:	d101      	bne.n	80083b2 <__sflush_r+0x7a>
 80083ae:	682b      	ldr	r3, [r5, #0]
 80083b0:	b903      	cbnz	r3, 80083b4 <__sflush_r+0x7c>
 80083b2:	6560      	str	r0, [r4, #84]	; 0x54
 80083b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083b6:	602f      	str	r7, [r5, #0]
 80083b8:	2900      	cmp	r1, #0
 80083ba:	d0ca      	beq.n	8008352 <__sflush_r+0x1a>
 80083bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c0:	4299      	cmp	r1, r3
 80083c2:	d002      	beq.n	80083ca <__sflush_r+0x92>
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 f8fb 	bl	80085c0 <_free_r>
 80083ca:	2000      	movs	r0, #0
 80083cc:	6360      	str	r0, [r4, #52]	; 0x34
 80083ce:	e7c1      	b.n	8008354 <__sflush_r+0x1c>
 80083d0:	6a21      	ldr	r1, [r4, #32]
 80083d2:	2301      	movs	r3, #1
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b0      	blx	r6
 80083d8:	1c41      	adds	r1, r0, #1
 80083da:	d1c7      	bne.n	800836c <__sflush_r+0x34>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0c4      	beq.n	800836c <__sflush_r+0x34>
 80083e2:	2b1d      	cmp	r3, #29
 80083e4:	d001      	beq.n	80083ea <__sflush_r+0xb2>
 80083e6:	2b16      	cmp	r3, #22
 80083e8:	d101      	bne.n	80083ee <__sflush_r+0xb6>
 80083ea:	602f      	str	r7, [r5, #0]
 80083ec:	e7b1      	b.n	8008352 <__sflush_r+0x1a>
 80083ee:	89a3      	ldrh	r3, [r4, #12]
 80083f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	e7ad      	b.n	8008354 <__sflush_r+0x1c>
 80083f8:	690f      	ldr	r7, [r1, #16]
 80083fa:	2f00      	cmp	r7, #0
 80083fc:	d0a9      	beq.n	8008352 <__sflush_r+0x1a>
 80083fe:	0793      	lsls	r3, r2, #30
 8008400:	680e      	ldr	r6, [r1, #0]
 8008402:	bf08      	it	eq
 8008404:	694b      	ldreq	r3, [r1, #20]
 8008406:	600f      	str	r7, [r1, #0]
 8008408:	bf18      	it	ne
 800840a:	2300      	movne	r3, #0
 800840c:	eba6 0807 	sub.w	r8, r6, r7
 8008410:	608b      	str	r3, [r1, #8]
 8008412:	f1b8 0f00 	cmp.w	r8, #0
 8008416:	dd9c      	ble.n	8008352 <__sflush_r+0x1a>
 8008418:	6a21      	ldr	r1, [r4, #32]
 800841a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800841c:	4643      	mov	r3, r8
 800841e:	463a      	mov	r2, r7
 8008420:	4628      	mov	r0, r5
 8008422:	47b0      	blx	r6
 8008424:	2800      	cmp	r0, #0
 8008426:	dc06      	bgt.n	8008436 <__sflush_r+0xfe>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842e:	81a3      	strh	r3, [r4, #12]
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	e78e      	b.n	8008354 <__sflush_r+0x1c>
 8008436:	4407      	add	r7, r0
 8008438:	eba8 0800 	sub.w	r8, r8, r0
 800843c:	e7e9      	b.n	8008412 <__sflush_r+0xda>
 800843e:	bf00      	nop
 8008440:	20400001 	.word	0x20400001

08008444 <_fflush_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	690b      	ldr	r3, [r1, #16]
 8008448:	4605      	mov	r5, r0
 800844a:	460c      	mov	r4, r1
 800844c:	b913      	cbnz	r3, 8008454 <_fflush_r+0x10>
 800844e:	2500      	movs	r5, #0
 8008450:	4628      	mov	r0, r5
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	b118      	cbz	r0, 800845e <_fflush_r+0x1a>
 8008456:	6983      	ldr	r3, [r0, #24]
 8008458:	b90b      	cbnz	r3, 800845e <_fflush_r+0x1a>
 800845a:	f7ff f98f 	bl	800777c <__sinit>
 800845e:	4b14      	ldr	r3, [pc, #80]	; (80084b0 <_fflush_r+0x6c>)
 8008460:	429c      	cmp	r4, r3
 8008462:	d11b      	bne.n	800849c <_fflush_r+0x58>
 8008464:	686c      	ldr	r4, [r5, #4]
 8008466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0ef      	beq.n	800844e <_fflush_r+0xa>
 800846e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008470:	07d0      	lsls	r0, r2, #31
 8008472:	d404      	bmi.n	800847e <_fflush_r+0x3a>
 8008474:	0599      	lsls	r1, r3, #22
 8008476:	d402      	bmi.n	800847e <_fflush_r+0x3a>
 8008478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800847a:	f7ff fa54 	bl	8007926 <__retarget_lock_acquire_recursive>
 800847e:	4628      	mov	r0, r5
 8008480:	4621      	mov	r1, r4
 8008482:	f7ff ff59 	bl	8008338 <__sflush_r>
 8008486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008488:	07da      	lsls	r2, r3, #31
 800848a:	4605      	mov	r5, r0
 800848c:	d4e0      	bmi.n	8008450 <_fflush_r+0xc>
 800848e:	89a3      	ldrh	r3, [r4, #12]
 8008490:	059b      	lsls	r3, r3, #22
 8008492:	d4dd      	bmi.n	8008450 <_fflush_r+0xc>
 8008494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008496:	f7ff fa47 	bl	8007928 <__retarget_lock_release_recursive>
 800849a:	e7d9      	b.n	8008450 <_fflush_r+0xc>
 800849c:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <_fflush_r+0x70>)
 800849e:	429c      	cmp	r4, r3
 80084a0:	d101      	bne.n	80084a6 <_fflush_r+0x62>
 80084a2:	68ac      	ldr	r4, [r5, #8]
 80084a4:	e7df      	b.n	8008466 <_fflush_r+0x22>
 80084a6:	4b04      	ldr	r3, [pc, #16]	; (80084b8 <_fflush_r+0x74>)
 80084a8:	429c      	cmp	r4, r3
 80084aa:	bf08      	it	eq
 80084ac:	68ec      	ldreq	r4, [r5, #12]
 80084ae:	e7da      	b.n	8008466 <_fflush_r+0x22>
 80084b0:	08008b88 	.word	0x08008b88
 80084b4:	08008ba8 	.word	0x08008ba8
 80084b8:	08008b68 	.word	0x08008b68

080084bc <_lseek_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	; (80084dc <_lseek_r+0x20>)
 80084c0:	4604      	mov	r4, r0
 80084c2:	4608      	mov	r0, r1
 80084c4:	4611      	mov	r1, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	602a      	str	r2, [r5, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f7f8 fc74 	bl	8000db8 <_lseek>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_lseek_r+0x1e>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	b103      	cbz	r3, 80084da <_lseek_r+0x1e>
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	20004a48 	.word	0x20004a48

080084e0 <__swhatbuf_r>:
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	460e      	mov	r6, r1
 80084e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084e8:	2900      	cmp	r1, #0
 80084ea:	b096      	sub	sp, #88	; 0x58
 80084ec:	4614      	mov	r4, r2
 80084ee:	461d      	mov	r5, r3
 80084f0:	da07      	bge.n	8008502 <__swhatbuf_r+0x22>
 80084f2:	2300      	movs	r3, #0
 80084f4:	602b      	str	r3, [r5, #0]
 80084f6:	89b3      	ldrh	r3, [r6, #12]
 80084f8:	061a      	lsls	r2, r3, #24
 80084fa:	d410      	bmi.n	800851e <__swhatbuf_r+0x3e>
 80084fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008500:	e00e      	b.n	8008520 <__swhatbuf_r+0x40>
 8008502:	466a      	mov	r2, sp
 8008504:	f000 f902 	bl	800870c <_fstat_r>
 8008508:	2800      	cmp	r0, #0
 800850a:	dbf2      	blt.n	80084f2 <__swhatbuf_r+0x12>
 800850c:	9a01      	ldr	r2, [sp, #4]
 800850e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008512:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008516:	425a      	negs	r2, r3
 8008518:	415a      	adcs	r2, r3
 800851a:	602a      	str	r2, [r5, #0]
 800851c:	e7ee      	b.n	80084fc <__swhatbuf_r+0x1c>
 800851e:	2340      	movs	r3, #64	; 0x40
 8008520:	2000      	movs	r0, #0
 8008522:	6023      	str	r3, [r4, #0]
 8008524:	b016      	add	sp, #88	; 0x58
 8008526:	bd70      	pop	{r4, r5, r6, pc}

08008528 <__smakebuf_r>:
 8008528:	898b      	ldrh	r3, [r1, #12]
 800852a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800852c:	079d      	lsls	r5, r3, #30
 800852e:	4606      	mov	r6, r0
 8008530:	460c      	mov	r4, r1
 8008532:	d507      	bpl.n	8008544 <__smakebuf_r+0x1c>
 8008534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	6123      	str	r3, [r4, #16]
 800853c:	2301      	movs	r3, #1
 800853e:	6163      	str	r3, [r4, #20]
 8008540:	b002      	add	sp, #8
 8008542:	bd70      	pop	{r4, r5, r6, pc}
 8008544:	ab01      	add	r3, sp, #4
 8008546:	466a      	mov	r2, sp
 8008548:	f7ff ffca 	bl	80084e0 <__swhatbuf_r>
 800854c:	9900      	ldr	r1, [sp, #0]
 800854e:	4605      	mov	r5, r0
 8008550:	4630      	mov	r0, r6
 8008552:	f7ff fa01 	bl	8007958 <_malloc_r>
 8008556:	b948      	cbnz	r0, 800856c <__smakebuf_r+0x44>
 8008558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800855c:	059a      	lsls	r2, r3, #22
 800855e:	d4ef      	bmi.n	8008540 <__smakebuf_r+0x18>
 8008560:	f023 0303 	bic.w	r3, r3, #3
 8008564:	f043 0302 	orr.w	r3, r3, #2
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	e7e3      	b.n	8008534 <__smakebuf_r+0xc>
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <__smakebuf_r+0x7c>)
 800856e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	6020      	str	r0, [r4, #0]
 8008574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008578:	81a3      	strh	r3, [r4, #12]
 800857a:	9b00      	ldr	r3, [sp, #0]
 800857c:	6163      	str	r3, [r4, #20]
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	6120      	str	r0, [r4, #16]
 8008582:	b15b      	cbz	r3, 800859c <__smakebuf_r+0x74>
 8008584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f8d1 	bl	8008730 <_isatty_r>
 800858e:	b128      	cbz	r0, 800859c <__smakebuf_r+0x74>
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	f043 0301 	orr.w	r3, r3, #1
 800859a:	81a3      	strh	r3, [r4, #12]
 800859c:	89a0      	ldrh	r0, [r4, #12]
 800859e:	4305      	orrs	r5, r0
 80085a0:	81a5      	strh	r5, [r4, #12]
 80085a2:	e7cd      	b.n	8008540 <__smakebuf_r+0x18>
 80085a4:	08007715 	.word	0x08007715

080085a8 <__malloc_lock>:
 80085a8:	4801      	ldr	r0, [pc, #4]	; (80085b0 <__malloc_lock+0x8>)
 80085aa:	f7ff b9bc 	b.w	8007926 <__retarget_lock_acquire_recursive>
 80085ae:	bf00      	nop
 80085b0:	20004a40 	.word	0x20004a40

080085b4 <__malloc_unlock>:
 80085b4:	4801      	ldr	r0, [pc, #4]	; (80085bc <__malloc_unlock+0x8>)
 80085b6:	f7ff b9b7 	b.w	8007928 <__retarget_lock_release_recursive>
 80085ba:	bf00      	nop
 80085bc:	20004a40 	.word	0x20004a40

080085c0 <_free_r>:
 80085c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085c2:	2900      	cmp	r1, #0
 80085c4:	d048      	beq.n	8008658 <_free_r+0x98>
 80085c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ca:	9001      	str	r0, [sp, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f1a1 0404 	sub.w	r4, r1, #4
 80085d2:	bfb8      	it	lt
 80085d4:	18e4      	addlt	r4, r4, r3
 80085d6:	f7ff ffe7 	bl	80085a8 <__malloc_lock>
 80085da:	4a20      	ldr	r2, [pc, #128]	; (800865c <_free_r+0x9c>)
 80085dc:	9801      	ldr	r0, [sp, #4]
 80085de:	6813      	ldr	r3, [r2, #0]
 80085e0:	4615      	mov	r5, r2
 80085e2:	b933      	cbnz	r3, 80085f2 <_free_r+0x32>
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	6014      	str	r4, [r2, #0]
 80085e8:	b003      	add	sp, #12
 80085ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085ee:	f7ff bfe1 	b.w	80085b4 <__malloc_unlock>
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	d90b      	bls.n	800860e <_free_r+0x4e>
 80085f6:	6821      	ldr	r1, [r4, #0]
 80085f8:	1862      	adds	r2, r4, r1
 80085fa:	4293      	cmp	r3, r2
 80085fc:	bf04      	itt	eq
 80085fe:	681a      	ldreq	r2, [r3, #0]
 8008600:	685b      	ldreq	r3, [r3, #4]
 8008602:	6063      	str	r3, [r4, #4]
 8008604:	bf04      	itt	eq
 8008606:	1852      	addeq	r2, r2, r1
 8008608:	6022      	streq	r2, [r4, #0]
 800860a:	602c      	str	r4, [r5, #0]
 800860c:	e7ec      	b.n	80085e8 <_free_r+0x28>
 800860e:	461a      	mov	r2, r3
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	b10b      	cbz	r3, 8008618 <_free_r+0x58>
 8008614:	42a3      	cmp	r3, r4
 8008616:	d9fa      	bls.n	800860e <_free_r+0x4e>
 8008618:	6811      	ldr	r1, [r2, #0]
 800861a:	1855      	adds	r5, r2, r1
 800861c:	42a5      	cmp	r5, r4
 800861e:	d10b      	bne.n	8008638 <_free_r+0x78>
 8008620:	6824      	ldr	r4, [r4, #0]
 8008622:	4421      	add	r1, r4
 8008624:	1854      	adds	r4, r2, r1
 8008626:	42a3      	cmp	r3, r4
 8008628:	6011      	str	r1, [r2, #0]
 800862a:	d1dd      	bne.n	80085e8 <_free_r+0x28>
 800862c:	681c      	ldr	r4, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	6053      	str	r3, [r2, #4]
 8008632:	4421      	add	r1, r4
 8008634:	6011      	str	r1, [r2, #0]
 8008636:	e7d7      	b.n	80085e8 <_free_r+0x28>
 8008638:	d902      	bls.n	8008640 <_free_r+0x80>
 800863a:	230c      	movs	r3, #12
 800863c:	6003      	str	r3, [r0, #0]
 800863e:	e7d3      	b.n	80085e8 <_free_r+0x28>
 8008640:	6825      	ldr	r5, [r4, #0]
 8008642:	1961      	adds	r1, r4, r5
 8008644:	428b      	cmp	r3, r1
 8008646:	bf04      	itt	eq
 8008648:	6819      	ldreq	r1, [r3, #0]
 800864a:	685b      	ldreq	r3, [r3, #4]
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	bf04      	itt	eq
 8008650:	1949      	addeq	r1, r1, r5
 8008652:	6021      	streq	r1, [r4, #0]
 8008654:	6054      	str	r4, [r2, #4]
 8008656:	e7c7      	b.n	80085e8 <_free_r+0x28>
 8008658:	b003      	add	sp, #12
 800865a:	bd30      	pop	{r4, r5, pc}
 800865c:	20004798 	.word	0x20004798

08008660 <_read_r>:
 8008660:	b538      	push	{r3, r4, r5, lr}
 8008662:	4d07      	ldr	r5, [pc, #28]	; (8008680 <_read_r+0x20>)
 8008664:	4604      	mov	r4, r0
 8008666:	4608      	mov	r0, r1
 8008668:	4611      	mov	r1, r2
 800866a:	2200      	movs	r2, #0
 800866c:	602a      	str	r2, [r5, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	f7f8 fb42 	bl	8000cf8 <_read>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	d102      	bne.n	800867e <_read_r+0x1e>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	b103      	cbz	r3, 800867e <_read_r+0x1e>
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	bd38      	pop	{r3, r4, r5, pc}
 8008680:	20004a48 	.word	0x20004a48

08008684 <_raise_r>:
 8008684:	291f      	cmp	r1, #31
 8008686:	b538      	push	{r3, r4, r5, lr}
 8008688:	4604      	mov	r4, r0
 800868a:	460d      	mov	r5, r1
 800868c:	d904      	bls.n	8008698 <_raise_r+0x14>
 800868e:	2316      	movs	r3, #22
 8008690:	6003      	str	r3, [r0, #0]
 8008692:	f04f 30ff 	mov.w	r0, #4294967295
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800869a:	b112      	cbz	r2, 80086a2 <_raise_r+0x1e>
 800869c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086a0:	b94b      	cbnz	r3, 80086b6 <_raise_r+0x32>
 80086a2:	4620      	mov	r0, r4
 80086a4:	f000 f830 	bl	8008708 <_getpid_r>
 80086a8:	462a      	mov	r2, r5
 80086aa:	4601      	mov	r1, r0
 80086ac:	4620      	mov	r0, r4
 80086ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b2:	f000 b817 	b.w	80086e4 <_kill_r>
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d00a      	beq.n	80086d0 <_raise_r+0x4c>
 80086ba:	1c59      	adds	r1, r3, #1
 80086bc:	d103      	bne.n	80086c6 <_raise_r+0x42>
 80086be:	2316      	movs	r3, #22
 80086c0:	6003      	str	r3, [r0, #0]
 80086c2:	2001      	movs	r0, #1
 80086c4:	e7e7      	b.n	8008696 <_raise_r+0x12>
 80086c6:	2400      	movs	r4, #0
 80086c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086cc:	4628      	mov	r0, r5
 80086ce:	4798      	blx	r3
 80086d0:	2000      	movs	r0, #0
 80086d2:	e7e0      	b.n	8008696 <_raise_r+0x12>

080086d4 <raise>:
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <raise+0xc>)
 80086d6:	4601      	mov	r1, r0
 80086d8:	6818      	ldr	r0, [r3, #0]
 80086da:	f7ff bfd3 	b.w	8008684 <_raise_r>
 80086de:	bf00      	nop
 80086e0:	20000098 	.word	0x20000098

080086e4 <_kill_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d07      	ldr	r5, [pc, #28]	; (8008704 <_kill_r+0x20>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	4611      	mov	r1, r2
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	f7f8 fae7 	bl	8000cc4 <_kill>
 80086f6:	1c43      	adds	r3, r0, #1
 80086f8:	d102      	bne.n	8008700 <_kill_r+0x1c>
 80086fa:	682b      	ldr	r3, [r5, #0]
 80086fc:	b103      	cbz	r3, 8008700 <_kill_r+0x1c>
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	20004a48 	.word	0x20004a48

08008708 <_getpid_r>:
 8008708:	f7f8 bad4 	b.w	8000cb4 <_getpid>

0800870c <_fstat_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d07      	ldr	r5, [pc, #28]	; (800872c <_fstat_r+0x20>)
 8008710:	2300      	movs	r3, #0
 8008712:	4604      	mov	r4, r0
 8008714:	4608      	mov	r0, r1
 8008716:	4611      	mov	r1, r2
 8008718:	602b      	str	r3, [r5, #0]
 800871a:	f7f8 fb32 	bl	8000d82 <_fstat>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	d102      	bne.n	8008728 <_fstat_r+0x1c>
 8008722:	682b      	ldr	r3, [r5, #0]
 8008724:	b103      	cbz	r3, 8008728 <_fstat_r+0x1c>
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	bf00      	nop
 800872c:	20004a48 	.word	0x20004a48

08008730 <_isatty_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4d06      	ldr	r5, [pc, #24]	; (800874c <_isatty_r+0x1c>)
 8008734:	2300      	movs	r3, #0
 8008736:	4604      	mov	r4, r0
 8008738:	4608      	mov	r0, r1
 800873a:	602b      	str	r3, [r5, #0]
 800873c:	f7f8 fb31 	bl	8000da2 <_isatty>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d102      	bne.n	800874a <_isatty_r+0x1a>
 8008744:	682b      	ldr	r3, [r5, #0]
 8008746:	b103      	cbz	r3, 800874a <_isatty_r+0x1a>
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	20004a48 	.word	0x20004a48

08008750 <_init>:
 8008750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008752:	bf00      	nop
 8008754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008756:	bc08      	pop	{r3}
 8008758:	469e      	mov	lr, r3
 800875a:	4770      	bx	lr

0800875c <_fini>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	bf00      	nop
 8008760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008762:	bc08      	pop	{r3}
 8008764:	469e      	mov	lr, r3
 8008766:	4770      	bx	lr
