
modbus_rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000844c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f8  080088f8  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080088f8  080088f8  000188f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008900  08008900  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008904  08008904  00018904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08008908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          00006710  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006808  20006808  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026fd5  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005209  00000000  00000000  000470fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  0004c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001528  00000000  00000000  0004da18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025659  00000000  00000000  0004ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc5a  00000000  00000000  00074599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6162  00000000  00000000  000921f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00168355  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000606c  00000000  00000000  001683a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085c4 	.word	0x080085c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080085c4 	.word	0x080085c4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80004d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a06      	ldr	r2, [pc, #24]	; (80004f8 <vApplicationGetIdleTaskMemory+0x30>)
 80004de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000114 	.word	0x20000114
 80004f8:	200001d0 	.word	0x200001d0

080004fc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	; (8000528 <vApplicationGetTimerTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <vApplicationGetTimerTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	200003d0 	.word	0x200003d0
 800052c:	2000048c 	.word	0x2000048c

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fbc3 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f851 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f937 	bl	80007b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000542:	f000 f915 	bl	8000770 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000546:	f000 f8e9 	bl	800071c <MX_USART2_UART_Init>
  MX_TIM7_Init();
 800054a:	f000 f8b1 	bl	80006b0 <MX_TIM7_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054e:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <main+0x98>)
 8000550:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000554:	461d      	mov	r5, r3
 8000556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000562:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f003 f98e 	bl	800388a <osThreadCreate>
 800056e:	4603      	mov	r3, r0
 8000570:	4a16      	ldr	r2, [pc, #88]	; (80005cc <main+0x9c>)
 8000572:	6013      	str	r3, [r2, #0]
  osThreadDef(ModbusRTUTask, ModbusSlaveRTUTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 128);
  mbSlavePollTask_h = osThreadCreate(osThread(ModbusRTUTask), NULL);
#endif

#if MB_MASTER_RTU_ENABLED > 0
  ModbusMasterStackInit();
 8000574:	f007 fdf4 	bl	8008160 <ModbusMasterStackInit>
  osThreadDef(mbMasterTask, ModbusMasterRTUTask, osPriorityNormal + 1, 0, configMINIMAL_STACK_SIZE + 128);
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <main+0xa0>)
 800057a:	f107 0420 	add.w	r4, r7, #32
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mbMasterPollTask_h = osThreadCreate(osThread(mbMasterTask), NULL);
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f979 	bl	800388a <osThreadCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <main+0xa4>)
 800059c:	6013      	str	r3, [r2, #0]

  osThreadDef(mbMasterUserTask, ModbusMasterUserRTUTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE + 128);
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <main+0xa8>)
 80005a0:	1d3c      	adds	r4, r7, #4
 80005a2:	461d      	mov	r5, r3
 80005a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mbMasterUserTask_h = osThreadCreate(osThread(mbMasterUserTask), NULL);
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 f968 	bl	800388a <osThreadCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <main+0xac>)
 80005be:	6013      	str	r3, [r2, #0]
#endif /* MB_MASTER_RTU_ENABLED */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c0:	f003 f95c 	bl	800387c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	e7fe      	b.n	80005c4 <main+0x94>
 80005c6:	bf00      	nop
 80005c8:	0800860c 	.word	0x0800860c
 80005cc:	200049c4 	.word	0x200049c4
 80005d0:	08008628 	.word	0x08008628
 80005d4:	20004a30 	.word	0x20004a30
 80005d8:	08008644 	.word	0x08008644
 80005dc:	200049cc 	.word	0x200049cc

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 ff1a 	bl	8008428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <SystemClock_Config+0xc8>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <SystemClock_Config+0xc8>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <SystemClock_Config+0xc8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <SystemClock_Config+0xcc>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <SystemClock_Config+0xcc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000654:	2348      	movs	r3, #72	; 0x48
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f981 	bl	800196c <HAL_RCC_OscConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000670:	f000 f90a 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	230f      	movs	r3, #15
 8000676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000678:	2302      	movs	r3, #2
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2102      	movs	r1, #2
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fbe3 	bl	8001e5c <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800069c:	f000 f8f4 	bl	8000888 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	; 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b6:	463b      	mov	r3, r7
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM7_Init+0x64>)
 80006c0:	4a15      	ldr	r2, [pc, #84]	; (8000718 <MX_TIM7_Init+0x68>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_TIM7_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_TIM7_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_TIM7_Init+0x64>)
 80006d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_TIM7_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_TIM7_Init+0x64>)
 80006e0:	f001 fdea 	bl	80022b8 <HAL_TIM_Base_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80006ea:	f000 f8cd 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_TIM7_Init+0x64>)
 80006fc:	f002 f89c 	bl	8002838 <HAL_TIMEx_MasterConfigSynchronization>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000706:	f000 f8bf 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20004a78 	.word	0x20004a78
 8000718:	40001400 	.word	0x40001400

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f002 f900 	bl	8002958 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f893 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20004a34 	.word	0x20004a34
 800076c:	40004400 	.word	0x40004400

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_DMA_Init+0x3c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <MX_DMA_Init+0x3c>)
 8000780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_DMA_Init+0x3c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2105      	movs	r1, #5
 8000796:	2011      	movs	r0, #17
 8000798:	f000 fb8c 	bl	8000eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800079c:	2011      	movs	r0, #17
 800079e:	f000 fba5 	bl	8000eec <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b20      	ldr	r3, [pc, #128]	; (800084c <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a1f      	ldr	r2, [pc, #124]	; (800084c <MX_GPIO_Init+0x9c>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_GPIO_Init+0x9c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_GPIO_Init+0x9c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <MX_GPIO_Init+0x9c>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_GPIO_Init+0x9c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_GPIO_Init+0x9c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <MX_GPIO_Init+0x9c>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_GPIO_Init+0x9c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <MX_GPIO_Init+0xa0>)
 8000822:	f001 f889 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD5_Pin;
 8000826:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_GPIO_Init+0xa0>)
 8000840:	f000 fede 	bl	8001600 <HAL_GPIO_Init>

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40020c00 	.word	0x40020c00

08000854 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f003 f860 	bl	8003922 <osDelay>
 8000862:	e7fb      	b.n	800085c <StartDefaultTask+0x8>

08000864 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d101      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000876:	f000 fa45 	bl	8000d04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40001000 	.word	0x40001000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_MspInit+0x54>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a11      	ldr	r2, [pc, #68]	; (80008e8 <HAL_MspInit+0x54>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x54>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x54>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x54>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x54>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 faeb 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_TIM_Base_MspInit+0x48>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d115      	bne.n	800092a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	6413      	str	r3, [r2, #64]	; 0x40
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_TIM_Base_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	2037      	movs	r0, #55	; 0x37
 8000920:	f000 fac8 	bl	8000eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000924:	2037      	movs	r0, #55	; 0x37
 8000926:	f000 fae1 	bl	8000eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40001400 	.word	0x40001400
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a34      	ldr	r2, [pc, #208]	; (8000a2c <HAL_UART_MspInit+0xf0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d162      	bne.n	8000a24 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b33      	ldr	r3, [pc, #204]	; (8000a30 <HAL_UART_MspInit+0xf4>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <HAL_UART_MspInit+0xf4>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b30      	ldr	r3, [pc, #192]	; (8000a30 <HAL_UART_MspInit+0xf4>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <HAL_UART_MspInit+0xf4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a2b      	ldr	r2, [pc, #172]	; (8000a30 <HAL_UART_MspInit+0xf4>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <HAL_UART_MspInit+0xf4>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4820      	ldr	r0, [pc, #128]	; (8000a34 <HAL_UART_MspInit+0xf8>)
 80009b2:	f000 fe25 	bl	8001600 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009b8:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <HAL_UART_MspInit+0x100>)
 80009ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009f8:	480f      	ldr	r0, [pc, #60]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 80009fa:	f000 fa85 	bl	8000f08 <HAL_DMA_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000a04:	f7ff ff40 	bl	8000888 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_UART_MspInit+0xfc>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2105      	movs	r1, #5
 8000a18:	2026      	movs	r0, #38	; 0x26
 8000a1a:	f000 fa4b 	bl	8000eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a1e:	2026      	movs	r0, #38	; 0x26
 8000a20:	f000 fa64 	bl	8000eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3728      	adds	r7, #40	; 0x28
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	200049d0 	.word	0x200049d0
 8000a3c:	400260a0 	.word	0x400260a0

08000a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	2036      	movs	r0, #54	; 0x36
 8000a56:	f000 fa2d 	bl	8000eb4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a5a:	2036      	movs	r0, #54	; 0x36
 8000a5c:	f000 fa46 	bl	8000eec <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a6a:	f043 0310 	orr.w	r3, r3, #16
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_InitTick+0xa4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 0210 	add.w	r2, r7, #16
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fbe4 	bl	8002254 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a8c:	f001 fbba 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8000a90:	4603      	mov	r3, r0
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_InitTick+0xa8>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_InitTick+0xac>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_InitTick+0xb0>)
 8000aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_InitTick+0xac>)
 8000aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_InitTick+0xac>)
 8000ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_InitTick+0xac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_InitTick+0xac>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_InitTick+0xac>)
 8000ac6:	f001 fbf7 	bl	80022b8 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d104      	bne.n	8000ada <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <HAL_InitTick+0xac>)
 8000ad2:	f001 fc41 	bl	8002358 <HAL_TIM_Base_Start_IT>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	20004ac0 	.word	0x20004ac0
 8000af0:	40001000 	.word	0x40001000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
 // uint32_t tmp_flag = 0;//__HAL_DMA_GET_FLAG(&hdma_usart2_tx, DMA_FLAG_TCIF1_6);
  uint32_t tmp_it_source = __HAL_DMA_GET_IT_SOURCE(&hdma_usart2_tx, DMA_IT_TC);
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <DMA1_Stream6_IRQHandler+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	607b      	str	r3, [r7, #4]
  if((tmp_it_source != RESET)) {
//	  osSignalSet(mbPollTask_h, MB_TX_DMA_COMPLETE_EVT);
  }

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <DMA1_Stream6_IRQHandler+0x20>)
 8000b34:	f000 fb28 	bl	8001188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200049d0 	.word	0x200049d0

08000b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <USART2_IRQHandler+0x84>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0320 	and.w	r3, r3, #32
 8000b54:	2b20      	cmp	r3, #32
 8000b56:	bf0c      	ite	eq
 8000b58:	2301      	moveq	r3, #1
 8000b5a:	2300      	movne	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8000b60:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <USART2_IRQHandler+0x84>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f003 0320 	and.w	r3, r3, #32
 8000b6a:	60bb      	str	r3, [r7, #8]
  
  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d011      	beq.n	8000b96 <USART2_IRQHandler+0x52>
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00e      	beq.n	8000b96 <USART2_IRQHandler+0x52>
#if MB_SLAVE_RTU_ENABLED > 0
    pxMBFrameCBByteReceived();
#endif /* MB_SLAVE_RTU_ENABLED */
#if MB_MASTER_RTU_ENABLED > 0
    pxMBMasterFrameCBByteReceived();
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <USART2_IRQHandler+0x88>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4798      	blx	r3
#endif /* MB_MASTER_RTU_ENABLED */
    __HAL_UART_CLEAR_PEFLAG(&huart2);    
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <USART2_IRQHandler+0x84>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <USART2_IRQHandler+0x84>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
    return;
 8000b94:	e014      	b.n	8000bc0 <USART2_IRQHandler+0x7c>
  }
  
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET)) {
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <USART2_IRQHandler+0x84>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba0:	2b80      	cmp	r3, #128	; 0x80
 8000ba2:	d10a      	bne.n	8000bba <USART2_IRQHandler+0x76>
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <USART2_IRQHandler+0x84>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <USART2_IRQHandler+0x76>
#if MB_SLAVE_RTU_ENABLED > 0
    pxMBFrameCBTransmitterEmpty();    
#endif /* MB_SLAVE_RTU_ENABLED */
#if MB_MASTER_RTU_ENABLED > 0
    pxMBMasterFrameCBTransmitterEmpty();
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <USART2_IRQHandler+0x8c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4798      	blx	r3
#endif /* MB_MASTER_RTU_ENABLED */
    return ;
 8000bb8:	e002      	b.n	8000bc0 <USART2_IRQHandler+0x7c>
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <USART2_IRQHandler+0x84>)
 8000bbc:	f001 ffac 	bl	8002b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20004a34 	.word	0x20004a34
 8000bcc:	20004b58 	.word	0x20004b58
 8000bd0:	20004b54 	.word	0x20004b54

08000bd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <TIM6_DAC_IRQHandler+0x10>)
 8000bda:	f001 fc5c 	bl	8002496 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20004ac0 	.word	0x20004ac0

08000be8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET) {
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <TIM7_IRQHandler+0x54>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	691b      	ldr	r3, [r3, #16]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d11b      	bne.n	8000c32 <TIM7_IRQHandler+0x4a>
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <TIM7_IRQHandler+0x54>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d114      	bne.n	8000c32 <TIM7_IRQHandler+0x4a>
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <TIM7_IRQHandler+0x54>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f06f 0201 	mvn.w	r2, #1
 8000c10:	611a      	str	r2, [r3, #16]
    if (usT35TimeOut50us == 0)
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <TIM7_IRQHandler+0x58>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d103      	bne.n	8000c24 <TIM7_IRQHandler+0x3c>
    {
#if MB_SLAVE_RTU_ENABLED > 0
      pxMBPortCBTimerExpired();
#endif
#if MB_MASTER_RTU_ENABLED > 0
      pxMBMasterPortCBTimerExpired();
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <TIM7_IRQHandler+0x5c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4798      	blx	r3
 8000c22:	e006      	b.n	8000c32 <TIM7_IRQHandler+0x4a>
#endif
    }else {
    	usT35TimeOut50us--;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <TIM7_IRQHandler+0x58>)
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <TIM7_IRQHandler+0x58>)
 8000c30:	801a      	strh	r2, [r3, #0]
    }
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c32:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM7_IRQHandler+0x54>)
 8000c34:	f001 fc2f 	bl	8002496 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20004a78 	.word	0x20004a78
 8000c40:	200047a8 	.word	0x200047a8
 8000c44:	20004b5c 	.word	0x20004b5c

08000c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c72:	490e      	ldr	r1, [pc, #56]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c74:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c88:	4c0b      	ldr	r4, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c96:	f7ff ffd7 	bl	8000c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f007 fb91 	bl	80083c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fc47 	bl	8000530 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8000cb0:	08008908 	.word	0x08008908
  ldr r2, =_sbss
 8000cb4:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8000cb8:	20006808 	.word	0x20006808

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <HAL_Init+0x40>)
 8000cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd0:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_Init+0x40>)
 8000cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_Init+0x40>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce8:	2003      	movs	r0, #3
 8000cea:	f000 f8d8 	bl	8000e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cee:	200f      	movs	r0, #15
 8000cf0:	f7ff fea6 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf4:	f7ff fdce 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023c00 	.word	0x40023c00

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20004b08 	.word	0x20004b08

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20004b08 	.word	0x20004b08

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff4c 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec6:	f7ff ff61 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6978      	ldr	r0, [r7, #20]
 8000ed2:	f7ff ffb1 	bl	8000e38 <NVIC_EncodePriority>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff80 	bl	8000de4 <__NVIC_SetPriority>
}
 8000ee4:	bf00      	nop
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff54 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff ff0a 	bl	8000d2c <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e099      	b.n	8001058 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2202      	movs	r2, #2
 8000f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f44:	e00f      	b.n	8000f66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f46:	f7ff fef1 	bl	8000d2c <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	d908      	bls.n	8000f66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2220      	movs	r2, #32
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e078      	b.n	8001058 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e8      	bne.n	8000f46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <HAL_DMA_Init+0x158>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d107      	bne.n	8000fd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f023 0307 	bic.w	r3, r3, #7
 8000fe6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d117      	bne.n	800102a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4313      	orrs	r3, r2
 8001002:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00e      	beq.n	800102a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 fa7b 	bl	8001508 <DMA_CheckFifoParam>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d008      	beq.n	800102a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2240      	movs	r2, #64	; 0x40
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001026:	2301      	movs	r3, #1
 8001028:	e016      	b.n	8001058 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fa32 	bl	800149c <DMA_CalcBaseAndBitshift>
 8001038:	4603      	mov	r3, r0
 800103a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001040:	223f      	movs	r2, #63	; 0x3f
 8001042:	409a      	lsls	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	f010803f 	.word	0xf010803f

08001064 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001070:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001072:	f7ff fe5b 	bl	8000d2c <HAL_GetTick>
 8001076:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d008      	beq.n	8001096 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e052      	b.n	800113c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0216 	bic.w	r2, r2, #22
 80010a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d103      	bne.n	80010c6 <HAL_DMA_Abort+0x62>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d007      	beq.n	80010d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0208 	bic.w	r2, r2, #8
 80010d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e6:	e013      	b.n	8001110 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010e8:	f7ff fe20 	bl	8000d2c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	d90c      	bls.n	8001110 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2220      	movs	r2, #32
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2203      	movs	r2, #3
 8001100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e015      	b.n	800113c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1e4      	bne.n	80010e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001122:	223f      	movs	r2, #63	; 0x3f
 8001124:	409a      	lsls	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b02      	cmp	r3, #2
 8001156:	d004      	beq.n	8001162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00c      	b.n	800117c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2205      	movs	r2, #5
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0201 	bic.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001194:	4b92      	ldr	r3, [pc, #584]	; (80013e0 <HAL_DMA_IRQHandler+0x258>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a92      	ldr	r2, [pc, #584]	; (80013e4 <HAL_DMA_IRQHandler+0x25c>)
 800119a:	fba2 2303 	umull	r2, r3, r2, r3
 800119e:	0a9b      	lsrs	r3, r3, #10
 80011a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	2208      	movs	r2, #8
 80011b4:	409a      	lsls	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d01a      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0204 	bic.w	r2, r2, #4
 80011da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	2208      	movs	r2, #8
 80011e2:	409a      	lsls	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f8:	2201      	movs	r2, #1
 80011fa:	409a      	lsls	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d012      	beq.n	800122a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	2201      	movs	r2, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001222:	f043 0202 	orr.w	r2, r3, #2
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122e:	2204      	movs	r2, #4
 8001230:	409a      	lsls	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d012      	beq.n	8001260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	2204      	movs	r2, #4
 800124e:	409a      	lsls	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001258:	f043 0204 	orr.w	r2, r3, #4
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	2210      	movs	r2, #16
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4013      	ands	r3, r2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d043      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03c      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001282:	2210      	movs	r2, #16
 8001284:	409a      	lsls	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d018      	beq.n	80012ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d108      	bne.n	80012b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d024      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
 80012b6:	e01f      	b.n	80012f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d01b      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	4798      	blx	r3
 80012c8:	e016      	b.n	80012f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0208 	bic.w	r2, r2, #8
 80012e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2220      	movs	r2, #32
 80012fe:	409a      	lsls	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 808e 	beq.w	8001426 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 8086 	beq.w	8001426 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131e:	2220      	movs	r2, #32
 8001320:	409a      	lsls	r2, r3
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b05      	cmp	r3, #5
 8001330:	d136      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0216 	bic.w	r2, r2, #22
 8001340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <HAL_DMA_IRQHandler+0x1da>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0208 	bic.w	r2, r2, #8
 8001370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001376:	223f      	movs	r2, #63	; 0x3f
 8001378:	409a      	lsls	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001392:	2b00      	cmp	r3, #0
 8001394:	d07d      	beq.n	8001492 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	4798      	blx	r3
        }
        return;
 800139e:	e078      	b.n	8001492 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d01c      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d108      	bne.n	80013ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d030      	beq.n	8001426 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
 80013cc:	e02b      	b.n	8001426 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d027      	beq.n	8001426 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	4798      	blx	r3
 80013de:	e022      	b.n	8001426 <HAL_DMA_IRQHandler+0x29e>
 80013e0:	20000000 	.word	0x20000000
 80013e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0210 	bic.w	r2, r2, #16
 8001404:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	2b00      	cmp	r3, #0
 800142c:	d032      	beq.n	8001494 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d022      	beq.n	8001480 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2205      	movs	r2, #5
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3301      	adds	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	429a      	cmp	r2, r3
 800145c:	d307      	bcc.n	800146e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1f2      	bne.n	8001452 <HAL_DMA_IRQHandler+0x2ca>
 800146c:	e000      	b.n	8001470 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800146e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	4798      	blx	r3
 8001490:	e000      	b.n	8001494 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001492:	bf00      	nop
    }
  }
}
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop

0800149c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3b10      	subs	r3, #16
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <DMA_CalcBaseAndBitshift+0x64>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <DMA_CalcBaseAndBitshift+0x68>)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d909      	bls.n	80014de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	1d1a      	adds	r2, r3, #4
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	659a      	str	r2, [r3, #88]	; 0x58
 80014dc:	e007      	b.n	80014ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014e6:	f023 0303 	bic.w	r3, r3, #3
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	aaaaaaab 	.word	0xaaaaaaab
 8001504:	08008690 	.word	0x08008690

08001508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d11f      	bne.n	8001562 <DMA_CheckFifoParam+0x5a>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d856      	bhi.n	80015d6 <DMA_CheckFifoParam+0xce>
 8001528:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <DMA_CheckFifoParam+0x28>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08001541 	.word	0x08001541
 8001534:	08001553 	.word	0x08001553
 8001538:	08001541 	.word	0x08001541
 800153c:	080015d7 	.word	0x080015d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d046      	beq.n	80015da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001550:	e043      	b.n	80015da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800155a:	d140      	bne.n	80015de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001560:	e03d      	b.n	80015de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800156a:	d121      	bne.n	80015b0 <DMA_CheckFifoParam+0xa8>
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d837      	bhi.n	80015e2 <DMA_CheckFifoParam+0xda>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <DMA_CheckFifoParam+0x70>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001589 	.word	0x08001589
 800157c:	0800158f 	.word	0x0800158f
 8001580:	08001589 	.word	0x08001589
 8001584:	080015a1 	.word	0x080015a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
      break;
 800158c:	e030      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d025      	beq.n	80015e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800159e:	e022      	b.n	80015e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015a8:	d11f      	bne.n	80015ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ae:	e01c      	b.n	80015ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d903      	bls.n	80015be <DMA_CheckFifoParam+0xb6>
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d003      	beq.n	80015c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015bc:	e018      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
      break;
 80015c2:	e015      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00e      	beq.n	80015ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
      break;
 80015d4:	e00b      	b.n	80015ee <DMA_CheckFifoParam+0xe6>
      break;
 80015d6:	bf00      	nop
 80015d8:	e00a      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
      break;
 80015da:	bf00      	nop
 80015dc:	e008      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
      break;
 80015de:	bf00      	nop
 80015e0:	e006      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
      break;
 80015e2:	bf00      	nop
 80015e4:	e004      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
      break;
 80015e6:	bf00      	nop
 80015e8:	e002      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80015ea:	bf00      	nop
 80015ec:	e000      	b.n	80015f0 <DMA_CheckFifoParam+0xe8>
      break;
 80015ee:	bf00      	nop
    }
  } 
  
  return status; 
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	e16b      	b.n	80018f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 815a 	bne.w	80018ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d005      	beq.n	8001652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164e:	2b02      	cmp	r3, #2
 8001650:	d130      	bne.n	80016b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 0201 	and.w	r2, r3, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d017      	beq.n	80016f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80b4 	beq.w	80018ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b60      	ldr	r3, [pc, #384]	; (800190c <HAL_GPIO_Init+0x30c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a5f      	ldr	r2, [pc, #380]	; (800190c <HAL_GPIO_Init+0x30c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_GPIO_Init+0x30c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a2:	4a5b      	ldr	r2, [pc, #364]	; (8001910 <HAL_GPIO_Init+0x310>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_GPIO_Init+0x314>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02b      	beq.n	8001826 <HAL_GPIO_Init+0x226>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a51      	ldr	r2, [pc, #324]	; (8001918 <HAL_GPIO_Init+0x318>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x222>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a50      	ldr	r2, [pc, #320]	; (800191c <HAL_GPIO_Init+0x31c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x21e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4f      	ldr	r2, [pc, #316]	; (8001920 <HAL_GPIO_Init+0x320>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x21a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4e      	ldr	r2, [pc, #312]	; (8001924 <HAL_GPIO_Init+0x324>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x216>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <HAL_GPIO_Init+0x328>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x212>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_GPIO_Init+0x32c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x20e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4b      	ldr	r2, [pc, #300]	; (8001930 <HAL_GPIO_Init+0x330>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x20a>
 8001806:	2307      	movs	r3, #7
 8001808:	e00e      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800180a:	2308      	movs	r3, #8
 800180c:	e00c      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800180e:	2306      	movs	r3, #6
 8001810:	e00a      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001812:	2305      	movs	r3, #5
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001816:	2304      	movs	r3, #4
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001838:	4935      	ldr	r1, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x310>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_GPIO_Init+0x334>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186a:	4a32      	ldr	r2, [pc, #200]	; (8001934 <HAL_GPIO_Init+0x334>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_GPIO_Init+0x334>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_GPIO_Init+0x334>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_GPIO_Init+0x334>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_GPIO_Init+0x334>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_GPIO_Init+0x334>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <HAL_GPIO_Init+0x334>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f ae90 	bls.w	800161c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40021400 	.word	0x40021400
 800192c:	40021800 	.word	0x40021800
 8001930:	40021c00 	.word	0x40021c00
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e264      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d075      	beq.n	8001a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800198a:	4ba3      	ldr	r3, [pc, #652]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d00c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4ba0      	ldr	r3, [pc, #640]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d112      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a2:	4b9d      	ldr	r3, [pc, #628]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ae:	d10b      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	4b99      	ldr	r3, [pc, #612]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d05b      	beq.n	8001a74 <HAL_RCC_OscConfig+0x108>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d157      	bne.n	8001a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e23f      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x74>
 80019d2:	4b91      	ldr	r3, [pc, #580]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a90      	ldr	r2, [pc, #576]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	e01d      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x98>
 80019ea:	4b8b      	ldr	r3, [pc, #556]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a8a      	ldr	r2, [pc, #552]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a87      	ldr	r2, [pc, #540]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0xb0>
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a83      	ldr	r2, [pc, #524]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a80      	ldr	r2, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff f982 	bl	8000d2c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff f97e 	bl	8000d2c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e204      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3e:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0xc0>
 8001a4a:	e014      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f96e 	bl	8000d2c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff f96a 	bl	8000d2c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1f0      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a66:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0xe8>
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d063      	beq.n	8001b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a82:	4b65      	ldr	r3, [pc, #404]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00b      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b62      	ldr	r3, [pc, #392]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a96:	2b08      	cmp	r3, #8
 8001a98:	d11c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e1c4      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001abe:	4b56      	ldr	r3, [pc, #344]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4952      	ldr	r1, [pc, #328]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad2:	e03a      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001adc:	4b4f      	ldr	r3, [pc, #316]	; (8001c1c <HAL_RCC_OscConfig+0x2b0>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f923 	bl	8000d2c <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aea:	f7ff f91f 	bl	8000d2c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1a5      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b08:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4940      	ldr	r1, [pc, #256]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_RCC_OscConfig+0x2b0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f902 	bl	8000d2c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff f8fe 	bl	8000d2c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e184      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d030      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d016      	beq.n	8001b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <HAL_RCC_OscConfig+0x2b4>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f8e2 	bl	8000d2c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f8de 	bl	8000d2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e164      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x200>
 8001b8a:	e015      	b.n	8001bb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x2b4>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f8cb 	bl	8000d2c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f8c7 	bl	8000d2c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e14d      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a0 	beq.w	8001d06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d121      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_RCC_OscConfig+0x2b8>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f88d 	bl	8000d2c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e011      	b.n	8001c3a <HAL_RCC_OscConfig+0x2ce>
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	42470000 	.word	0x42470000
 8001c20:	42470e80 	.word	0x42470e80
 8001c24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7ff f880 	bl	8000d2c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e106      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b85      	ldr	r3, [pc, #532]	; (8001e50 <HAL_RCC_OscConfig+0x4e4>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
 8001c4e:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c52:	4a80      	ldr	r2, [pc, #512]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x32a>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x312>
 8001c64:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a7a      	ldr	r2, [pc, #488]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c70:	4b78      	ldr	r3, [pc, #480]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c74:	4a77      	ldr	r2, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x32a>
 8001c7e:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a74      	ldr	r2, [pc, #464]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8e:	4a71      	ldr	r2, [pc, #452]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f845 	bl	8000d2c <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff f841 	bl	8000d2c <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0c5      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x33a>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7ff f82f 	bl	8000d2c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7ff f82b 	bl	8000d2c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0af      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b5a      	ldr	r3, [pc, #360]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a55      	ldr	r2, [pc, #340]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 809b 	beq.w	8001e46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d05c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d141      	bne.n	8001da8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe ffff 	bl	8000d2c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe fffb 	bl	8000d2c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e081      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69da      	ldr	r2, [r3, #28]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	019b      	lsls	r3, r3, #6
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	085b      	lsrs	r3, r3, #1
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	041b      	lsls	r3, r3, #16
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	061b      	lsls	r3, r3, #24
 8001d74:	4937      	ldr	r1, [pc, #220]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe ffd4 	bl	8000d2c <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d88:	f7fe ffd0 	bl	8000d2c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e056      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x41c>
 8001da6:	e04e      	b.n	8001e46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x4ec>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe ffbd 	bl	8000d2c <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db6:	f7fe ffb9 	bl	8000d2c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e03f      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc8:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x44a>
 8001dd4:	e037      	b.n	8001e46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e032      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_RCC_OscConfig+0x4e8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d028      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d121      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d11a      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e12:	4013      	ands	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d111      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	085b      	lsrs	r3, r3, #1
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40007000 	.word	0x40007000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	42470060 	.word	0x42470060

08001e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0cc      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d90c      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b65      	ldr	r3, [pc, #404]	; (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b63      	ldr	r3, [pc, #396]	; (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0b8      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb0:	4b59      	ldr	r3, [pc, #356]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b50      	ldr	r3, [pc, #320]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	494d      	ldr	r1, [pc, #308]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d044      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d119      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e07f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d003      	beq.n	8001f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b3f      	ldr	r3, [pc, #252]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d109      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e06f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e067      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b37      	ldr	r3, [pc, #220]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4934      	ldr	r1, [pc, #208]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe feee 	bl	8000d2c <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7fe feea 	bl	8000d2c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e04f      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d20c      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b22      	ldr	r3, [pc, #136]	; (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e032      	b.n	800200a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4916      	ldr	r1, [pc, #88]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	490e      	ldr	r1, [pc, #56]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fe2:	f000 f821 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	490a      	ldr	r1, [pc, #40]	; (800201c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	5ccb      	ldrb	r3, [r1, r3]
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fd1c 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00
 8002018:	40023800 	.word	0x40023800
 800201c:	08008678 	.word	0x08008678
 8002020:	20000000 	.word	0x20000000
 8002024:	20000004 	.word	0x20000004

08002028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	2300      	movs	r3, #0
 800203a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002040:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d00d      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x40>
 800204c:	2b08      	cmp	r3, #8
 800204e:	f200 80bd 	bhi.w	80021cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x34>
 8002056:	2b04      	cmp	r3, #4
 8002058:	d003      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x3a>
 800205a:	e0b7      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800205e:	60bb      	str	r3, [r7, #8]
       break;
 8002060:	e0b7      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002062:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002064:	60bb      	str	r3, [r7, #8]
      break;
 8002066:	e0b4      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002068:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002070:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002072:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d04d      	beq.n	800211a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207e:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	099b      	lsrs	r3, r3, #6
 8002084:	461a      	mov	r2, r3
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	ea02 0800 	and.w	r8, r2, r0
 8002096:	ea03 0901 	and.w	r9, r3, r1
 800209a:	4640      	mov	r0, r8
 800209c:	4649      	mov	r1, r9
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	014b      	lsls	r3, r1, #5
 80020a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020ac:	0142      	lsls	r2, r0, #5
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	ebb0 0008 	subs.w	r0, r0, r8
 80020b6:	eb61 0109 	sbc.w	r1, r1, r9
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	018b      	lsls	r3, r1, #6
 80020c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020c8:	0182      	lsls	r2, r0, #6
 80020ca:	1a12      	subs	r2, r2, r0
 80020cc:	eb63 0301 	sbc.w	r3, r3, r1
 80020d0:	f04f 0000 	mov.w	r0, #0
 80020d4:	f04f 0100 	mov.w	r1, #0
 80020d8:	00d9      	lsls	r1, r3, #3
 80020da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020de:	00d0      	lsls	r0, r2, #3
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	eb12 0208 	adds.w	r2, r2, r8
 80020e8:	eb43 0309 	adc.w	r3, r3, r9
 80020ec:	f04f 0000 	mov.w	r0, #0
 80020f0:	f04f 0100 	mov.w	r1, #0
 80020f4:	0259      	lsls	r1, r3, #9
 80020f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80020fa:	0250      	lsls	r0, r2, #9
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4610      	mov	r0, r2
 8002102:	4619      	mov	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	461a      	mov	r2, r3
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	f7fe f860 	bl	80001d0 <__aeabi_uldivmod>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4613      	mov	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	e04a      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	461a      	mov	r2, r3
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	f240 10ff 	movw	r0, #511	; 0x1ff
 800212a:	f04f 0100 	mov.w	r1, #0
 800212e:	ea02 0400 	and.w	r4, r2, r0
 8002132:	ea03 0501 	and.w	r5, r3, r1
 8002136:	4620      	mov	r0, r4
 8002138:	4629      	mov	r1, r5
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	014b      	lsls	r3, r1, #5
 8002144:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002148:	0142      	lsls	r2, r0, #5
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	1b00      	subs	r0, r0, r4
 8002150:	eb61 0105 	sbc.w	r1, r1, r5
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	018b      	lsls	r3, r1, #6
 800215e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002162:	0182      	lsls	r2, r0, #6
 8002164:	1a12      	subs	r2, r2, r0
 8002166:	eb63 0301 	sbc.w	r3, r3, r1
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	00d9      	lsls	r1, r3, #3
 8002174:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002178:	00d0      	lsls	r0, r2, #3
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	1912      	adds	r2, r2, r4
 8002180:	eb45 0303 	adc.w	r3, r5, r3
 8002184:	f04f 0000 	mov.w	r0, #0
 8002188:	f04f 0100 	mov.w	r1, #0
 800218c:	0299      	lsls	r1, r3, #10
 800218e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002192:	0290      	lsls	r0, r2, #10
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4610      	mov	r0, r2
 800219a:	4619      	mov	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	f7fe f814 	bl	80001d0 <__aeabi_uldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4613      	mov	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	3301      	adds	r3, #1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	60bb      	str	r3, [r7, #8]
      break;
 80021ca:	e002      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021ce:	60bb      	str	r3, [r7, #8]
      break;
 80021d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d2:	68bb      	ldr	r3, [r7, #8]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	007a1200 	.word	0x007a1200

080021ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000000 	.word	0x20000000

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002208:	f7ff fff0 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0a9b      	lsrs	r3, r3, #10
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	08008688 	.word	0x08008688

0800222c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002230:	f7ff ffdc 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	0b5b      	lsrs	r3, r3, #13
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	08008688 	.word	0x08008688

08002254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	220f      	movs	r2, #15
 8002262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCC_GetClockConfig+0x5c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_GetClockConfig+0x5c>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_RCC_GetClockConfig+0x60>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0207 	and.w	r2, r3, #7
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	601a      	str	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e041      	b.n	800234e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fb04 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3304      	adds	r3, #4
 80022f4:	4619      	mov	r1, r3
 80022f6:	4610      	mov	r0, r2
 80022f8:	f000 f9fe 	bl	80026f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b01      	cmp	r3, #1
 800236a:	d001      	beq.n	8002370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e04e      	b.n	800240e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a23      	ldr	r2, [pc, #140]	; (800241c <HAL_TIM_Base_Start_IT+0xc4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d022      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239a:	d01d      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_TIM_Base_Start_IT+0xc8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d018      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_TIM_Base_Start_IT+0xcc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a1c      	ldr	r2, [pc, #112]	; (8002428 <HAL_TIM_Base_Start_IT+0xd0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_TIM_Base_Start_IT+0xd4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d009      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_TIM_Base_Start_IT+0xd8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_Base_Start_IT+0x80>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_TIM_Base_Start_IT+0xdc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d111      	bne.n	80023fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d010      	beq.n	800240c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fa:	e007      	b.n	800240c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40010000 	.word	0x40010000
 8002420:	40000400 	.word	0x40000400
 8002424:	40000800 	.word	0x40000800
 8002428:	40000c00 	.word	0x40000c00
 800242c:	40010400 	.word	0x40010400
 8002430:	40014000 	.word	0x40014000
 8002434:	40001800 	.word	0x40001800

08002438 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6a1a      	ldr	r2, [r3, #32]
 8002456:	f241 1311 	movw	r3, #4369	; 0x1111
 800245a:	4013      	ands	r3, r2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10f      	bne.n	8002480 <HAL_TIM_Base_Stop_IT+0x48>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	f240 4344 	movw	r3, #1092	; 0x444
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_TIM_Base_Stop_IT+0x48>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d122      	bne.n	80024f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d11b      	bne.n	80024f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f06f 0202 	mvn.w	r2, #2
 80024c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f8ee 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
 80024de:	e005      	b.n	80024ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f8e0 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8f1 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d122      	bne.n	8002546 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d11b      	bne.n	8002546 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0204 	mvn.w	r2, #4
 8002516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8c4 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
 8002532:	e005      	b.n	8002540 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f8b6 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8c7 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b08      	cmp	r3, #8
 8002552:	d122      	bne.n	800259a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11b      	bne.n	800259a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f06f 0208 	mvn.w	r2, #8
 800256a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2204      	movs	r2, #4
 8002570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f89a 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
 8002586:	e005      	b.n	8002594 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f88c 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f89d 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d122      	bne.n	80025ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d11b      	bne.n	80025ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f06f 0210 	mvn.w	r2, #16
 80025be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2208      	movs	r2, #8
 80025c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f870 	bl	80026ba <HAL_TIM_IC_CaptureCallback>
 80025da:	e005      	b.n	80025e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f862 	bl	80026a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f873 	bl	80026ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d10e      	bne.n	800261a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d107      	bne.n	800261a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0201 	mvn.w	r2, #1
 8002612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fe f925 	bl	8000864 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d10e      	bne.n	8002646 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002632:	2b80      	cmp	r3, #128	; 0x80
 8002634:	d107      	bne.n	8002646 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800263e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f97f 	bl	8002944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d10e      	bne.n	8002672 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d107      	bne.n	8002672 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800266a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f838 	bl	80026e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b20      	cmp	r3, #32
 800267e:	d10e      	bne.n	800269e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b20      	cmp	r3, #32
 800268c:	d107      	bne.n	800269e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f06f 0220 	mvn.w	r2, #32
 8002696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f949 	bl	8002930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a40      	ldr	r2, [pc, #256]	; (800280c <TIM_Base_SetConfig+0x114>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d00f      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a3d      	ldr	r2, [pc, #244]	; (8002810 <TIM_Base_SetConfig+0x118>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00b      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a3c      	ldr	r2, [pc, #240]	; (8002814 <TIM_Base_SetConfig+0x11c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a3b      	ldr	r2, [pc, #236]	; (8002818 <TIM_Base_SetConfig+0x120>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x40>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a3a      	ldr	r2, [pc, #232]	; (800281c <TIM_Base_SetConfig+0x124>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a2f      	ldr	r2, [pc, #188]	; (800280c <TIM_Base_SetConfig+0x114>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d02b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d027      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a2c      	ldr	r2, [pc, #176]	; (8002810 <TIM_Base_SetConfig+0x118>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d023      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <TIM_Base_SetConfig+0x11c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d01f      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <TIM_Base_SetConfig+0x120>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a29      	ldr	r2, [pc, #164]	; (800281c <TIM_Base_SetConfig+0x124>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d017      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a28      	ldr	r2, [pc, #160]	; (8002820 <TIM_Base_SetConfig+0x128>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a27      	ldr	r2, [pc, #156]	; (8002824 <TIM_Base_SetConfig+0x12c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00f      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a26      	ldr	r2, [pc, #152]	; (8002828 <TIM_Base_SetConfig+0x130>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00b      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a25      	ldr	r2, [pc, #148]	; (800282c <TIM_Base_SetConfig+0x134>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a24      	ldr	r2, [pc, #144]	; (8002830 <TIM_Base_SetConfig+0x138>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d003      	beq.n	80027aa <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <TIM_Base_SetConfig+0x13c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d108      	bne.n	80027bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <TIM_Base_SetConfig+0x114>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d003      	beq.n	80027f0 <TIM_Base_SetConfig+0xf8>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <TIM_Base_SetConfig+0x124>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d103      	bne.n	80027f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	615a      	str	r2, [r3, #20]
}
 80027fe:	bf00      	nop
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40010000 	.word	0x40010000
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800
 8002818:	40000c00 	.word	0x40000c00
 800281c:	40010400 	.word	0x40010400
 8002820:	40014000 	.word	0x40014000
 8002824:	40014400 	.word	0x40014400
 8002828:	40014800 	.word	0x40014800
 800282c:	40001800 	.word	0x40001800
 8002830:	40001c00 	.word	0x40001c00
 8002834:	40002000 	.word	0x40002000

08002838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800284c:	2302      	movs	r3, #2
 800284e:	e05a      	b.n	8002906 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a21      	ldr	r2, [pc, #132]	; (8002914 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d01d      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d018      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1b      	ldr	r2, [pc, #108]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d013      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a17      	ldr	r2, [pc, #92]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d004      	beq.n	80028da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10c      	bne.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40010000 	.word	0x40010000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800
 8002920:	40000c00 	.word	0x40000c00
 8002924:	40010400 	.word	0x40010400
 8002928:	40014000 	.word	0x40014000
 800292c:	40001800 	.word	0x40001800

08002930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e03f      	b.n	80029ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fd ffdc 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fd7b 	bl	8003498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b08a      	sub	sp, #40	; 0x28
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d17c      	bne.n	8002b0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_UART_Transmit+0x2c>
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e075      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit+0x3e>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e06e      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2221      	movs	r2, #33	; 0x21
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a46:	f7fe f971 	bl	8000d2c <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d108      	bne.n	8002a74 <HAL_UART_Transmit+0x82>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e003      	b.n	8002a7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a84:	e02a      	b.n	8002adc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 faf9 	bl	8003088 <UART_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e036      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
 8002abc:	e007      	b.n	8002ace <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	3301      	adds	r3, #1
 8002acc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1cf      	bne.n	8002a86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fac9 	bl	8003088 <UART_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e006      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3720      	adds	r7, #32
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0ba      	sub	sp, #232	; 0xe8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_UART_IRQHandler+0x66>
 8002b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fbd3 	bl	8003322 <UART_Receive_IT>
      return;
 8002b7c:	e256      	b.n	800302c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80de 	beq.w	8002d44 <HAL_UART_IRQHandler+0x22c>
 8002b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d106      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80d1 	beq.w	8002d44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_UART_IRQHandler+0xae>
 8002bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_UART_IRQHandler+0xd2>
 8002bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0202 	orr.w	r2, r3, #2
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_UART_IRQHandler+0xf6>
 8002bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f043 0204 	orr.w	r2, r3, #4
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d011      	beq.n	8002c3e <HAL_UART_IRQHandler+0x126>
 8002c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d105      	bne.n	8002c32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0208 	orr.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 81ed 	beq.w	8003022 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_UART_IRQHandler+0x14e>
 8002c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 fb5e 	bl	8003322 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	bf0c      	ite	eq
 8002c74:	2301      	moveq	r3, #1
 8002c76:	2300      	movne	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_UART_IRQHandler+0x17a>
 8002c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d04f      	beq.n	8002d32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa66 	bl	8003164 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d141      	bne.n	8002d2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3314      	adds	r3, #20
 8002cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1d9      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d013      	beq.n	8002d22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_UART_IRQHandler+0x3dc>)
 8002d00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fa1c 	bl	8001144 <HAL_DMA_Abort_IT>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d20:	e00e      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f99a 	bl	800305c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d28:	e00a      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f996 	bl	800305c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	e006      	b.n	8002d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f992 	bl	800305c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d3e:	e170      	b.n	8003022 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	bf00      	nop
    return;
 8002d42:	e16e      	b.n	8003022 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f040 814a 	bne.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d52:	f003 0310 	and.w	r3, r3, #16
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8143 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 813c 	beq.w	8002fe2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	f040 80b4 	bne.w	8002ef8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8140 	beq.w	8003026 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dae:	429a      	cmp	r2, r3
 8002db0:	f080 8139 	bcs.w	8003026 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dc6:	f000 8088 	beq.w	8002eda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1d9      	bne.n	8002dca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e1      	bne.n	8002e16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e3      	bne.n	8002e52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ebe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e3      	bne.n	8002e98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fe f8c5 	bl	8001064 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8c0 	bl	8003070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ef0:	e099      	b.n	8003026 <HAL_UART_IRQHandler+0x50e>
 8002ef2:	bf00      	nop
 8002ef4:	0800322b 	.word	0x0800322b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 808b 	beq.w	800302a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8086 	beq.w	800302a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f42:	647a      	str	r2, [r7, #68]	; 0x44
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e3      	bne.n	8002f1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3314      	adds	r3, #20
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	623b      	str	r3, [r7, #32]
   return(result);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3314      	adds	r3, #20
 8002f76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f7a:	633a      	str	r2, [r7, #48]	; 0x30
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e3      	bne.n	8002f56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	e853 3f00 	ldrex	r3, [r3]
 8002faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0310 	bic.w	r3, r3, #16
 8002fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc4:	69b9      	ldr	r1, [r7, #24]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	e841 2300 	strex	r3, r2, [r1]
 8002fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e3      	bne.n	8002f9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f848 	bl	8003070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fe0:	e023      	b.n	800302a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_UART_IRQHandler+0x4ea>
 8002fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f929 	bl	8003252 <UART_Transmit_IT>
    return;
 8003000:	e014      	b.n	800302c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00e      	beq.n	800302c <HAL_UART_IRQHandler+0x514>
 800300e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f969 	bl	80032f2 <UART_EndTransmit_IT>
    return;
 8003020:	e004      	b.n	800302c <HAL_UART_IRQHandler+0x514>
    return;
 8003022:	bf00      	nop
 8003024:	e002      	b.n	800302c <HAL_UART_IRQHandler+0x514>
      return;
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <HAL_UART_IRQHandler+0x514>
      return;
 800302a:	bf00      	nop
  }
}
 800302c:	37e8      	adds	r7, #232	; 0xe8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop

08003034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b090      	sub	sp, #64	; 0x40
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003098:	e050      	b.n	800313c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d04c      	beq.n	800313c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030a8:	f7fd fe40 	bl	8000d2c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d241      	bcs.n	800313c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030d8:	637a      	str	r2, [r7, #52]	; 0x34
 80030da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	613b      	str	r3, [r7, #16]
   return(result);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	63bb      	str	r3, [r7, #56]	; 0x38
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3314      	adds	r3, #20
 800310a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800310c:	623a      	str	r2, [r7, #32]
 800310e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	69f9      	ldr	r1, [r7, #28]
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	61bb      	str	r3, [r7, #24]
   return(result);
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e5      	bne.n	80030ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e00f      	b.n	800315c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	429a      	cmp	r2, r3
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	429a      	cmp	r2, r3
 8003158:	d09f      	beq.n	800309a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3740      	adds	r7, #64	; 0x40
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b095      	sub	sp, #84	; 0x54
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	330c      	adds	r3, #12
 8003172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318c:	643a      	str	r2, [r7, #64]	; 0x40
 800318e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003194:	e841 2300 	strex	r3, r2, [r1]
 8003198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1e5      	bne.n	800316c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	e853 3f00 	ldrex	r3, [r3]
 80031ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e5      	bne.n	80031a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d119      	bne.n	8003210 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	330c      	adds	r3, #12
 80031e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f023 0310 	bic.w	r3, r3, #16
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	330c      	adds	r3, #12
 80031fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031fc:	61ba      	str	r2, [r7, #24]
 80031fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	613b      	str	r3, [r7, #16]
   return(result);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800321e:	bf00      	nop
 8003220:	3754      	adds	r7, #84	; 0x54
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7ff ff09 	bl	800305c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b21      	cmp	r3, #33	; 0x21
 8003264:	d13e      	bne.n	80032e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d114      	bne.n	800329a <UART_Transmit_IT+0x48>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d110      	bne.n	800329a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800328c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	1c9a      	adds	r2, r3, #2
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	621a      	str	r2, [r3, #32]
 8003298:	e008      	b.n	80032ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	1c59      	adds	r1, r3, #1
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6211      	str	r1, [r2, #32]
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4619      	mov	r1, r3
 80032ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10f      	bne.n	80032e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003308:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff fe8e 	bl	8003034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b08c      	sub	sp, #48	; 0x30
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b22      	cmp	r3, #34	; 0x22
 8003334:	f040 80ab 	bne.w	800348e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d117      	bne.n	8003372 <UART_Receive_IT+0x50>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d113      	bne.n	8003372 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003360:	b29a      	uxth	r2, r3
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336a:	1c9a      	adds	r2, r3, #2
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
 8003370:	e026      	b.n	80033c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003384:	d007      	beq.n	8003396 <UART_Receive_IT+0x74>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <UART_Receive_IT+0x82>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e008      	b.n	80033b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4619      	mov	r1, r3
 80033ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d15a      	bne.n	800348a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0220 	bic.w	r2, r2, #32
 80033e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0201 	bic.w	r2, r2, #1
 8003402:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	2b01      	cmp	r3, #1
 8003412:	d135      	bne.n	8003480 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	330c      	adds	r3, #12
 8003420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	e853 3f00 	ldrex	r3, [r3]
 8003428:	613b      	str	r3, [r7, #16]
   return(result);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f023 0310 	bic.w	r3, r3, #16
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343a:	623a      	str	r2, [r7, #32]
 800343c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	69f9      	ldr	r1, [r7, #28]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	61bb      	str	r3, [r7, #24]
   return(result);
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e5      	bne.n	800341a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b10      	cmp	r3, #16
 800345a:	d10a      	bne.n	8003472 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003476:	4619      	mov	r1, r3
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff fdf9 	bl	8003070 <HAL_UARTEx_RxEventCallback>
 800347e:	e002      	b.n	8003486 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fde1 	bl	8003048 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e002      	b.n	8003490 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3730      	adds	r7, #48	; 0x30
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349c:	b09f      	sub	sp, #124	; 0x7c
 800349e:	af00      	add	r7, sp, #0
 80034a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ae:	68d9      	ldr	r1, [r3, #12]
 80034b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	ea40 0301 	orr.w	r3, r0, r1
 80034b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80034d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034dc:	f021 010c 	bic.w	r1, r1, #12
 80034e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e6:	430b      	orrs	r3, r1
 80034e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f6:	6999      	ldr	r1, [r3, #24]
 80034f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	ea40 0301 	orr.w	r3, r0, r1
 8003500:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	4bc5      	ldr	r3, [pc, #788]	; (800381c <UART_SetConfig+0x384>)
 8003508:	429a      	cmp	r2, r3
 800350a:	d004      	beq.n	8003516 <UART_SetConfig+0x7e>
 800350c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4bc3      	ldr	r3, [pc, #780]	; (8003820 <UART_SetConfig+0x388>)
 8003512:	429a      	cmp	r2, r3
 8003514:	d103      	bne.n	800351e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003516:	f7fe fe89 	bl	800222c <HAL_RCC_GetPCLK2Freq>
 800351a:	6778      	str	r0, [r7, #116]	; 0x74
 800351c:	e002      	b.n	8003524 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800351e:	f7fe fe71 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003522:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352c:	f040 80b6 	bne.w	800369c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003532:	461c      	mov	r4, r3
 8003534:	f04f 0500 	mov.w	r5, #0
 8003538:	4622      	mov	r2, r4
 800353a:	462b      	mov	r3, r5
 800353c:	1891      	adds	r1, r2, r2
 800353e:	6439      	str	r1, [r7, #64]	; 0x40
 8003540:	415b      	adcs	r3, r3
 8003542:	647b      	str	r3, [r7, #68]	; 0x44
 8003544:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003548:	1912      	adds	r2, r2, r4
 800354a:	eb45 0303 	adc.w	r3, r5, r3
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	00d9      	lsls	r1, r3, #3
 8003558:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800355c:	00d0      	lsls	r0, r2, #3
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	1911      	adds	r1, r2, r4
 8003564:	6639      	str	r1, [r7, #96]	; 0x60
 8003566:	416b      	adcs	r3, r5
 8003568:	667b      	str	r3, [r7, #100]	; 0x64
 800356a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	461a      	mov	r2, r3
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	1891      	adds	r1, r2, r2
 8003576:	63b9      	str	r1, [r7, #56]	; 0x38
 8003578:	415b      	adcs	r3, r3
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003580:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003584:	f7fc fe24 	bl	80001d0 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4ba5      	ldr	r3, [pc, #660]	; (8003824 <UART_SetConfig+0x38c>)
 800358e:	fba3 2302 	umull	r2, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	011e      	lsls	r6, r3, #4
 8003596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003598:	461c      	mov	r4, r3
 800359a:	f04f 0500 	mov.w	r5, #0
 800359e:	4622      	mov	r2, r4
 80035a0:	462b      	mov	r3, r5
 80035a2:	1891      	adds	r1, r2, r2
 80035a4:	6339      	str	r1, [r7, #48]	; 0x30
 80035a6:	415b      	adcs	r3, r3
 80035a8:	637b      	str	r3, [r7, #52]	; 0x34
 80035aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035ae:	1912      	adds	r2, r2, r4
 80035b0:	eb45 0303 	adc.w	r3, r5, r3
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	00d9      	lsls	r1, r3, #3
 80035be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c2:	00d0      	lsls	r0, r2, #3
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	1911      	adds	r1, r2, r4
 80035ca:	65b9      	str	r1, [r7, #88]	; 0x58
 80035cc:	416b      	adcs	r3, r5
 80035ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	461a      	mov	r2, r3
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	1891      	adds	r1, r2, r2
 80035dc:	62b9      	str	r1, [r7, #40]	; 0x28
 80035de:	415b      	adcs	r3, r3
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035e6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80035ea:	f7fc fdf1 	bl	80001d0 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4b8c      	ldr	r3, [pc, #560]	; (8003824 <UART_SetConfig+0x38c>)
 80035f4:	fba3 1302 	umull	r1, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	2164      	movs	r1, #100	; 0x64
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	3332      	adds	r3, #50	; 0x32
 8003606:	4a87      	ldr	r2, [pc, #540]	; (8003824 <UART_SetConfig+0x38c>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003614:	441e      	add	r6, r3
 8003616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003618:	4618      	mov	r0, r3
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	1894      	adds	r4, r2, r2
 8003624:	623c      	str	r4, [r7, #32]
 8003626:	415b      	adcs	r3, r3
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800362e:	1812      	adds	r2, r2, r0
 8003630:	eb41 0303 	adc.w	r3, r1, r3
 8003634:	f04f 0400 	mov.w	r4, #0
 8003638:	f04f 0500 	mov.w	r5, #0
 800363c:	00dd      	lsls	r5, r3, #3
 800363e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003642:	00d4      	lsls	r4, r2, #3
 8003644:	4622      	mov	r2, r4
 8003646:	462b      	mov	r3, r5
 8003648:	1814      	adds	r4, r2, r0
 800364a:	653c      	str	r4, [r7, #80]	; 0x50
 800364c:	414b      	adcs	r3, r1
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
 8003650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	461a      	mov	r2, r3
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	1891      	adds	r1, r2, r2
 800365c:	61b9      	str	r1, [r7, #24]
 800365e:	415b      	adcs	r3, r3
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003666:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800366a:	f7fc fdb1 	bl	80001d0 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4b6c      	ldr	r3, [pc, #432]	; (8003824 <UART_SetConfig+0x38c>)
 8003674:	fba3 1302 	umull	r1, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	2164      	movs	r1, #100	; 0x64
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	3332      	adds	r3, #50	; 0x32
 8003686:	4a67      	ldr	r2, [pc, #412]	; (8003824 <UART_SetConfig+0x38c>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	f003 0207 	and.w	r2, r3, #7
 8003692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4432      	add	r2, r6
 8003698:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800369a:	e0b9      	b.n	8003810 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800369c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800369e:	461c      	mov	r4, r3
 80036a0:	f04f 0500 	mov.w	r5, #0
 80036a4:	4622      	mov	r2, r4
 80036a6:	462b      	mov	r3, r5
 80036a8:	1891      	adds	r1, r2, r2
 80036aa:	6139      	str	r1, [r7, #16]
 80036ac:	415b      	adcs	r3, r3
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036b4:	1912      	adds	r2, r2, r4
 80036b6:	eb45 0303 	adc.w	r3, r5, r3
 80036ba:	f04f 0000 	mov.w	r0, #0
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	00d9      	lsls	r1, r3, #3
 80036c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036c8:	00d0      	lsls	r0, r2, #3
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	eb12 0804 	adds.w	r8, r2, r4
 80036d2:	eb43 0905 	adc.w	r9, r3, r5
 80036d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4618      	mov	r0, r3
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	008b      	lsls	r3, r1, #2
 80036ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036ee:	0082      	lsls	r2, r0, #2
 80036f0:	4640      	mov	r0, r8
 80036f2:	4649      	mov	r1, r9
 80036f4:	f7fc fd6c 	bl	80001d0 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <UART_SetConfig+0x38c>)
 80036fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	011e      	lsls	r6, r3, #4
 8003706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003708:	4618      	mov	r0, r3
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	1894      	adds	r4, r2, r2
 8003714:	60bc      	str	r4, [r7, #8]
 8003716:	415b      	adcs	r3, r3
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800371e:	1812      	adds	r2, r2, r0
 8003720:	eb41 0303 	adc.w	r3, r1, r3
 8003724:	f04f 0400 	mov.w	r4, #0
 8003728:	f04f 0500 	mov.w	r5, #0
 800372c:	00dd      	lsls	r5, r3, #3
 800372e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003732:	00d4      	lsls	r4, r2, #3
 8003734:	4622      	mov	r2, r4
 8003736:	462b      	mov	r3, r5
 8003738:	1814      	adds	r4, r2, r0
 800373a:	64bc      	str	r4, [r7, #72]	; 0x48
 800373c:	414b      	adcs	r3, r1
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4618      	mov	r0, r3
 8003746:	f04f 0100 	mov.w	r1, #0
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	008b      	lsls	r3, r1, #2
 8003754:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003758:	0082      	lsls	r2, r0, #2
 800375a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800375e:	f7fc fd37 	bl	80001d0 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <UART_SetConfig+0x38c>)
 8003768:	fba3 1302 	umull	r1, r3, r3, r2
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	2164      	movs	r1, #100	; 0x64
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	3332      	adds	r3, #50	; 0x32
 800377a:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <UART_SetConfig+0x38c>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003786:	441e      	add	r6, r3
 8003788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378a:	4618      	mov	r0, r3
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	1894      	adds	r4, r2, r2
 8003796:	603c      	str	r4, [r7, #0]
 8003798:	415b      	adcs	r3, r3
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037a0:	1812      	adds	r2, r2, r0
 80037a2:	eb41 0303 	adc.w	r3, r1, r3
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	f04f 0500 	mov.w	r5, #0
 80037ae:	00dd      	lsls	r5, r3, #3
 80037b0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037b4:	00d4      	lsls	r4, r2, #3
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	eb12 0a00 	adds.w	sl, r2, r0
 80037be:	eb43 0b01 	adc.w	fp, r3, r1
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	008b      	lsls	r3, r1, #2
 80037d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037da:	0082      	lsls	r2, r0, #2
 80037dc:	4650      	mov	r0, sl
 80037de:	4659      	mov	r1, fp
 80037e0:	f7fc fcf6 	bl	80001d0 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <UART_SetConfig+0x38c>)
 80037ea:	fba3 1302 	umull	r1, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2164      	movs	r1, #100	; 0x64
 80037f2:	fb01 f303 	mul.w	r3, r1, r3
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	3332      	adds	r3, #50	; 0x32
 80037fc:	4a09      	ldr	r2, [pc, #36]	; (8003824 <UART_SetConfig+0x38c>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f003 020f 	and.w	r2, r3, #15
 8003808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4432      	add	r2, r6
 800380e:	609a      	str	r2, [r3, #8]
}
 8003810:	bf00      	nop
 8003812:	377c      	adds	r7, #124	; 0x7c
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381a:	bf00      	nop
 800381c:	40011000 	.word	0x40011000
 8003820:	40011400 	.word	0x40011400
 8003824:	51eb851f 	.word	0x51eb851f

08003828 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800383a:	2b84      	cmp	r3, #132	; 0x84
 800383c:	d005      	beq.n	800384a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800383e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	3303      	adds	r3, #3
 8003848:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800385e:	f3ef 8305 	mrs	r3, IPSR
 8003862:	607b      	str	r3, [r7, #4]
  return(result);
 8003864:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003880:	f001 fce2 	bl	8005248 <vTaskStartScheduler>
  
  return osOK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	bd80      	pop	{r7, pc}

0800388a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800388a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388c:	b089      	sub	sp, #36	; 0x24
 800388e:	af04      	add	r7, sp, #16
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <osThreadCreate+0x54>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01c      	beq.n	80038de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685c      	ldr	r4, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681d      	ldr	r5, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691e      	ldr	r6, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ffb6 	bl	8003828 <makeFreeRtosPriority>
 80038bc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038c6:	9202      	str	r2, [sp, #8]
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	9100      	str	r1, [sp, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4632      	mov	r2, r6
 80038d0:	4629      	mov	r1, r5
 80038d2:	4620      	mov	r0, r4
 80038d4:	f001 face 	bl	8004e74 <xTaskCreateStatic>
 80038d8:	4603      	mov	r3, r0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e01c      	b.n	8003918 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685c      	ldr	r4, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80038ea:	b29e      	uxth	r6, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff98 	bl	8003828 <makeFreeRtosPriority>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	9200      	str	r2, [sp, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	4632      	mov	r2, r6
 8003906:	4629      	mov	r1, r5
 8003908:	4620      	mov	r0, r4
 800390a:	f001 fb10 	bl	8004f2e <xTaskCreate>
 800390e:	4603      	mov	r3, r0
 8003910:	2b01      	cmp	r3, #1
 8003912:	d001      	beq.n	8003918 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003918:	68fb      	ldr	r3, [r7, #12]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003922 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <osDelay+0x16>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	e000      	b.n	800393a <osDelay+0x18>
 8003938:	2301      	movs	r3, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fc50 	bl	80051e0 <vTaskDelay>
  
  return osOK;
 8003940:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800394a:	b580      	push	{r7, lr}
 800394c:	b086      	sub	sp, #24
 800394e:	af02      	add	r7, sp, #8
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00f      	beq.n	800397c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d10a      	bne.n	8003978 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2203      	movs	r2, #3
 8003968:	9200      	str	r2, [sp, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	2100      	movs	r1, #0
 800396e:	2001      	movs	r0, #1
 8003970:	f000 fb92 	bl	8004098 <xQueueGenericCreateStatic>
 8003974:	4603      	mov	r3, r0
 8003976:	e016      	b.n	80039a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	e014      	b.n	80039a6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d110      	bne.n	80039a4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003982:	2203      	movs	r2, #3
 8003984:	2100      	movs	r1, #0
 8003986:	2001      	movs	r0, #1
 8003988:	f000 fbfe 	bl	8004188 <xQueueGenericCreate>
 800398c:	60f8      	str	r0, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <osSemaphoreCreate+0x56>
 8003994:	2300      	movs	r3, #0
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fc52 	bl	8004244 <xQueueGenericSend>
      return sema;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	e000      	b.n	80039a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80039a4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	e03a      	b.n	8003a3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d103      	bne.n	80039dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80039d4:	f04f 33ff 	mov.w	r3, #4294967295
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e009      	b.n	80039f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80039ec:	2301      	movs	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80039f0:	f7ff ff32 	bl	8003858 <inHandlerMode>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d017      	beq.n	8003a2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	461a      	mov	r2, r3
 8003a00:	2100      	movs	r1, #0
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f001 f830 	bl	8004a68 <xQueueReceiveFromISR>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003a0e:	23ff      	movs	r3, #255	; 0xff
 8003a10:	e015      	b.n	8003a3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d011      	beq.n	8003a3c <osSemaphoreWait+0x8c>
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <osSemaphoreWait+0x98>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	e008      	b.n	8003a3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003a2a:	68f9      	ldr	r1, [r7, #12]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 ff0f 	bl	8004850 <xQueueSemaphoreTake>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d001      	beq.n	8003a3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003a38:	23ff      	movs	r3, #255	; 0xff
 8003a3a:	e000      	b.n	8003a3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003a5c:	f7ff fefc 	bl	8003858 <inHandlerMode>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003a66:	f107 0308 	add.w	r3, r7, #8
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fd82 	bl	8004576 <xQueueGiveFromISR>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d001      	beq.n	8003a7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003a78:	23ff      	movs	r3, #255	; 0xff
 8003a7a:	e017      	b.n	8003aac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <osSemaphoreRelease+0x5e>
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <osSemaphoreRelease+0x68>)
 8003a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	e00a      	b.n	8003aaa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003a94:	2300      	movs	r3, #0
 8003a96:	2200      	movs	r2, #0
 8003a98:	2100      	movs	r1, #0
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fbd2 	bl	8004244 <xQueueGenericSend>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d001      	beq.n	8003aaa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003aa6:	23ff      	movs	r3, #255	; 0xff
 8003aa8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003adc:	2320      	movs	r3, #32
 8003ade:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	d00a      	beq.n	8003afc <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	60fb      	str	r3, [r7, #12]
}
 8003af8:	bf00      	nop
 8003afa:	e7fe      	b.n	8003afa <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 f9a5 	bl	8003e60 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003b1c:	697b      	ldr	r3, [r7, #20]
	}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b090      	sub	sp, #64	; 0x40
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <xEventGroupWaitBits+0x36>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	623b      	str	r3, [r7, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	e7fe      	b.n	8003b5c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <xEventGroupWaitBits+0x56>
	__asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	61fb      	str	r3, [r7, #28]
}
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10a      	bne.n	8003b9a <xEventGroupWaitBits+0x72>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	61bb      	str	r3, [r7, #24]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b9a:	f002 f847 	bl	8005c2c <xTaskGetSchedulerState>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <xEventGroupWaitBits+0x82>
 8003ba4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <xEventGroupWaitBits+0x86>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <xEventGroupWaitBits+0x88>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	617b      	str	r3, [r7, #20]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003bca:	f001 fbad 	bl	8005328 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	68b9      	ldr	r1, [r7, #8]
 8003bd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bda:	f000 f90b 	bl	8003df4 <prvTestWaitCondition>
 8003bde:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00e      	beq.n	8003c04 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d028      	beq.n	8003c46 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e020      	b.n	8003c46 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
 8003c12:	e018      	b.n	8003c46 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c20:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	1d18      	adds	r0, r3, #4
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f001 fd6b 	bl	8005718 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003c46:	f001 fb7d 	bl	8005344 <xTaskResumeAll>
 8003c4a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d031      	beq.n	8003cb6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <xEventGroupWaitBits+0x198>)
 8003c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003c68:	f002 f988 	bl	8005f7c <uxTaskResetEventItemValue>
 8003c6c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d11a      	bne.n	8003cae <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003c78:	f002 feac 	bl	80069d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003c88:	f000 f8b4 	bl	8003df4 <prvTestWaitCondition>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d006      	beq.n	8003ca6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	401a      	ands	r2, r3
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003caa:	f002 fec3 	bl	8006a34 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3740      	adds	r7, #64	; 0x40
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	e000ed04 	.word	0xe000ed04

08003cc4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08e      	sub	sp, #56	; 0x38
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <xEventGroupSetBits+0x32>
	__asm volatile
 8003ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce4:	f383 8811 	msr	BASEPRI, r3
 8003ce8:	f3bf 8f6f 	isb	sy
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	613b      	str	r3, [r7, #16]
}
 8003cf2:	bf00      	nop
 8003cf4:	e7fe      	b.n	8003cf4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00a      	beq.n	8003d16 <xEventGroupSetBits+0x52>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
}
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	3304      	adds	r3, #4
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1e:	3308      	adds	r3, #8
 8003d20:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8003d22:	f001 fb01 	bl	8005328 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d36:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8003d38:	e03c      	b.n	8003db4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d50:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d58:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d108      	bne.n	8003d76 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00b      	beq.n	8003d88 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	e008      	b.n	8003d88 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d101      	bne.n	8003d88 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8003d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d010      	beq.n	8003db0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8003d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003da8:	4619      	mov	r1, r3
 8003daa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003dac:	f001 fd7e 	bl	80058ac <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8003db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1be      	bne.n	8003d3a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8003dca:	f001 fabb 	bl	8005344 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	681b      	ldr	r3, [r3, #0]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3738      	adds	r7, #56	; 0x38
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ff6c 	bl	8003cc4 <xEventGroupSetBits>
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d107      	bne.n	8003e1a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003e14:	2301      	movs	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e007      	b.n	8003e2a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d101      	bne.n	8003e2a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8003e26:	2301      	movs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8003e2a:	697b      	ldr	r3, [r7, #20]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	68f9      	ldr	r1, [r7, #12]
 8003e4a:	4804      	ldr	r0, [pc, #16]	; (8003e5c <xEventGroupSetBitsFromISR+0x24>)
 8003e4c:	f002 fc76 	bl	800673c <xTimerPendFunctionCallFromISR>
 8003e50:	6178      	str	r0, [r7, #20]

		return xReturn;
 8003e52:	697b      	ldr	r3, [r7, #20]
	}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	08003ddb 	.word	0x08003ddb

08003e60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f103 0208 	add.w	r2, r3, #8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f04f 32ff 	mov.w	r2, #4294967295
 8003e78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f103 0208 	add.w	r2, r3, #8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f103 0208 	add.w	r2, r3, #8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	601a      	str	r2, [r3, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d103      	bne.n	8003f22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e00c      	b.n	8003f3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3308      	adds	r3, #8
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e002      	b.n	8003f30 <vListInsert+0x2e>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d2f6      	bcs.n	8003f2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	601a      	str	r2, [r3, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6892      	ldr	r2, [r2, #8]
 8003f8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6852      	ldr	r2, [r2, #4]
 8003f94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d103      	bne.n	8003fa8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <xQueueGenericReset+0x2a>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	60bb      	str	r3, [r7, #8]
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ff2:	f002 fcef 	bl	80069d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004002:	fb01 f303 	mul.w	r3, r1, r3
 8004006:	441a      	add	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	3b01      	subs	r3, #1
 8004024:	68f9      	ldr	r1, [r7, #12]
 8004026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	441a      	add	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	22ff      	movs	r2, #255	; 0xff
 8004036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	22ff      	movs	r2, #255	; 0xff
 800403e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d114      	bne.n	8004072 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01a      	beq.n	8004086 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3310      	adds	r3, #16
 8004054:	4618      	mov	r0, r3
 8004056:	f001 fbc7 	bl	80057e8 <xTaskRemoveFromEventList>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d012      	beq.n	8004086 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <xQueueGenericReset+0xcc>)
 8004062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	e009      	b.n	8004086 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3310      	adds	r3, #16
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fef2 	bl	8003e60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff feed 	bl	8003e60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004086:	f002 fcd5 	bl	8006a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800408a:	2301      	movs	r3, #1
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	e000ed04 	.word	0xe000ed04

08004098 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	; 0x38
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040da:	bf00      	nop
 80040dc:	e7fe      	b.n	80040dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <xQueueGenericCreateStatic+0x52>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <xQueueGenericCreateStatic+0x56>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <xQueueGenericCreateStatic+0x58>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	623b      	str	r3, [r7, #32]
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <xQueueGenericCreateStatic+0x7e>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <xQueueGenericCreateStatic+0x82>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <xQueueGenericCreateStatic+0x84>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	61fb      	str	r3, [r7, #28]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004136:	2350      	movs	r3, #80	; 0x50
 8004138:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b50      	cmp	r3, #80	; 0x50
 800413e:	d00a      	beq.n	8004156 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	61bb      	str	r3, [r7, #24]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004156:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00d      	beq.n	800417e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800416a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	4613      	mov	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f83f 	bl	80041fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004180:	4618      	mov	r0, r3
 8004182:	3730      	adds	r7, #48	; 0x30
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	4613      	mov	r3, r2
 8004194:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	613b      	str	r3, [r7, #16]
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	3350      	adds	r3, #80	; 0x50
 80041c0:	4618      	mov	r0, r3
 80041c2:	f002 fd29 	bl	8006c18 <pvPortMalloc>
 80041c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d011      	beq.n	80041f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3350      	adds	r3, #80	; 0x50
 80041d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041e0:	79fa      	ldrb	r2, [r7, #7]
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	4613      	mov	r3, r2
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f805 	bl	80041fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041f2:	69bb      	ldr	r3, [r7, #24]
	}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3720      	adds	r7, #32
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d103      	bne.n	8004218 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e002      	b.n	800421e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800422a:	2101      	movs	r1, #1
 800422c:	69b8      	ldr	r0, [r7, #24]
 800422e:	f7ff fecb 	bl	8003fc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	78fa      	ldrb	r2, [r7, #3]
 8004236:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08e      	sub	sp, #56	; 0x38
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004252:	2300      	movs	r3, #0
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <xQueueGenericSend+0x32>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <xQueueGenericSend+0x40>
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <xQueueGenericSend+0x44>
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <xQueueGenericSend+0x46>
 8004288:	2300      	movs	r3, #0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <xQueueGenericSend+0x60>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSend+0x6e>
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d101      	bne.n	80042b6 <xQueueGenericSend+0x72>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <xQueueGenericSend+0x74>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	623b      	str	r3, [r7, #32]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042d2:	f001 fcab 	bl	8005c2c <xTaskGetSchedulerState>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <xQueueGenericSend+0x9e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <xQueueGenericSend+0xa2>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <xQueueGenericSend+0xa4>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <xQueueGenericSend+0xbe>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	61fb      	str	r3, [r7, #28]
}
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004302:	f002 fb67 	bl	80069d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <xQueueGenericSend+0xd4>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d129      	bne.n	800436c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431e:	f000 fc3b 	bl	8004b98 <prvCopyDataToQueue>
 8004322:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	d010      	beq.n	800434e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	3324      	adds	r3, #36	; 0x24
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fa59 	bl	80057e8 <xTaskRemoveFromEventList>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800433c:	4b3f      	ldr	r3, [pc, #252]	; (800443c <xQueueGenericSend+0x1f8>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	e00a      	b.n	8004364 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <xQueueGenericSend+0x1f8>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004364:	f002 fb66 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004368:	2301      	movs	r3, #1
 800436a:	e063      	b.n	8004434 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004372:	f002 fb5f 	bl	8006a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004376:	2300      	movs	r3, #0
 8004378:	e05c      	b.n	8004434 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800437a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	4618      	mov	r0, r3
 8004386:	f001 faf3 	bl	8005970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800438a:	2301      	movs	r3, #1
 800438c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800438e:	f002 fb51 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004392:	f000 ffc9 	bl	8005328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004396:	f002 fb1d 	bl	80069d4 <vPortEnterCritical>
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d103      	bne.n	80043b0 <xQueueGenericSend+0x16c>
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b6:	b25b      	sxtb	r3, r3
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d103      	bne.n	80043c6 <xQueueGenericSend+0x182>
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c6:	f002 fb35 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043ca:	1d3a      	adds	r2, r7, #4
 80043cc:	f107 0314 	add.w	r3, r7, #20
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 fae2 	bl	800599c <xTaskCheckForTimeOut>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d124      	bne.n	8004428 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043e0:	f000 fcd2 	bl	8004d88 <prvIsQueueFull>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d018      	beq.n	800441c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	3310      	adds	r3, #16
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 f96c 	bl	80056d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043fa:	f000 fc5d 	bl	8004cb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043fe:	f000 ffa1 	bl	8005344 <xTaskResumeAll>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	f47f af7c 	bne.w	8004302 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <xQueueGenericSend+0x1f8>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	e772      	b.n	8004302 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800441c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800441e:	f000 fc4b 	bl	8004cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004422:	f000 ff8f 	bl	8005344 <xTaskResumeAll>
 8004426:	e76c      	b.n	8004302 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442a:	f000 fc45 	bl	8004cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800442e:	f000 ff89 	bl	8005344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004432:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004434:	4618      	mov	r0, r3
 8004436:	3738      	adds	r7, #56	; 0x38
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b090      	sub	sp, #64	; 0x40
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10a      	bne.n	800446e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d103      	bne.n	800447c <xQueueGenericSendFromISR+0x3c>
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <xQueueGenericSendFromISR+0x40>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <xQueueGenericSendFromISR+0x42>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d103      	bne.n	80044aa <xQueueGenericSendFromISR+0x6a>
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <xQueueGenericSendFromISR+0x6e>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <xQueueGenericSendFromISR+0x70>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	623b      	str	r3, [r7, #32]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044ca:	f002 fb65 	bl	8006b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044ce:	f3ef 8211 	mrs	r2, BASEPRI
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61fa      	str	r2, [r7, #28]
 80044e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d302      	bcc.n	80044fc <xQueueGenericSendFromISR+0xbc>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d12f      	bne.n	800455c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	68b9      	ldr	r1, [r7, #8]
 8004510:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004512:	f000 fb41 	bl	8004b98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004516:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d112      	bne.n	8004546 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	3324      	adds	r3, #36	; 0x24
 800452c:	4618      	mov	r0, r3
 800452e:	f001 f95b 	bl	80057e8 <xTaskRemoveFromEventList>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00e      	beq.n	8004556 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e007      	b.n	8004556 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004546:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800454a:	3301      	adds	r3, #1
 800454c:	b2db      	uxtb	r3, r3
 800454e:	b25a      	sxtb	r2, r3
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004556:	2301      	movs	r3, #1
 8004558:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800455a:	e001      	b.n	8004560 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800455c:	2300      	movs	r3, #0
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004562:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800456a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800456e:	4618      	mov	r0, r3
 8004570:	3740      	adds	r7, #64	; 0x40
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08e      	sub	sp, #56	; 0x38
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	623b      	str	r3, [r7, #32]
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <xQueueGiveFromISR+0x48>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	61fb      	str	r3, [r7, #28]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <xQueueGiveFromISR+0x58>
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <xQueueGiveFromISR+0x5c>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <xQueueGiveFromISR+0x5e>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xQueueGiveFromISR+0x78>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61bb      	str	r3, [r7, #24]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045ee:	f002 fad3 	bl	8006b98 <vPortValidateInterruptPriority>
	__asm volatile
 80045f2:	f3ef 8211 	mrs	r2, BASEPRI
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	617a      	str	r2, [r7, #20]
 8004608:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800460a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800461a:	429a      	cmp	r2, r3
 800461c:	d22b      	bcs.n	8004676 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004630:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004638:	d112      	bne.n	8004660 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d016      	beq.n	8004670 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	3324      	adds	r3, #36	; 0x24
 8004646:	4618      	mov	r0, r3
 8004648:	f001 f8ce 	bl	80057e8 <xTaskRemoveFromEventList>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00e      	beq.n	8004670 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00b      	beq.n	8004670 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e007      	b.n	8004670 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004664:	3301      	adds	r3, #1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	b25a      	sxtb	r2, r3
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004670:	2301      	movs	r3, #1
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
 8004674:	e001      	b.n	800467a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004676:	2300      	movs	r3, #0
 8004678:	637b      	str	r3, [r7, #52]	; 0x34
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f383 8811 	msr	BASEPRI, r3
}
 8004684:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004688:	4618      	mov	r0, r3
 800468a:	3738      	adds	r7, #56	; 0x38
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800469c:	2300      	movs	r3, #0
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <xQueueReceive+0x30>
	__asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	623b      	str	r3, [r7, #32]
}
 80046bc:	bf00      	nop
 80046be:	e7fe      	b.n	80046be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <xQueueReceive+0x3e>
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <xQueueReceive+0x42>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <xQueueReceive+0x44>
 80046d2:	2300      	movs	r3, #0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xQueueReceive+0x5e>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	61fb      	str	r3, [r7, #28]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046ee:	f001 fa9d 	bl	8005c2c <xTaskGetSchedulerState>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <xQueueReceive+0x6e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <xQueueReceive+0x72>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <xQueueReceive+0x74>
 8004702:	2300      	movs	r3, #0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <xQueueReceive+0x8e>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	61bb      	str	r3, [r7, #24]
}
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800471e:	f002 f959 	bl	80069d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01f      	beq.n	800476e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004732:	f000 fa9b 	bl	8004c6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	1e5a      	subs	r2, r3, #1
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00f      	beq.n	8004766 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	3310      	adds	r3, #16
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f84c 	bl	80057e8 <xTaskRemoveFromEventList>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004756:	4b3d      	ldr	r3, [pc, #244]	; (800484c <xQueueReceive+0x1bc>)
 8004758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004766:	f002 f965 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 800476a:	2301      	movs	r3, #1
 800476c:	e069      	b.n	8004842 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d103      	bne.n	800477c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004774:	f002 f95e 	bl	8006a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004778:	2300      	movs	r3, #0
 800477a:	e062      	b.n	8004842 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004782:	f107 0310 	add.w	r3, r7, #16
 8004786:	4618      	mov	r0, r3
 8004788:	f001 f8f2 	bl	8005970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004790:	f002 f950 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004794:	f000 fdc8 	bl	8005328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004798:	f002 f91c 	bl	80069d4 <vPortEnterCritical>
 800479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a2:	b25b      	sxtb	r3, r3
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d103      	bne.n	80047b2 <xQueueReceive+0x122>
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d103      	bne.n	80047c8 <xQueueReceive+0x138>
 80047c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c8:	f002 f934 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047cc:	1d3a      	adds	r2, r7, #4
 80047ce:	f107 0310 	add.w	r3, r7, #16
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f8e1 	bl	800599c <xTaskCheckForTimeOut>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d123      	bne.n	8004828 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e2:	f000 fabb 	bl	8004d5c <prvIsQueueEmpty>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d017      	beq.n	800481c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	3324      	adds	r3, #36	; 0x24
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4611      	mov	r1, r2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 ff6b 	bl	80056d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047fc:	f000 fa5c 	bl	8004cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004800:	f000 fda0 	bl	8005344 <xTaskResumeAll>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d189      	bne.n	800471e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800480a:	4b10      	ldr	r3, [pc, #64]	; (800484c <xQueueReceive+0x1bc>)
 800480c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	f3bf 8f6f 	isb	sy
 800481a:	e780      	b.n	800471e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800481c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800481e:	f000 fa4b 	bl	8004cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004822:	f000 fd8f 	bl	8005344 <xTaskResumeAll>
 8004826:	e77a      	b.n	800471e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482a:	f000 fa45 	bl	8004cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800482e:	f000 fd89 	bl	8005344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004834:	f000 fa92 	bl	8004d5c <prvIsQueueEmpty>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f43f af6f 	beq.w	800471e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004840:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004842:	4618      	mov	r0, r3
 8004844:	3730      	adds	r7, #48	; 0x30
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004862:	2300      	movs	r3, #0
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	623b      	str	r3, [r7, #32]
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	61fb      	str	r3, [r7, #28]
}
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048a0:	f001 f9c4 	bl	8005c2c <xTaskGetSchedulerState>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <xQueueSemaphoreTake+0x60>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <xQueueSemaphoreTake+0x64>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <xQueueSemaphoreTake+0x66>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	61bb      	str	r3, [r7, #24]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048d0:	f002 f880 	bl	80069d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d024      	beq.n	800492a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	1e5a      	subs	r2, r3, #1
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d104      	bne.n	80048fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80048f0:	f001 fb5c 	bl	8005fac <pvTaskIncrementMutexHeldCount>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00f      	beq.n	8004922 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	3310      	adds	r3, #16
 8004906:	4618      	mov	r0, r3
 8004908:	f000 ff6e 	bl	80057e8 <xTaskRemoveFromEventList>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004912:	4b54      	ldr	r3, [pc, #336]	; (8004a64 <xQueueSemaphoreTake+0x214>)
 8004914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004922:	f002 f887 	bl	8006a34 <vPortExitCritical>
				return pdPASS;
 8004926:	2301      	movs	r3, #1
 8004928:	e097      	b.n	8004a5a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d111      	bne.n	8004954 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	617b      	str	r3, [r7, #20]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800494c:	f002 f872 	bl	8006a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004950:	2300      	movs	r3, #0
 8004952:	e082      	b.n	8004a5a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800495a:	f107 030c 	add.w	r3, r7, #12
 800495e:	4618      	mov	r0, r3
 8004960:	f001 f806 	bl	8005970 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004968:	f002 f864 	bl	8006a34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800496c:	f000 fcdc 	bl	8005328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004970:	f002 f830 	bl	80069d4 <vPortEnterCritical>
 8004974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800497a:	b25b      	sxtb	r3, r3
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d103      	bne.n	800498a <xQueueSemaphoreTake+0x13a>
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004990:	b25b      	sxtb	r3, r3
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d103      	bne.n	80049a0 <xQueueSemaphoreTake+0x150>
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a0:	f002 f848 	bl	8006a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a4:	463a      	mov	r2, r7
 80049a6:	f107 030c 	add.w	r3, r7, #12
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fff5 	bl	800599c <xTaskCheckForTimeOut>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d132      	bne.n	8004a1e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049ba:	f000 f9cf 	bl	8004d5c <prvIsQueueEmpty>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d026      	beq.n	8004a12 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80049cc:	f002 f802 	bl	80069d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 f947 	bl	8005c68 <xTaskPriorityInherit>
 80049da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80049dc:	f002 f82a 	bl	8006a34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e2:	3324      	adds	r3, #36	; 0x24
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fe71 	bl	80056d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049f0:	f000 f962 	bl	8004cb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049f4:	f000 fca6 	bl	8005344 <xTaskResumeAll>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f47f af68 	bne.w	80048d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004a00:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <xQueueSemaphoreTake+0x214>)
 8004a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	e75e      	b.n	80048d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a14:	f000 f950 	bl	8004cb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a18:	f000 fc94 	bl	8005344 <xTaskResumeAll>
 8004a1c:	e758      	b.n	80048d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a20:	f000 f94a 	bl	8004cb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a24:	f000 fc8e 	bl	8005344 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a2a:	f000 f997 	bl	8004d5c <prvIsQueueEmpty>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f43f af4d 	beq.w	80048d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004a3c:	f001 ffca 	bl	80069d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a42:	f000 f891 	bl	8004b68 <prvGetDisinheritPriorityAfterTimeout>
 8004a46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 fa06 	bl	8005e60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a54:	f001 ffee 	bl	8006a34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3738      	adds	r7, #56	; 0x38
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	e000ed04 	.word	0xe000ed04

08004a68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08e      	sub	sp, #56	; 0x38
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10a      	bne.n	8004a94 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	623b      	str	r3, [r7, #32]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <xQueueReceiveFromISR+0x3a>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <xQueueReceiveFromISR+0x3e>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <xQueueReceiveFromISR+0x40>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	61fb      	str	r3, [r7, #28]
}
 8004abe:	bf00      	nop
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ac2:	f002 f869 	bl	8006b98 <vPortValidateInterruptPriority>
	__asm volatile
 8004ac6:	f3ef 8211 	mrs	r2, BASEPRI
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	61ba      	str	r2, [r7, #24]
 8004adc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ade:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d02f      	beq.n	8004b4e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004afc:	f000 f8b6 	bl	8004c6c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	1e5a      	subs	r2, r3, #1
 8004b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d112      	bne.n	8004b38 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d016      	beq.n	8004b48 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	3310      	adds	r3, #16
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fe62 	bl	80057e8 <xTaskRemoveFromEventList>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00b      	beq.n	8004b48 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e007      	b.n	8004b48 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	b25a      	sxtb	r2, r3
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b4c:	e001      	b.n	8004b52 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f383 8811 	msr	BASEPRI, r3
}
 8004b5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3738      	adds	r7, #56	; 0x38
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d006      	beq.n	8004b86 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1c3 0307 	rsb	r3, r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e001      	b.n	8004b8a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
	}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10d      	bne.n	8004bd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d14d      	bne.n	8004c5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f001 f8c6 	bl	8005d54 <xTaskPriorityDisinherit>
 8004bc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	609a      	str	r2, [r3, #8]
 8004bd0:	e043      	b.n	8004c5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d119      	bne.n	8004c0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6858      	ldr	r0, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	461a      	mov	r2, r3
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	f003 fc12 	bl	800840c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d32b      	bcc.n	8004c5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	e026      	b.n	8004c5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68d8      	ldr	r0, [r3, #12]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	461a      	mov	r2, r3
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	f003 fbf8 	bl	800840c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	425b      	negs	r3, r3
 8004c26:	441a      	add	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d207      	bcs.n	8004c48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	425b      	negs	r3, r3
 8004c42:	441a      	add	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d105      	bne.n	8004c5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c62:	697b      	ldr	r3, [r7, #20]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d018      	beq.n	8004cb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	441a      	add	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d303      	bcc.n	8004ca0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68d9      	ldr	r1, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6838      	ldr	r0, [r7, #0]
 8004cac:	f003 fbae 	bl	800840c <memcpy>
	}
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cc0:	f001 fe88 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ccc:	e011      	b.n	8004cf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d012      	beq.n	8004cfc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3324      	adds	r3, #36	; 0x24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fd84 	bl	80057e8 <xTaskRemoveFromEventList>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ce6:	f000 febb 	bl	8005a60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	dce9      	bgt.n	8004cce <prvUnlockQueue+0x16>
 8004cfa:	e000      	b.n	8004cfe <prvUnlockQueue+0x46>
					break;
 8004cfc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	22ff      	movs	r2, #255	; 0xff
 8004d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d06:	f001 fe95 	bl	8006a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d0a:	f001 fe63 	bl	80069d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d16:	e011      	b.n	8004d3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d012      	beq.n	8004d46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3310      	adds	r3, #16
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fd5f 	bl	80057e8 <xTaskRemoveFromEventList>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d30:	f000 fe96 	bl	8005a60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d34:	7bbb      	ldrb	r3, [r7, #14]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	dce9      	bgt.n	8004d18 <prvUnlockQueue+0x60>
 8004d44:	e000      	b.n	8004d48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	22ff      	movs	r2, #255	; 0xff
 8004d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d50:	f001 fe70 	bl	8006a34 <vPortExitCritical>
}
 8004d54:	bf00      	nop
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d64:	f001 fe36 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e001      	b.n	8004d7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d7a:	f001 fe5b 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d90:	f001 fe20 	bl	80069d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d102      	bne.n	8004da6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e001      	b.n	8004daa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004daa:	f001 fe43 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8004dae:	68fb      	ldr	r3, [r7, #12]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e014      	b.n	8004df2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004dc8:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <vQueueAddToRegistry+0x50>)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004dd4:	490c      	ldr	r1, [pc, #48]	; (8004e08 <vQueueAddToRegistry+0x50>)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dde:	4a0a      	ldr	r2, [pc, #40]	; (8004e08 <vQueueAddToRegistry+0x50>)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	4413      	add	r3, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dea:	e006      	b.n	8004dfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	3301      	adds	r3, #1
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b07      	cmp	r3, #7
 8004df6:	d9e7      	bls.n	8004dc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004df8:	bf00      	nop
 8004dfa:	bf00      	nop
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20004b0c 	.word	0x20004b0c

08004e0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e1c:	f001 fdda 	bl	80069d4 <vPortEnterCritical>
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e26:	b25b      	sxtb	r3, r3
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d103      	bne.n	8004e36 <vQueueWaitForMessageRestricted+0x2a>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e3c:	b25b      	sxtb	r3, r3
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d103      	bne.n	8004e4c <vQueueWaitForMessageRestricted+0x40>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e4c:	f001 fdf2 	bl	8006a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d106      	bne.n	8004e66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	3324      	adds	r3, #36	; 0x24
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fc95 	bl	8005790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e66:	6978      	ldr	r0, [r7, #20]
 8004e68:	f7ff ff26 	bl	8004cb8 <prvUnlockQueue>
	}
 8004e6c:	bf00      	nop
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08e      	sub	sp, #56	; 0x38
 8004e78:	af04      	add	r7, sp, #16
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8c:	f383 8811 	msr	BASEPRI, r3
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	f3bf 8f4f 	dsb	sy
 8004e98:	623b      	str	r3, [r7, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	e7fe      	b.n	8004e9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xTaskCreateStatic+0x46>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	61fb      	str	r3, [r7, #28]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eba:	23bc      	movs	r3, #188	; 0xbc
 8004ebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2bbc      	cmp	r3, #188	; 0xbc
 8004ec2:	d00a      	beq.n	8004eda <xTaskCreateStatic+0x66>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	61bb      	str	r3, [r7, #24]
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004eda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01e      	beq.n	8004f20 <xTaskCreateStatic+0xac>
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004efa:	2300      	movs	r3, #0
 8004efc:	9303      	str	r3, [sp, #12]
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	9302      	str	r3, [sp, #8]
 8004f02:	f107 0314 	add.w	r3, r7, #20
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f850 	bl	8004fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f1a:	f000 f8f3 	bl	8005104 <prvAddNewTaskToReadyList>
 8004f1e:	e001      	b.n	8004f24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f24:	697b      	ldr	r3, [r7, #20]
	}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3728      	adds	r7, #40	; 0x28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b08c      	sub	sp, #48	; 0x30
 8004f32:	af04      	add	r7, sp, #16
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f3e:	88fb      	ldrh	r3, [r7, #6]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 fe68 	bl	8006c18 <pvPortMalloc>
 8004f48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00e      	beq.n	8004f6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f50:	20bc      	movs	r0, #188	; 0xbc
 8004f52:	f001 fe61 	bl	8006c18 <pvPortMalloc>
 8004f56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	631a      	str	r2, [r3, #48]	; 0x30
 8004f64:	e005      	b.n	8004f72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f66:	6978      	ldr	r0, [r7, #20]
 8004f68:	f001 ff22 	bl	8006db0 <vPortFree>
 8004f6c:	e001      	b.n	8004f72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d017      	beq.n	8004fa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	2300      	movs	r3, #0
 8004f84:	9303      	str	r3, [sp, #12]
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	9302      	str	r3, [sp, #8]
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 f80e 	bl	8004fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f9c:	69f8      	ldr	r0, [r7, #28]
 8004f9e:	f000 f8b1 	bl	8005104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	e002      	b.n	8004fae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fae:	69bb      	ldr	r3, [r7, #24]
	}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	461a      	mov	r2, r3
 8004fd0:	21a5      	movs	r1, #165	; 0xa5
 8004fd2:	f003 fa29 	bl	8008428 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f023 0307 	bic.w	r3, r3, #7
 8004fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	617b      	str	r3, [r7, #20]
}
 800500c:	bf00      	nop
 800500e:	e7fe      	b.n	800500e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01f      	beq.n	8005056 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005016:	2300      	movs	r3, #0
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	e012      	b.n	8005042 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	7819      	ldrb	r1, [r3, #0]
 8005024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	3334      	adds	r3, #52	; 0x34
 800502c:	460a      	mov	r2, r1
 800502e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d006      	beq.n	800504a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	3301      	adds	r3, #1
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	2b0f      	cmp	r3, #15
 8005046:	d9e9      	bls.n	800501c <prvInitialiseNewTask+0x64>
 8005048:	e000      	b.n	800504c <prvInitialiseNewTask+0x94>
			{
				break;
 800504a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005054:	e003      	b.n	800505e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	2b06      	cmp	r3, #6
 8005062:	d901      	bls.n	8005068 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005064:	2306      	movs	r3, #6
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	2200      	movs	r2, #0
 8005078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	3304      	adds	r3, #4
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe ff0e 	bl	8003ea0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	3318      	adds	r3, #24
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe ff09 	bl	8003ea0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	f1c3 0207 	rsb	r2, r3, #7
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	3354      	adds	r3, #84	; 0x54
 80050b8:	2260      	movs	r2, #96	; 0x60
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f003 f9b3 	bl	8008428 <memset>
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <prvInitialiseNewTask+0x140>)
 80050c6:	659a      	str	r2, [r3, #88]	; 0x58
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	4a0c      	ldr	r2, [pc, #48]	; (80050fc <prvInitialiseNewTask+0x144>)
 80050cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <prvInitialiseNewTask+0x148>)
 80050d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	68f9      	ldr	r1, [r7, #12]
 80050d8:	69b8      	ldr	r0, [r7, #24]
 80050da:	f001 fb4f 	bl	800677c <pxPortInitialiseStack>
 80050de:	4602      	mov	r2, r0
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f0:	bf00      	nop
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	080088b8 	.word	0x080088b8
 80050fc:	080088d8 	.word	0x080088d8
 8005100:	08008898 	.word	0x08008898

08005104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800510c:	f001 fc62 	bl	80069d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005110:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <prvAddNewTaskToReadyList+0xc0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	4a2b      	ldr	r2, [pc, #172]	; (80051c4 <prvAddNewTaskToReadyList+0xc0>)
 8005118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800511a:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <prvAddNewTaskToReadyList+0xc4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d109      	bne.n	8005136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005122:	4a29      	ldr	r2, [pc, #164]	; (80051c8 <prvAddNewTaskToReadyList+0xc4>)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005128:	4b26      	ldr	r3, [pc, #152]	; (80051c4 <prvAddNewTaskToReadyList+0xc0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d110      	bne.n	8005152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005130:	f000 fcba 	bl	8005aa8 <prvInitialiseTaskLists>
 8005134:	e00d      	b.n	8005152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005136:	4b25      	ldr	r3, [pc, #148]	; (80051cc <prvAddNewTaskToReadyList+0xc8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800513e:	4b22      	ldr	r3, [pc, #136]	; (80051c8 <prvAddNewTaskToReadyList+0xc4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	429a      	cmp	r2, r3
 800514a:	d802      	bhi.n	8005152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800514c:	4a1e      	ldr	r2, [pc, #120]	; (80051c8 <prvAddNewTaskToReadyList+0xc4>)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005152:	4b1f      	ldr	r3, [pc, #124]	; (80051d0 <prvAddNewTaskToReadyList+0xcc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <prvAddNewTaskToReadyList+0xcc>)
 800515a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800515c:	4b1c      	ldr	r3, [pc, #112]	; (80051d0 <prvAddNewTaskToReadyList+0xcc>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	2201      	movs	r2, #1
 800516a:	409a      	lsls	r2, r3
 800516c:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <prvAddNewTaskToReadyList+0xd0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4313      	orrs	r3, r2
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <prvAddNewTaskToReadyList+0xd0>)
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4a15      	ldr	r2, [pc, #84]	; (80051d8 <prvAddNewTaskToReadyList+0xd4>)
 8005184:	441a      	add	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4610      	mov	r0, r2
 800518e:	f7fe fe94 	bl	8003eba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005192:	f001 fc4f 	bl	8006a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <prvAddNewTaskToReadyList+0xc8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00e      	beq.n	80051bc <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800519e:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <prvAddNewTaskToReadyList+0xc4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d207      	bcs.n	80051bc <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <prvAddNewTaskToReadyList+0xd8>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	2000098c 	.word	0x2000098c
 80051c8:	2000088c 	.word	0x2000088c
 80051cc:	20000998 	.word	0x20000998
 80051d0:	200009a8 	.word	0x200009a8
 80051d4:	20000994 	.word	0x20000994
 80051d8:	20000890 	.word	0x20000890
 80051dc:	e000ed04 	.word	0xe000ed04

080051e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d017      	beq.n	8005222 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051f2:	4b13      	ldr	r3, [pc, #76]	; (8005240 <vTaskDelay+0x60>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <vTaskDelay+0x30>
	__asm volatile
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	60bb      	str	r3, [r7, #8]
}
 800520c:	bf00      	nop
 800520e:	e7fe      	b.n	800520e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005210:	f000 f88a 	bl	8005328 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005214:	2100      	movs	r1, #0
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fedc 	bl	8005fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800521c:	f000 f892 	bl	8005344 <xTaskResumeAll>
 8005220:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d107      	bne.n	8005238 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <vTaskDelay+0x64>)
 800522a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005238:	bf00      	nop
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	200009b4 	.word	0x200009b4
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	; 0x28
 800524c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005256:	463a      	mov	r2, r7
 8005258:	1d39      	adds	r1, r7, #4
 800525a:	f107 0308 	add.w	r3, r7, #8
 800525e:	4618      	mov	r0, r3
 8005260:	f7fb f932 	bl	80004c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	9202      	str	r2, [sp, #8]
 800526c:	9301      	str	r3, [sp, #4]
 800526e:	2300      	movs	r3, #0
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	460a      	mov	r2, r1
 8005276:	4924      	ldr	r1, [pc, #144]	; (8005308 <vTaskStartScheduler+0xc0>)
 8005278:	4824      	ldr	r0, [pc, #144]	; (800530c <vTaskStartScheduler+0xc4>)
 800527a:	f7ff fdfb 	bl	8004e74 <xTaskCreateStatic>
 800527e:	4603      	mov	r3, r0
 8005280:	4a23      	ldr	r2, [pc, #140]	; (8005310 <vTaskStartScheduler+0xc8>)
 8005282:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <vTaskStartScheduler+0xc8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800528c:	2301      	movs	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e001      	b.n	8005296 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800529c:	f000 ff00 	bl	80060a0 <xTimerCreateTimerTask>
 80052a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d11b      	bne.n	80052e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	613b      	str	r3, [r7, #16]
}
 80052ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80052bc:	4b15      	ldr	r3, [pc, #84]	; (8005314 <vTaskStartScheduler+0xcc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3354      	adds	r3, #84	; 0x54
 80052c2:	4a15      	ldr	r2, [pc, #84]	; (8005318 <vTaskStartScheduler+0xd0>)
 80052c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <vTaskStartScheduler+0xd4>)
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295
 80052cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052ce:	4b14      	ldr	r3, [pc, #80]	; (8005320 <vTaskStartScheduler+0xd8>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <vTaskStartScheduler+0xdc>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052da:	f001 fad9 	bl	8006890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052de:	e00e      	b.n	80052fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d10a      	bne.n	80052fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	60fb      	str	r3, [r7, #12]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <vTaskStartScheduler+0xb4>
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	08008660 	.word	0x08008660
 800530c:	08005a79 	.word	0x08005a79
 8005310:	200009b0 	.word	0x200009b0
 8005314:	2000088c 	.word	0x2000088c
 8005318:	20000094 	.word	0x20000094
 800531c:	200009ac 	.word	0x200009ac
 8005320:	20000998 	.word	0x20000998
 8005324:	20000990 	.word	0x20000990

08005328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <vTaskSuspendAll+0x18>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	4a03      	ldr	r2, [pc, #12]	; (8005340 <vTaskSuspendAll+0x18>)
 8005334:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	200009b4 	.word	0x200009b4

08005344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005352:	4b41      	ldr	r3, [pc, #260]	; (8005458 <xTaskResumeAll+0x114>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <xTaskResumeAll+0x2c>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	603b      	str	r3, [r7, #0]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005370:	f001 fb30 	bl	80069d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005374:	4b38      	ldr	r3, [pc, #224]	; (8005458 <xTaskResumeAll+0x114>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	4a37      	ldr	r2, [pc, #220]	; (8005458 <xTaskResumeAll+0x114>)
 800537c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800537e:	4b36      	ldr	r3, [pc, #216]	; (8005458 <xTaskResumeAll+0x114>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d161      	bne.n	800544a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005386:	4b35      	ldr	r3, [pc, #212]	; (800545c <xTaskResumeAll+0x118>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d05d      	beq.n	800544a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800538e:	e02e      	b.n	80053ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005390:	4b33      	ldr	r3, [pc, #204]	; (8005460 <xTaskResumeAll+0x11c>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3318      	adds	r3, #24
 800539c:	4618      	mov	r0, r3
 800539e:	f7fe fde9 	bl	8003f74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3304      	adds	r3, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe fde4 	bl	8003f74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	2201      	movs	r2, #1
 80053b2:	409a      	lsls	r2, r3
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <xTaskResumeAll+0x120>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <xTaskResumeAll+0x120>)
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4a27      	ldr	r2, [pc, #156]	; (8005468 <xTaskResumeAll+0x124>)
 80053cc:	441a      	add	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f7fe fd70 	bl	8003eba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	4b23      	ldr	r3, [pc, #140]	; (800546c <xTaskResumeAll+0x128>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d302      	bcc.n	80053ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80053e8:	4b21      	ldr	r3, [pc, #132]	; (8005470 <xTaskResumeAll+0x12c>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053ee:	4b1c      	ldr	r3, [pc, #112]	; (8005460 <xTaskResumeAll+0x11c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1cc      	bne.n	8005390 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053fc:	f000 fbf6 	bl	8005bec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005400:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <xTaskResumeAll+0x130>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d010      	beq.n	800542e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800540c:	f000 f846 	bl	800549c <xTaskIncrementTick>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005416:	4b16      	ldr	r3, [pc, #88]	; (8005470 <xTaskResumeAll+0x12c>)
 8005418:	2201      	movs	r2, #1
 800541a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3b01      	subs	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f1      	bne.n	800540c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005428:	4b12      	ldr	r3, [pc, #72]	; (8005474 <xTaskResumeAll+0x130>)
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <xTaskResumeAll+0x12c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005436:	2301      	movs	r3, #1
 8005438:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800543a:	4b0f      	ldr	r3, [pc, #60]	; (8005478 <xTaskResumeAll+0x134>)
 800543c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800544a:	f001 faf3 	bl	8006a34 <vPortExitCritical>

	return xAlreadyYielded;
 800544e:	68bb      	ldr	r3, [r7, #8]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	200009b4 	.word	0x200009b4
 800545c:	2000098c 	.word	0x2000098c
 8005460:	2000094c 	.word	0x2000094c
 8005464:	20000994 	.word	0x20000994
 8005468:	20000890 	.word	0x20000890
 800546c:	2000088c 	.word	0x2000088c
 8005470:	200009a0 	.word	0x200009a0
 8005474:	2000099c 	.word	0x2000099c
 8005478:	e000ed04 	.word	0xe000ed04

0800547c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005482:	4b05      	ldr	r3, [pc, #20]	; (8005498 <xTaskGetTickCount+0x1c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005488:	687b      	ldr	r3, [r7, #4]
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000990 	.word	0x20000990

0800549c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a6:	4b4e      	ldr	r3, [pc, #312]	; (80055e0 <xTaskIncrementTick+0x144>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 808e 	bne.w	80055cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054b0:	4b4c      	ldr	r3, [pc, #304]	; (80055e4 <xTaskIncrementTick+0x148>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054b8:	4a4a      	ldr	r2, [pc, #296]	; (80055e4 <xTaskIncrementTick+0x148>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d120      	bne.n	8005506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054c4:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <xTaskIncrementTick+0x14c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	603b      	str	r3, [r7, #0]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <xTaskIncrementTick+0x46>
 80054e4:	4b40      	ldr	r3, [pc, #256]	; (80055e8 <xTaskIncrementTick+0x14c>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	4b40      	ldr	r3, [pc, #256]	; (80055ec <xTaskIncrementTick+0x150>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3e      	ldr	r2, [pc, #248]	; (80055e8 <xTaskIncrementTick+0x14c>)
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4a3e      	ldr	r2, [pc, #248]	; (80055ec <xTaskIncrementTick+0x150>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4b3d      	ldr	r3, [pc, #244]	; (80055f0 <xTaskIncrementTick+0x154>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a3c      	ldr	r2, [pc, #240]	; (80055f0 <xTaskIncrementTick+0x154>)
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	f000 fb73 	bl	8005bec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005506:	4b3b      	ldr	r3, [pc, #236]	; (80055f4 <xTaskIncrementTick+0x158>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d348      	bcc.n	80055a2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005510:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <xTaskIncrementTick+0x14c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800551a:	4b36      	ldr	r3, [pc, #216]	; (80055f4 <xTaskIncrementTick+0x158>)
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	601a      	str	r2, [r3, #0]
					break;
 8005522:	e03e      	b.n	80055a2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005524:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <xTaskIncrementTick+0x14c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d203      	bcs.n	8005544 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800553c:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <xTaskIncrementTick+0x158>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005542:	e02e      	b.n	80055a2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	3304      	adds	r3, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fd13 	bl	8003f74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	3318      	adds	r3, #24
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fd0a 	bl	8003f74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	2201      	movs	r2, #1
 8005566:	409a      	lsls	r2, r3
 8005568:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <xTaskIncrementTick+0x15c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4313      	orrs	r3, r2
 800556e:	4a22      	ldr	r2, [pc, #136]	; (80055f8 <xTaskIncrementTick+0x15c>)
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4a1f      	ldr	r2, [pc, #124]	; (80055fc <xTaskIncrementTick+0x160>)
 8005580:	441a      	add	r2, r3
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f7fe fc96 	bl	8003eba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	4b1b      	ldr	r3, [pc, #108]	; (8005600 <xTaskIncrementTick+0x164>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	429a      	cmp	r2, r3
 800559a:	d3b9      	bcc.n	8005510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a0:	e7b6      	b.n	8005510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055a2:	4b17      	ldr	r3, [pc, #92]	; (8005600 <xTaskIncrementTick+0x164>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	4914      	ldr	r1, [pc, #80]	; (80055fc <xTaskIncrementTick+0x160>)
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d901      	bls.n	80055be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055be:	4b11      	ldr	r3, [pc, #68]	; (8005604 <xTaskIncrementTick+0x168>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80055c6:	2301      	movs	r3, #1
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e004      	b.n	80055d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <xTaskIncrementTick+0x16c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3301      	adds	r3, #1
 80055d2:	4a0d      	ldr	r2, [pc, #52]	; (8005608 <xTaskIncrementTick+0x16c>)
 80055d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055d6:	697b      	ldr	r3, [r7, #20]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200009b4 	.word	0x200009b4
 80055e4:	20000990 	.word	0x20000990
 80055e8:	20000944 	.word	0x20000944
 80055ec:	20000948 	.word	0x20000948
 80055f0:	200009a4 	.word	0x200009a4
 80055f4:	200009ac 	.word	0x200009ac
 80055f8:	20000994 	.word	0x20000994
 80055fc:	20000890 	.word	0x20000890
 8005600:	2000088c 	.word	0x2000088c
 8005604:	200009a0 	.word	0x200009a0
 8005608:	2000099c 	.word	0x2000099c

0800560c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005612:	4b29      	ldr	r3, [pc, #164]	; (80056b8 <vTaskSwitchContext+0xac>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800561a:	4b28      	ldr	r3, [pc, #160]	; (80056bc <vTaskSwitchContext+0xb0>)
 800561c:	2201      	movs	r2, #1
 800561e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005620:	e044      	b.n	80056ac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005622:	4b26      	ldr	r3, [pc, #152]	; (80056bc <vTaskSwitchContext+0xb0>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005628:	4b25      	ldr	r3, [pc, #148]	; (80056c0 <vTaskSwitchContext+0xb4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	fab3 f383 	clz	r3, r3
 8005634:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005636:	7afb      	ldrb	r3, [r7, #11]
 8005638:	f1c3 031f 	rsb	r3, r3, #31
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	4921      	ldr	r1, [pc, #132]	; (80056c4 <vTaskSwitchContext+0xb8>)
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	607b      	str	r3, [r7, #4]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <vTaskSwitchContext+0x5a>
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <vTaskSwitchContext+0xb8>)
 8005674:	4413      	add	r3, r2
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	605a      	str	r2, [r3, #4]
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	3308      	adds	r3, #8
 800568a:	429a      	cmp	r2, r3
 800568c:	d104      	bne.n	8005698 <vTaskSwitchContext+0x8c>
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	605a      	str	r2, [r3, #4]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	4a0a      	ldr	r2, [pc, #40]	; (80056c8 <vTaskSwitchContext+0xbc>)
 80056a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <vTaskSwitchContext+0xbc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3354      	adds	r3, #84	; 0x54
 80056a8:	4a08      	ldr	r2, [pc, #32]	; (80056cc <vTaskSwitchContext+0xc0>)
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	200009b4 	.word	0x200009b4
 80056bc:	200009a0 	.word	0x200009a0
 80056c0:	20000994 	.word	0x20000994
 80056c4:	20000890 	.word	0x20000890
 80056c8:	2000088c 	.word	0x2000088c
 80056cc:	20000094 	.word	0x20000094

080056d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	60fb      	str	r3, [r7, #12]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056f6:	4b07      	ldr	r3, [pc, #28]	; (8005714 <vTaskPlaceOnEventList+0x44>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3318      	adds	r3, #24
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fe fbff 	bl	8003f02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005704:	2101      	movs	r1, #1
 8005706:	6838      	ldr	r0, [r7, #0]
 8005708:	f000 fc64 	bl	8005fd4 <prvAddCurrentTaskToDelayedList>
}
 800570c:	bf00      	nop
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	2000088c 	.word	0x2000088c

08005718 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10a      	bne.n	8005740 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	617b      	str	r3, [r7, #20]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005740:	4b11      	ldr	r3, [pc, #68]	; (8005788 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	613b      	str	r3, [r7, #16]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800575e:	4b0b      	ldr	r3, [pc, #44]	; (800578c <vTaskPlaceOnUnorderedEventList+0x74>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005768:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800576a:	4b08      	ldr	r3, [pc, #32]	; (800578c <vTaskPlaceOnUnorderedEventList+0x74>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3318      	adds	r3, #24
 8005770:	4619      	mov	r1, r3
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7fe fba1 	bl	8003eba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005778:	2101      	movs	r1, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fc2a 	bl	8005fd4 <prvAddCurrentTaskToDelayedList>
}
 8005780:	bf00      	nop
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	200009b4 	.word	0x200009b4
 800578c:	2000088c 	.word	0x2000088c

08005790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	617b      	str	r3, [r7, #20]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3318      	adds	r3, #24
 80057be:	4619      	mov	r1, r3
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7fe fb7a 	bl	8003eba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295
 80057d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	68b8      	ldr	r0, [r7, #8]
 80057d6:	f000 fbfd 	bl	8005fd4 <prvAddCurrentTaskToDelayedList>
	}
 80057da:	bf00      	nop
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	2000088c 	.word	0x2000088c

080057e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	60fb      	str	r3, [r7, #12]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	3318      	adds	r3, #24
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fbab 	bl	8003f74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800581e:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <xTaskRemoveFromEventList+0xac>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11c      	bne.n	8005860 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3304      	adds	r3, #4
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fba2 	bl	8003f74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	2201      	movs	r2, #1
 8005836:	409a      	lsls	r2, r3
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <xTaskRemoveFromEventList+0xb0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4313      	orrs	r3, r2
 800583e:	4a16      	ldr	r2, [pc, #88]	; (8005898 <xTaskRemoveFromEventList+0xb0>)
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4a13      	ldr	r2, [pc, #76]	; (800589c <xTaskRemoveFromEventList+0xb4>)
 8005850:	441a      	add	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	3304      	adds	r3, #4
 8005856:	4619      	mov	r1, r3
 8005858:	4610      	mov	r0, r2
 800585a:	f7fe fb2e 	bl	8003eba <vListInsertEnd>
 800585e:	e005      	b.n	800586c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	3318      	adds	r3, #24
 8005864:	4619      	mov	r1, r3
 8005866:	480e      	ldr	r0, [pc, #56]	; (80058a0 <xTaskRemoveFromEventList+0xb8>)
 8005868:	f7fe fb27 	bl	8003eba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <xTaskRemoveFromEventList+0xbc>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	429a      	cmp	r2, r3
 8005878:	d905      	bls.n	8005886 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800587e:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <xTaskRemoveFromEventList+0xc0>)
 8005880:	2201      	movs	r2, #1
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e001      	b.n	800588a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800588a:	697b      	ldr	r3, [r7, #20]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	200009b4 	.word	0x200009b4
 8005898:	20000994 	.word	0x20000994
 800589c:	20000890 	.word	0x20000890
 80058a0:	2000094c 	.word	0x2000094c
 80058a4:	2000088c 	.word	0x2000088c
 80058a8:	200009a0 	.word	0x200009a0

080058ac <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80058b6:	4b29      	ldr	r3, [pc, #164]	; (800595c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10a      	bne.n	80058d4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	613b      	str	r3, [r7, #16]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	60fb      	str	r3, [r7, #12]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f7fe fb37 	bl	8003f74 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	3304      	adds	r3, #4
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fb32 	bl	8003f74 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	4b11      	ldr	r3, [pc, #68]	; (8005960 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4313      	orrs	r3, r2
 800591e:	4a10      	ldr	r2, [pc, #64]	; (8005960 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4a0d      	ldr	r2, [pc, #52]	; (8005964 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005930:	441a      	add	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	3304      	adds	r3, #4
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f7fe fabe 	bl	8003eba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	429a      	cmp	r2, r3
 800594a:	d902      	bls.n	8005952 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800594c:	4b07      	ldr	r3, [pc, #28]	; (800596c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800594e:	2201      	movs	r2, #1
 8005950:	601a      	str	r2, [r3, #0]
	}
}
 8005952:	bf00      	nop
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	200009b4 	.word	0x200009b4
 8005960:	20000994 	.word	0x20000994
 8005964:	20000890 	.word	0x20000890
 8005968:	2000088c 	.word	0x2000088c
 800596c:	200009a0 	.word	0x200009a0

08005970 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005978:	4b06      	ldr	r3, [pc, #24]	; (8005994 <vTaskInternalSetTimeOutState+0x24>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005980:	4b05      	ldr	r3, [pc, #20]	; (8005998 <vTaskInternalSetTimeOutState+0x28>)
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	605a      	str	r2, [r3, #4]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr
 8005994:	200009a4 	.word	0x200009a4
 8005998:	20000990 	.word	0x20000990

0800599c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	613b      	str	r3, [r7, #16]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	60fb      	str	r3, [r7, #12]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80059de:	f000 fff9 	bl	80069d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059e2:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <xTaskCheckForTimeOut+0xbc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d102      	bne.n	8005a02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	e023      	b.n	8005a4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <xTaskCheckForTimeOut+0xc0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d007      	beq.n	8005a1e <xTaskCheckForTimeOut+0x82>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d302      	bcc.n	8005a1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	e015      	b.n	8005a4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d20b      	bcs.n	8005a40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff ff9b 	bl	8005970 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	e004      	b.n	8005a4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a46:	2301      	movs	r3, #1
 8005a48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a4a:	f000 fff3 	bl	8006a34 <vPortExitCritical>

	return xReturn;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000990 	.word	0x20000990
 8005a5c:	200009a4 	.word	0x200009a4

08005a60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a64:	4b03      	ldr	r3, [pc, #12]	; (8005a74 <vTaskMissedYield+0x14>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	200009a0 	.word	0x200009a0

08005a78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a80:	f000 f852 	bl	8005b28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a84:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <prvIdleTask+0x28>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d9f9      	bls.n	8005a80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <prvIdleTask+0x2c>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a9c:	e7f0      	b.n	8005a80 <prvIdleTask+0x8>
 8005a9e:	bf00      	nop
 8005aa0:	20000890 	.word	0x20000890
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aae:	2300      	movs	r3, #0
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	e00c      	b.n	8005ace <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <prvInitialiseTaskLists+0x60>)
 8005ac0:	4413      	add	r3, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe f9cc 	bl	8003e60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3301      	adds	r3, #1
 8005acc:	607b      	str	r3, [r7, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b06      	cmp	r3, #6
 8005ad2:	d9ef      	bls.n	8005ab4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ad4:	480d      	ldr	r0, [pc, #52]	; (8005b0c <prvInitialiseTaskLists+0x64>)
 8005ad6:	f7fe f9c3 	bl	8003e60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ada:	480d      	ldr	r0, [pc, #52]	; (8005b10 <prvInitialiseTaskLists+0x68>)
 8005adc:	f7fe f9c0 	bl	8003e60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ae0:	480c      	ldr	r0, [pc, #48]	; (8005b14 <prvInitialiseTaskLists+0x6c>)
 8005ae2:	f7fe f9bd 	bl	8003e60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ae6:	480c      	ldr	r0, [pc, #48]	; (8005b18 <prvInitialiseTaskLists+0x70>)
 8005ae8:	f7fe f9ba 	bl	8003e60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005aec:	480b      	ldr	r0, [pc, #44]	; (8005b1c <prvInitialiseTaskLists+0x74>)
 8005aee:	f7fe f9b7 	bl	8003e60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <prvInitialiseTaskLists+0x78>)
 8005af4:	4a05      	ldr	r2, [pc, #20]	; (8005b0c <prvInitialiseTaskLists+0x64>)
 8005af6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <prvInitialiseTaskLists+0x7c>)
 8005afa:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <prvInitialiseTaskLists+0x68>)
 8005afc:	601a      	str	r2, [r3, #0]
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000890 	.word	0x20000890
 8005b0c:	2000091c 	.word	0x2000091c
 8005b10:	20000930 	.word	0x20000930
 8005b14:	2000094c 	.word	0x2000094c
 8005b18:	20000960 	.word	0x20000960
 8005b1c:	20000978 	.word	0x20000978
 8005b20:	20000944 	.word	0x20000944
 8005b24:	20000948 	.word	0x20000948

08005b28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b2e:	e019      	b.n	8005b64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b30:	f000 ff50 	bl	80069d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b34:	4b10      	ldr	r3, [pc, #64]	; (8005b78 <prvCheckTasksWaitingTermination+0x50>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe fa17 	bl	8003f74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b46:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <prvCheckTasksWaitingTermination+0x54>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	4a0b      	ldr	r2, [pc, #44]	; (8005b7c <prvCheckTasksWaitingTermination+0x54>)
 8005b4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b50:	4b0b      	ldr	r3, [pc, #44]	; (8005b80 <prvCheckTasksWaitingTermination+0x58>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <prvCheckTasksWaitingTermination+0x58>)
 8005b58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b5a:	f000 ff6b 	bl	8006a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f810 	bl	8005b84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b64:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <prvCheckTasksWaitingTermination+0x58>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e1      	bne.n	8005b30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b6c:	bf00      	nop
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000960 	.word	0x20000960
 8005b7c:	2000098c 	.word	0x2000098c
 8005b80:	20000974 	.word	0x20000974

08005b84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3354      	adds	r3, #84	; 0x54
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 fc5f 	bl	8008454 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d108      	bne.n	8005bb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 f903 	bl	8006db0 <vPortFree>
				vPortFree( pxTCB );
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 f900 	bl	8006db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bb0:	e018      	b.n	8005be4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d103      	bne.n	8005bc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 f8f7 	bl	8006db0 <vPortFree>
	}
 8005bc2:	e00f      	b.n	8005be4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d00a      	beq.n	8005be4 <prvDeleteTCB+0x60>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	60fb      	str	r3, [r7, #12]
}
 8005be0:	bf00      	nop
 8005be2:	e7fe      	b.n	8005be2 <prvDeleteTCB+0x5e>
	}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bf2:	4b0c      	ldr	r3, [pc, #48]	; (8005c24 <prvResetNextTaskUnblockTime+0x38>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <prvResetNextTaskUnblockTime+0x3c>)
 8005bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005c02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c04:	e008      	b.n	8005c18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c06:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <prvResetNextTaskUnblockTime+0x38>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <prvResetNextTaskUnblockTime+0x3c>)
 8005c16:	6013      	str	r3, [r2, #0]
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	20000944 	.word	0x20000944
 8005c28:	200009ac 	.word	0x200009ac

08005c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <xTaskGetSchedulerState+0x34>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	607b      	str	r3, [r7, #4]
 8005c3e:	e008      	b.n	8005c52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c40:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <xTaskGetSchedulerState+0x38>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c48:	2302      	movs	r3, #2
 8005c4a:	607b      	str	r3, [r7, #4]
 8005c4c:	e001      	b.n	8005c52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c52:	687b      	ldr	r3, [r7, #4]
	}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20000998 	.word	0x20000998
 8005c64:	200009b4 	.word	0x200009b4

08005c68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d05e      	beq.n	8005d3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c82:	4b31      	ldr	r3, [pc, #196]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d24e      	bcs.n	8005d2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	db06      	blt.n	8005ca2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c94:	4b2c      	ldr	r3, [pc, #176]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	f1c3 0207 	rsb	r2, r3, #7
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	6959      	ldr	r1, [r3, #20]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4a26      	ldr	r2, [pc, #152]	; (8005d4c <xTaskPriorityInherit+0xe4>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	4299      	cmp	r1, r3
 8005cb8:	d12f      	bne.n	8005d1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe f958 	bl	8003f74 <uxListRemove>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	2201      	movs	r2, #1
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43da      	mvns	r2, r3
 8005cd6:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <xTaskPriorityInherit+0xe8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4013      	ands	r3, r2
 8005cdc:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <xTaskPriorityInherit+0xe8>)
 8005cde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ce0:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	2201      	movs	r2, #1
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <xTaskPriorityInherit+0xe8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <xTaskPriorityInherit+0xe8>)
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	4613      	mov	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <xTaskPriorityInherit+0xe4>)
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	3304      	adds	r3, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4610      	mov	r0, r2
 8005d14:	f7fe f8d1 	bl	8003eba <vListInsertEnd>
 8005d18:	e004      	b.n	8005d24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d1a:	4b0b      	ldr	r3, [pc, #44]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e008      	b.n	8005d3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <xTaskPriorityInherit+0xe0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d201      	bcs.n	8005d3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	2000088c 	.word	0x2000088c
 8005d4c:	20000890 	.word	0x20000890
 8005d50:	20000994 	.word	0x20000994

08005d54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d06e      	beq.n	8005e48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d6a:	4b3a      	ldr	r3, [pc, #232]	; (8005e54 <xTaskPriorityDisinherit+0x100>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d00a      	beq.n	8005d8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	60fb      	str	r3, [r7, #12]
}
 8005d86:	bf00      	nop
 8005d88:	e7fe      	b.n	8005d88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	1e5a      	subs	r2, r3, #1
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d044      	beq.n	8005e48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d140      	bne.n	8005e48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe f8d2 	bl	8003f74 <uxListRemove>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d115      	bne.n	8005e02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	491f      	ldr	r1, [pc, #124]	; (8005e58 <xTaskPriorityDisinherit+0x104>)
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xTaskPriorityDisinherit+0xae>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	2201      	movs	r2, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43da      	mvns	r2, r3
 8005df8:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <xTaskPriorityDisinherit+0x108>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <xTaskPriorityDisinherit+0x108>)
 8005e00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	f1c3 0207 	rsb	r2, r3, #7
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <xTaskPriorityDisinherit+0x108>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <xTaskPriorityDisinherit+0x108>)
 8005e26:	6013      	str	r3, [r2, #0]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4a08      	ldr	r2, [pc, #32]	; (8005e58 <xTaskPriorityDisinherit+0x104>)
 8005e36:	441a      	add	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7fe f83b 	bl	8003eba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e48:	697b      	ldr	r3, [r7, #20]
	}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	2000088c 	.word	0x2000088c
 8005e58:	20000890 	.word	0x20000890
 8005e5c:	20000994 	.word	0x20000994

08005e60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d077      	beq.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10a      	bne.n	8005e96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d902      	bls.n	8005ea6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	61fb      	str	r3, [r7, #28]
 8005ea4:	e002      	b.n	8005eac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb0:	69fa      	ldr	r2, [r7, #28]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d058      	beq.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d153      	bne.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ec0:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d10a      	bne.n	8005ee0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	60bb      	str	r3, [r7, #8]
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db04      	blt.n	8005efe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f1c3 0207 	rsb	r2, r3, #7
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	6959      	ldr	r1, [r3, #20]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a19      	ldr	r2, [pc, #100]	; (8005f74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005f0e:	4413      	add	r3, r2
 8005f10:	4299      	cmp	r1, r3
 8005f12:	d129      	bne.n	8005f68 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	3304      	adds	r3, #4
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe f82b 	bl	8003f74 <uxListRemove>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10a      	bne.n	8005f3a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	2201      	movs	r2, #1
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4013      	ands	r3, r2
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	2201      	movs	r2, #1
 8005f40:	409a      	lsls	r2, r3
 8005f42:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	4a0b      	ldr	r2, [pc, #44]	; (8005f78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a06      	ldr	r2, [pc, #24]	; (8005f74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7fd ffa9 	bl	8003eba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f68:	bf00      	nop
 8005f6a:	3720      	adds	r7, #32
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	2000088c 	.word	0x2000088c
 8005f74:	20000890 	.word	0x20000890
 8005f78:	20000994 	.word	0x20000994

08005f7c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <uxTaskResetEventItemValue+0x2c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <uxTaskResetEventItemValue+0x2c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <uxTaskResetEventItemValue+0x2c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f1c2 0207 	rsb	r2, r2, #7
 8005f98:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8005f9a:	687b      	ldr	r3, [r7, #4]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	2000088c 	.word	0x2000088c

08005fac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fb0:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fb8:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fbe:	3201      	adds	r2, #1
 8005fc0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005fc2:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
	}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	2000088c 	.word	0x2000088c

08005fd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fde:	4b29      	ldr	r3, [pc, #164]	; (8006084 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fe4:	4b28      	ldr	r3, [pc, #160]	; (8006088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fd ffc2 	bl	8003f74 <uxListRemove>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ff6:	4b24      	ldr	r3, [pc, #144]	; (8006088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43da      	mvns	r2, r3
 8006004:	4b21      	ldr	r3, [pc, #132]	; (800608c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4013      	ands	r3, r2
 800600a:	4a20      	ldr	r2, [pc, #128]	; (800608c <prvAddCurrentTaskToDelayedList+0xb8>)
 800600c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d10a      	bne.n	800602c <prvAddCurrentTaskToDelayedList+0x58>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800601c:	4b1a      	ldr	r3, [pc, #104]	; (8006088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	481a      	ldr	r0, [pc, #104]	; (8006090 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006026:	f7fd ff48 	bl	8003eba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800602a:	e026      	b.n	800607a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4413      	add	r3, r2
 8006032:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006034:	4b14      	ldr	r3, [pc, #80]	; (8006088 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	429a      	cmp	r2, r3
 8006042:	d209      	bcs.n	8006058 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006044:	4b13      	ldr	r3, [pc, #76]	; (8006094 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3304      	adds	r3, #4
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f7fd ff56 	bl	8003f02 <vListInsert>
}
 8006056:	e010      	b.n	800607a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006058:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <prvAddCurrentTaskToDelayedList+0xc4>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <prvAddCurrentTaskToDelayedList+0xb4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3304      	adds	r3, #4
 8006062:	4619      	mov	r1, r3
 8006064:	4610      	mov	r0, r2
 8006066:	f7fd ff4c 	bl	8003f02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800606a:	4b0c      	ldr	r3, [pc, #48]	; (800609c <prvAddCurrentTaskToDelayedList+0xc8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	429a      	cmp	r2, r3
 8006072:	d202      	bcs.n	800607a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006074:	4a09      	ldr	r2, [pc, #36]	; (800609c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6013      	str	r3, [r2, #0]
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000990 	.word	0x20000990
 8006088:	2000088c 	.word	0x2000088c
 800608c:	20000994 	.word	0x20000994
 8006090:	20000978 	.word	0x20000978
 8006094:	20000948 	.word	0x20000948
 8006098:	20000944 	.word	0x20000944
 800609c:	200009ac 	.word	0x200009ac

080060a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060aa:	f000 fb07 	bl	80066bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ae:	4b1c      	ldr	r3, [pc, #112]	; (8006120 <xTimerCreateTimerTask+0x80>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d021      	beq.n	80060fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060be:	1d3a      	adds	r2, r7, #4
 80060c0:	f107 0108 	add.w	r1, r7, #8
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fa fa17 	bl	80004fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	9202      	str	r2, [sp, #8]
 80060d6:	9301      	str	r3, [sp, #4]
 80060d8:	2302      	movs	r3, #2
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	2300      	movs	r3, #0
 80060de:	460a      	mov	r2, r1
 80060e0:	4910      	ldr	r1, [pc, #64]	; (8006124 <xTimerCreateTimerTask+0x84>)
 80060e2:	4811      	ldr	r0, [pc, #68]	; (8006128 <xTimerCreateTimerTask+0x88>)
 80060e4:	f7fe fec6 	bl	8004e74 <xTaskCreateStatic>
 80060e8:	4603      	mov	r3, r0
 80060ea:	4a10      	ldr	r2, [pc, #64]	; (800612c <xTimerCreateTimerTask+0x8c>)
 80060ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060ee:	4b0f      	ldr	r3, [pc, #60]	; (800612c <xTimerCreateTimerTask+0x8c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060f6:	2301      	movs	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006104:	f383 8811 	msr	BASEPRI, r3
 8006108:	f3bf 8f6f 	isb	sy
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	613b      	str	r3, [r7, #16]
}
 8006112:	bf00      	nop
 8006114:	e7fe      	b.n	8006114 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006116:	697b      	ldr	r3, [r7, #20]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	200009e8 	.word	0x200009e8
 8006124:	08008668 	.word	0x08008668
 8006128:	08006265 	.word	0x08006265
 800612c:	200009ec 	.word	0x200009ec

08006130 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800613e:	2300      	movs	r3, #0
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	623b      	str	r3, [r7, #32]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800615e:	4b1a      	ldr	r3, [pc, #104]	; (80061c8 <xTimerGenericCommand+0x98>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d02a      	beq.n	80061bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b05      	cmp	r3, #5
 8006176:	dc18      	bgt.n	80061aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006178:	f7ff fd58 	bl	8005c2c <xTaskGetSchedulerState>
 800617c:	4603      	mov	r3, r0
 800617e:	2b02      	cmp	r3, #2
 8006180:	d109      	bne.n	8006196 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <xTimerGenericCommand+0x98>)
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f107 0110 	add.w	r1, r7, #16
 800618a:	2300      	movs	r3, #0
 800618c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618e:	f7fe f859 	bl	8004244 <xQueueGenericSend>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24
 8006194:	e012      	b.n	80061bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <xTimerGenericCommand+0x98>)
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	f107 0110 	add.w	r1, r7, #16
 800619e:	2300      	movs	r3, #0
 80061a0:	2200      	movs	r2, #0
 80061a2:	f7fe f84f 	bl	8004244 <xQueueGenericSend>
 80061a6:	6278      	str	r0, [r7, #36]	; 0x24
 80061a8:	e008      	b.n	80061bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061aa:	4b07      	ldr	r3, [pc, #28]	; (80061c8 <xTimerGenericCommand+0x98>)
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	f107 0110 	add.w	r1, r7, #16
 80061b2:	2300      	movs	r3, #0
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	f7fe f943 	bl	8004440 <xQueueGenericSendFromISR>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3728      	adds	r7, #40	; 0x28
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	200009e8 	.word	0x200009e8

080061cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af02      	add	r7, sp, #8
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d6:	4b22      	ldr	r3, [pc, #136]	; (8006260 <prvProcessExpiredTimer+0x94>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3304      	adds	r3, #4
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fd fec5 	bl	8003f74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d022      	beq.n	800623e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	699a      	ldr	r2, [r3, #24]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	18d1      	adds	r1, r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	6978      	ldr	r0, [r7, #20]
 8006206:	f000 f8d1 	bl	80063ac <prvInsertTimerInActiveList>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01f      	beq.n	8006250 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006210:	2300      	movs	r3, #0
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	2300      	movs	r3, #0
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	2100      	movs	r1, #0
 800621a:	6978      	ldr	r0, [r7, #20]
 800621c:	f7ff ff88 	bl	8006130 <xTimerGenericCommand>
 8006220:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d113      	bne.n	8006250 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	b2da      	uxtb	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	6978      	ldr	r0, [r7, #20]
 8006256:	4798      	blx	r3
}
 8006258:	bf00      	nop
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	200009e0 	.word	0x200009e0

08006264 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800626c:	f107 0308 	add.w	r3, r7, #8
 8006270:	4618      	mov	r0, r3
 8006272:	f000 f857 	bl	8006324 <prvGetNextExpireTime>
 8006276:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4619      	mov	r1, r3
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f803 	bl	8006288 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006282:	f000 f8d5 	bl	8006430 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006286:	e7f1      	b.n	800626c <prvTimerTask+0x8>

08006288 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006292:	f7ff f849 	bl	8005328 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006296:	f107 0308 	add.w	r3, r7, #8
 800629a:	4618      	mov	r0, r3
 800629c:	f000 f866 	bl	800636c <prvSampleTimeNow>
 80062a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d130      	bne.n	800630a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <prvProcessTimerOrBlockTask+0x3c>
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d806      	bhi.n	80062c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062b6:	f7ff f845 	bl	8005344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff ff85 	bl	80061cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062c2:	e024      	b.n	800630e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ca:	4b13      	ldr	r3, [pc, #76]	; (8006318 <prvProcessTimerOrBlockTask+0x90>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <prvProcessTimerOrBlockTask+0x50>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <prvProcessTimerOrBlockTask+0x52>
 80062d8:	2300      	movs	r3, #0
 80062da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <prvProcessTimerOrBlockTask+0x94>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	4619      	mov	r1, r3
 80062ea:	f7fe fd8f 	bl	8004e0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062ee:	f7ff f829 	bl	8005344 <xTaskResumeAll>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <prvProcessTimerOrBlockTask+0x98>)
 80062fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	f3bf 8f6f 	isb	sy
}
 8006308:	e001      	b.n	800630e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800630a:	f7ff f81b 	bl	8005344 <xTaskResumeAll>
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200009e4 	.word	0x200009e4
 800631c:	200009e8 	.word	0x200009e8
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800632c:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <prvGetNextExpireTime+0x44>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <prvGetNextExpireTime+0x16>
 8006336:	2201      	movs	r2, #1
 8006338:	e000      	b.n	800633c <prvGetNextExpireTime+0x18>
 800633a:	2200      	movs	r2, #0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d105      	bne.n	8006354 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <prvGetNextExpireTime+0x44>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e001      	b.n	8006358 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006358:	68fb      	ldr	r3, [r7, #12]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	200009e0 	.word	0x200009e0

0800636c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006374:	f7ff f882 	bl	800547c <xTaskGetTickCount>
 8006378:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800637a:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <prvSampleTimeNow+0x3c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	429a      	cmp	r2, r3
 8006382:	d205      	bcs.n	8006390 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006384:	f000 f936 	bl	80065f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	e002      	b.n	8006396 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006396:	4a04      	ldr	r2, [pc, #16]	; (80063a8 <prvSampleTimeNow+0x3c>)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	200009f0 	.word	0x200009f0

080063ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d812      	bhi.n	80063f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	1ad2      	subs	r2, r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d302      	bcc.n	80063e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063e0:	2301      	movs	r3, #1
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e01b      	b.n	800641e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <prvInsertTimerInActiveList+0x7c>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f7fd fd86 	bl	8003f02 <vListInsert>
 80063f6:	e012      	b.n	800641e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d206      	bcs.n	800640e <prvInsertTimerInActiveList+0x62>
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006408:	2301      	movs	r3, #1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	e007      	b.n	800641e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800640e:	4b07      	ldr	r3, [pc, #28]	; (800642c <prvInsertTimerInActiveList+0x80>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3304      	adds	r3, #4
 8006416:	4619      	mov	r1, r3
 8006418:	4610      	mov	r0, r2
 800641a:	f7fd fd72 	bl	8003f02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800641e:	697b      	ldr	r3, [r7, #20]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200009e4 	.word	0x200009e4
 800642c:	200009e0 	.word	0x200009e0

08006430 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08e      	sub	sp, #56	; 0x38
 8006434:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006436:	e0ca      	b.n	80065ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	da18      	bge.n	8006470 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	3304      	adds	r3, #4
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	61fb      	str	r3, [r7, #28]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006466:	6850      	ldr	r0, [r2, #4]
 8006468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646a:	6892      	ldr	r2, [r2, #8]
 800646c:	4611      	mov	r1, r2
 800646e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f2c0 80aa 	blt.w	80065cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	3304      	adds	r3, #4
 8006488:	4618      	mov	r0, r3
 800648a:	f7fd fd73 	bl	8003f74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800648e:	463b      	mov	r3, r7
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff ff6b 	bl	800636c <prvSampleTimeNow>
 8006496:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b09      	cmp	r3, #9
 800649c:	f200 8097 	bhi.w	80065ce <prvProcessReceivedCommands+0x19e>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <prvProcessReceivedCommands+0x78>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064d1 	.word	0x080064d1
 80064b4:	08006545 	.word	0x08006545
 80064b8:	08006559 	.word	0x08006559
 80064bc:	080065a3 	.word	0x080065a3
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064d1 	.word	0x080064d1
 80064c8:	08006545 	.word	0x08006545
 80064cc:	08006559 	.word	0x08006559
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	18d1      	adds	r1, r2, r3
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f0:	f7ff ff5c 	bl	80063ac <prvInsertTimerInActiveList>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d069      	beq.n	80065ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006500:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d05e      	beq.n	80065ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	441a      	add	r2, r3
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	2100      	movs	r1, #0
 8006520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006522:	f7ff fe05 	bl	8006130 <xTimerGenericCommand>
 8006526:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d14f      	bne.n	80065ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	61bb      	str	r3, [r7, #24]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006556:	e03a      	b.n	80065ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	b2da      	uxtb	r2, r3
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	617b      	str	r3, [r7, #20]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	18d1      	adds	r1, r2, r3
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659c:	f7ff ff06 	bl	80063ac <prvInsertTimerInActiveList>
					break;
 80065a0:	e015      	b.n	80065ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065b2:	f000 fbfd 	bl	8006db0 <vPortFree>
 80065b6:	e00a      	b.n	80065ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ca:	e000      	b.n	80065ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <prvProcessReceivedCommands+0x1c0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	1d39      	adds	r1, r7, #4
 80065d4:	2200      	movs	r2, #0
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe f85a 	bl	8004690 <xQueueReceive>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f47f af2a 	bne.w	8006438 <prvProcessReceivedCommands+0x8>
	}
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	3730      	adds	r7, #48	; 0x30
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	200009e8 	.word	0x200009e8

080065f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065fa:	e048      	b.n	800668e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065fc:	4b2d      	ldr	r3, [pc, #180]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006606:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3304      	adds	r3, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f7fd fcad 	bl	8003f74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d02e      	beq.n	800668e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4413      	add	r3, r2
 8006638:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	d90e      	bls.n	8006660 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800664e:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7fd fc52 	bl	8003f02 <vListInsert>
 800665e:	e016      	b.n	800668e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006660:	2300      	movs	r3, #0
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	2300      	movs	r3, #0
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	2100      	movs	r1, #0
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fd60 	bl	8006130 <xTimerGenericCommand>
 8006670:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	603b      	str	r3, [r7, #0]
}
 800668a:	bf00      	nop
 800668c:	e7fe      	b.n	800668c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1b1      	bne.n	80065fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006698:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800669e:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <prvSwitchTimerLists+0xc4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a04      	ldr	r2, [pc, #16]	; (80066b4 <prvSwitchTimerLists+0xc0>)
 80066a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066a6:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <prvSwitchTimerLists+0xc4>)
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	6013      	str	r3, [r2, #0]
}
 80066ac:	bf00      	nop
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	200009e0 	.word	0x200009e0
 80066b8:	200009e4 	.word	0x200009e4

080066bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066c2:	f000 f987 	bl	80069d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <prvCheckForValidListAndQueue+0x60>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d120      	bne.n	8006710 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ce:	4814      	ldr	r0, [pc, #80]	; (8006720 <prvCheckForValidListAndQueue+0x64>)
 80066d0:	f7fd fbc6 	bl	8003e60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066d4:	4813      	ldr	r0, [pc, #76]	; (8006724 <prvCheckForValidListAndQueue+0x68>)
 80066d6:	f7fd fbc3 	bl	8003e60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066da:	4b13      	ldr	r3, [pc, #76]	; (8006728 <prvCheckForValidListAndQueue+0x6c>)
 80066dc:	4a10      	ldr	r2, [pc, #64]	; (8006720 <prvCheckForValidListAndQueue+0x64>)
 80066de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066e0:	4b12      	ldr	r3, [pc, #72]	; (800672c <prvCheckForValidListAndQueue+0x70>)
 80066e2:	4a10      	ldr	r2, [pc, #64]	; (8006724 <prvCheckForValidListAndQueue+0x68>)
 80066e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066e6:	2300      	movs	r3, #0
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	4b11      	ldr	r3, [pc, #68]	; (8006730 <prvCheckForValidListAndQueue+0x74>)
 80066ec:	4a11      	ldr	r2, [pc, #68]	; (8006734 <prvCheckForValidListAndQueue+0x78>)
 80066ee:	2110      	movs	r1, #16
 80066f0:	200a      	movs	r0, #10
 80066f2:	f7fd fcd1 	bl	8004098 <xQueueGenericCreateStatic>
 80066f6:	4603      	mov	r3, r0
 80066f8:	4a08      	ldr	r2, [pc, #32]	; (800671c <prvCheckForValidListAndQueue+0x60>)
 80066fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066fc:	4b07      	ldr	r3, [pc, #28]	; (800671c <prvCheckForValidListAndQueue+0x60>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006704:	4b05      	ldr	r3, [pc, #20]	; (800671c <prvCheckForValidListAndQueue+0x60>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	490b      	ldr	r1, [pc, #44]	; (8006738 <prvCheckForValidListAndQueue+0x7c>)
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe fb54 	bl	8004db8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006710:	f000 f990 	bl	8006a34 <vPortExitCritical>
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200009e8 	.word	0x200009e8
 8006720:	200009b8 	.word	0x200009b8
 8006724:	200009cc 	.word	0x200009cc
 8006728:	200009e0 	.word	0x200009e0
 800672c:	200009e4 	.word	0x200009e4
 8006730:	20000a94 	.word	0x20000a94
 8006734:	200009f4 	.word	0x200009f4
 8006738:	08008670 	.word	0x08008670

0800673c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800674a:	f06f 0301 	mvn.w	r3, #1
 800674e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <xTimerPendFunctionCallFromISR+0x3c>)
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	f107 0114 	add.w	r1, r7, #20
 8006764:	2300      	movs	r3, #0
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	f7fd fe6a 	bl	8004440 <xQueueGenericSendFromISR>
 800676c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006770:	4618      	mov	r0, r3
 8006772:	3728      	adds	r7, #40	; 0x28
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	200009e8 	.word	0x200009e8

0800677c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3b04      	subs	r3, #4
 800678c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3b04      	subs	r3, #4
 800679a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f023 0201 	bic.w	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3b04      	subs	r3, #4
 80067aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067ac:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <pxPortInitialiseStack+0x64>)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3b14      	subs	r3, #20
 80067b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3b04      	subs	r3, #4
 80067c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f06f 0202 	mvn.w	r2, #2
 80067ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3b20      	subs	r3, #32
 80067d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067d2:	68fb      	ldr	r3, [r7, #12]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	080067e5 	.word	0x080067e5

080067e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ee:	4b12      	ldr	r3, [pc, #72]	; (8006838 <prvTaskExitError+0x54>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f6:	d00a      	beq.n	800680e <prvTaskExitError+0x2a>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <prvTaskExitError+0x28>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60bb      	str	r3, [r7, #8]
}
 8006820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006822:	bf00      	nop
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d0fc      	beq.n	8006824 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800682a:	bf00      	nop
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	2000000c 	.word	0x2000000c
 800683c:	00000000 	.word	0x00000000

08006840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006840:	4b07      	ldr	r3, [pc, #28]	; (8006860 <pxCurrentTCBConst2>)
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	6808      	ldr	r0, [r1, #0]
 8006846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684a:	f380 8809 	msr	PSP, r0
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8811 	msr	BASEPRI, r0
 800685a:	4770      	bx	lr
 800685c:	f3af 8000 	nop.w

08006860 <pxCurrentTCBConst2>:
 8006860:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop

08006868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006868:	4808      	ldr	r0, [pc, #32]	; (800688c <prvPortStartFirstTask+0x24>)
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	6800      	ldr	r0, [r0, #0]
 800686e:	f380 8808 	msr	MSP, r0
 8006872:	f04f 0000 	mov.w	r0, #0
 8006876:	f380 8814 	msr	CONTROL, r0
 800687a:	b662      	cpsie	i
 800687c:	b661      	cpsie	f
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	df00      	svc	0
 8006888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800688a:	bf00      	nop
 800688c:	e000ed08 	.word	0xe000ed08

08006890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006896:	4b46      	ldr	r3, [pc, #280]	; (80069b0 <xPortStartScheduler+0x120>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <xPortStartScheduler+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d10a      	bne.n	80068b6 <xPortStartScheduler+0x26>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	613b      	str	r3, [r7, #16]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068b6:	4b3e      	ldr	r3, [pc, #248]	; (80069b0 <xPortStartScheduler+0x120>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3f      	ldr	r2, [pc, #252]	; (80069b8 <xPortStartScheduler+0x128>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d10a      	bne.n	80068d6 <xPortStartScheduler+0x46>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	60fb      	str	r3, [r7, #12]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068d6:	4b39      	ldr	r3, [pc, #228]	; (80069bc <xPortStartScheduler+0x12c>)
 80068d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4b31      	ldr	r3, [pc, #196]	; (80069c0 <xPortStartScheduler+0x130>)
 80068fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <xPortStartScheduler+0x134>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006904:	e009      	b.n	800691a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006906:	4b2f      	ldr	r3, [pc, #188]	; (80069c4 <xPortStartScheduler+0x134>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <xPortStartScheduler+0x134>)
 800690e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	b2db      	uxtb	r3, r3
 8006918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d0ef      	beq.n	8006906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006926:	4b27      	ldr	r3, [pc, #156]	; (80069c4 <xPortStartScheduler+0x134>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1c3 0307 	rsb	r3, r3, #7
 800692e:	2b04      	cmp	r3, #4
 8006930:	d00a      	beq.n	8006948 <xPortStartScheduler+0xb8>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	60bb      	str	r3, [r7, #8]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006948:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <xPortStartScheduler+0x134>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	4a1d      	ldr	r2, [pc, #116]	; (80069c4 <xPortStartScheduler+0x134>)
 8006950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <xPortStartScheduler+0x134>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <xPortStartScheduler+0x134>)
 800695c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006966:	4b18      	ldr	r3, [pc, #96]	; (80069c8 <xPortStartScheduler+0x138>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <xPortStartScheduler+0x138>)
 800696c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006972:	4b15      	ldr	r3, [pc, #84]	; (80069c8 <xPortStartScheduler+0x138>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <xPortStartScheduler+0x138>)
 8006978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800697c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800697e:	f000 f8dd 	bl	8006b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <xPortStartScheduler+0x13c>)
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006988:	f000 f8fc 	bl	8006b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800698c:	4b10      	ldr	r3, [pc, #64]	; (80069d0 <xPortStartScheduler+0x140>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0f      	ldr	r2, [pc, #60]	; (80069d0 <xPortStartScheduler+0x140>)
 8006992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006998:	f7ff ff66 	bl	8006868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800699c:	f7fe fe36 	bl	800560c <vTaskSwitchContext>
	prvTaskExitError();
 80069a0:	f7ff ff20 	bl	80067e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	e000ed00 	.word	0xe000ed00
 80069b4:	410fc271 	.word	0x410fc271
 80069b8:	410fc270 	.word	0x410fc270
 80069bc:	e000e400 	.word	0xe000e400
 80069c0:	20000ae4 	.word	0x20000ae4
 80069c4:	20000ae8 	.word	0x20000ae8
 80069c8:	e000ed20 	.word	0xe000ed20
 80069cc:	2000000c 	.word	0x2000000c
 80069d0:	e000ef34 	.word	0xe000ef34

080069d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	607b      	str	r3, [r7, #4]
}
 80069ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	4a0d      	ldr	r2, [pc, #52]	; (8006a2c <vPortEnterCritical+0x58>)
 80069f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069f8:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <vPortEnterCritical+0x58>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d10f      	bne.n	8006a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <vPortEnterCritical+0x5c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00a      	beq.n	8006a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	603b      	str	r3, [r7, #0]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <vPortEnterCritical+0x4a>
	}
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	2000000c 	.word	0x2000000c
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a3a:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <vPortExitCritical+0x50>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10a      	bne.n	8006a58 <vPortExitCritical+0x24>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	607b      	str	r3, [r7, #4]
}
 8006a54:	bf00      	nop
 8006a56:	e7fe      	b.n	8006a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <vPortExitCritical+0x50>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	4a09      	ldr	r2, [pc, #36]	; (8006a84 <vPortExitCritical+0x50>)
 8006a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <vPortExitCritical+0x50>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <vPortExitCritical+0x42>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c
	...

08006a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a90:	f3ef 8009 	mrs	r0, PSP
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <pxCurrentTCBConst>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f01e 0f10 	tst.w	lr, #16
 8006aa0:	bf08      	it	eq
 8006aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aaa:	6010      	str	r0, [r2, #0]
 8006aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ab4:	f380 8811 	msr	BASEPRI, r0
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f7fe fda4 	bl	800560c <vTaskSwitchContext>
 8006ac4:	f04f 0000 	mov.w	r0, #0
 8006ac8:	f380 8811 	msr	BASEPRI, r0
 8006acc:	bc09      	pop	{r0, r3}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad6:	f01e 0f10 	tst.w	lr, #16
 8006ada:	bf08      	it	eq
 8006adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ae0:	f380 8809 	msr	PSP, r0
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst>:
 8006af0:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	607b      	str	r3, [r7, #4]
}
 8006b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b12:	f7fe fcc3 	bl	800549c <xTaskIncrementTick>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b1c:	4b06      	ldr	r3, [pc, #24]	; (8006b38 <SysTick_Handler+0x40>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	2300      	movs	r3, #0
 8006b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f383 8811 	msr	BASEPRI, r3
}
 8006b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <vPortSetupTimerInterrupt+0x38>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <vPortSetupTimerInterrupt+0x3c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <vPortSetupTimerInterrupt+0x40>)
 8006b52:	fba2 2303 	umull	r2, r3, r2, r3
 8006b56:	099b      	lsrs	r3, r3, #6
 8006b58:	4a09      	ldr	r2, [pc, #36]	; (8006b80 <vPortSetupTimerInterrupt+0x44>)
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b5e:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <vPortSetupTimerInterrupt+0x34>)
 8006b60:	2207      	movs	r2, #7
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	bf00      	nop
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	e000e010 	.word	0xe000e010
 8006b74:	e000e018 	.word	0xe000e018
 8006b78:	20000000 	.word	0x20000000
 8006b7c:	10624dd3 	.word	0x10624dd3
 8006b80:	e000e014 	.word	0xe000e014

08006b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b94 <vPortEnableVFP+0x10>
 8006b88:	6801      	ldr	r1, [r0, #0]
 8006b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b8e:	6001      	str	r1, [r0, #0]
 8006b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b92:	bf00      	nop
 8006b94:	e000ed88 	.word	0xe000ed88

08006b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b9e:	f3ef 8305 	mrs	r3, IPSR
 8006ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d914      	bls.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <vPortValidateInterruptPriority+0x70>)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006bb4:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <vPortValidateInterruptPriority+0x74>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	7afa      	ldrb	r2, [r7, #11]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d20a      	bcs.n	8006bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bd4:	4b0e      	ldr	r3, [pc, #56]	; (8006c10 <vPortValidateInterruptPriority+0x78>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <vPortValidateInterruptPriority+0x7c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d90a      	bls.n	8006bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	603b      	str	r3, [r7, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <vPortValidateInterruptPriority+0x60>
	}
 8006bfa:	bf00      	nop
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	e000e3f0 	.word	0xe000e3f0
 8006c0c:	20000ae4 	.word	0x20000ae4
 8006c10:	e000ed0c 	.word	0xe000ed0c
 8006c14:	20000ae8 	.word	0x20000ae8

08006c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c24:	f7fe fb80 	bl	8005328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c28:	4b5b      	ldr	r3, [pc, #364]	; (8006d98 <pvPortMalloc+0x180>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c30:	f000 f920 	bl	8006e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c34:	4b59      	ldr	r3, [pc, #356]	; (8006d9c <pvPortMalloc+0x184>)
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 8093 	bne.w	8006d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01d      	beq.n	8006c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c48:	2208      	movs	r2, #8
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d014      	beq.n	8006c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	3308      	adds	r3, #8
 8006c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <pvPortMalloc+0x6c>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	617b      	str	r3, [r7, #20]
}
 8006c80:	bf00      	nop
 8006c82:	e7fe      	b.n	8006c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d06e      	beq.n	8006d68 <pvPortMalloc+0x150>
 8006c8a:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <pvPortMalloc+0x188>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d869      	bhi.n	8006d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c94:	4b43      	ldr	r3, [pc, #268]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c98:	4b42      	ldr	r3, [pc, #264]	; (8006da4 <pvPortMalloc+0x18c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c9e:	e004      	b.n	8006caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d903      	bls.n	8006cbc <pvPortMalloc+0xa4>
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f1      	bne.n	8006ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <pvPortMalloc+0x180>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d050      	beq.n	8006d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2208      	movs	r2, #8
 8006ccc:	4413      	add	r3, r2
 8006cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d91f      	bls.n	8006d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <pvPortMalloc+0xf8>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	613b      	str	r3, [r7, #16]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d22:	69b8      	ldr	r0, [r7, #24]
 8006d24:	f000 f908 	bl	8006f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <pvPortMalloc+0x188>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <pvPortMalloc+0x188>)
 8006d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d36:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <pvPortMalloc+0x188>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <pvPortMalloc+0x190>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d203      	bcs.n	8006d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d42:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <pvPortMalloc+0x188>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a18      	ldr	r2, [pc, #96]	; (8006da8 <pvPortMalloc+0x190>)
 8006d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <pvPortMalloc+0x184>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <pvPortMalloc+0x194>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <pvPortMalloc+0x194>)
 8006d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d68:	f7fe faec 	bl	8005344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f003 0307 	and.w	r3, r3, #7
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <pvPortMalloc+0x174>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60fb      	str	r3, [r7, #12]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <pvPortMalloc+0x172>
	return pvReturn;
 8006d8c:	69fb      	ldr	r3, [r7, #28]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3728      	adds	r7, #40	; 0x28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200046f4 	.word	0x200046f4
 8006d9c:	20004708 	.word	0x20004708
 8006da0:	200046f8 	.word	0x200046f8
 8006da4:	200046ec 	.word	0x200046ec
 8006da8:	200046fc 	.word	0x200046fc
 8006dac:	20004700 	.word	0x20004700

08006db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04d      	beq.n	8006e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	425b      	negs	r3, r3
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	4b24      	ldr	r3, [pc, #144]	; (8006e68 <vPortFree+0xb8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <vPortFree+0x44>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	60fb      	str	r3, [r7, #12]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00a      	beq.n	8006e12 <vPortFree+0x62>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60bb      	str	r3, [r7, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <vPortFree+0xb8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01e      	beq.n	8006e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11a      	bne.n	8006e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <vPortFree+0xb8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e38:	f7fe fa76 	bl	8005328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <vPortFree+0xbc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4413      	add	r3, r2
 8006e46:	4a09      	ldr	r2, [pc, #36]	; (8006e6c <vPortFree+0xbc>)
 8006e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e4a:	6938      	ldr	r0, [r7, #16]
 8006e4c:	f000 f874 	bl	8006f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e50:	4b07      	ldr	r3, [pc, #28]	; (8006e70 <vPortFree+0xc0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a06      	ldr	r2, [pc, #24]	; (8006e70 <vPortFree+0xc0>)
 8006e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e5a:	f7fe fa73 	bl	8005344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e5e:	bf00      	nop
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20004708 	.word	0x20004708
 8006e6c:	200046f8 	.word	0x200046f8
 8006e70:	20004704 	.word	0x20004704

08006e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <prvHeapInit+0xac>)
 8006e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00c      	beq.n	8006ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3307      	adds	r3, #7
 8006e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <prvHeapInit+0xac>)
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006eac:	4a1d      	ldr	r2, [pc, #116]	; (8006f24 <prvHeapInit+0xb0>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eb2:	4b1c      	ldr	r3, [pc, #112]	; (8006f24 <prvHeapInit+0xb0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1a9b      	subs	r3, r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0307 	bic.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <prvHeapInit+0xb4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2200      	movs	r2, #0
 8006edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ede:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <prvHeapInit+0xb4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	1ad2      	subs	r2, r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	; (8006f28 <prvHeapInit+0xb4>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <prvHeapInit+0xb8>)
 8006f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <prvHeapInit+0xbc>)
 8006f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <prvHeapInit+0xc0>)
 8006f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	20000aec 	.word	0x20000aec
 8006f24:	200046ec 	.word	0x200046ec
 8006f28:	200046f4 	.word	0x200046f4
 8006f2c:	200046fc 	.word	0x200046fc
 8006f30:	200046f8 	.word	0x200046f8
 8006f34:	20004708 	.word	0x20004708

08006f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f40:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <prvInsertBlockIntoFreeList+0xac>)
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e002      	b.n	8006f4c <prvInsertBlockIntoFreeList+0x14>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d8f7      	bhi.n	8006f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d108      	bne.n	8006f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	441a      	add	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d118      	bne.n	8006fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	4b15      	ldr	r3, [pc, #84]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d00d      	beq.n	8006fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	441a      	add	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e008      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e003      	b.n	8006fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d002      	beq.n	8006fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	200046ec 	.word	0x200046ec
 8006fe8:	200046f4 	.word	0x200046f4

08006fec <eMBMasterReqWriteHoldingRegister>:
 *
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqWriteHoldingRegister( UCHAR ucSndAddr, USHORT usRegAddr, USHORT usRegData, LONG lTimeOut )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	607b      	str	r3, [r7, #4]
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	81bb      	strh	r3, [r7, #12]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8007000:	2300      	movs	r3, #0
 8007002:	75fb      	strb	r3, [r7, #23]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	2b10      	cmp	r3, #16
 8007008:	d902      	bls.n	8007010 <eMBMasterReqWriteHoldingRegister+0x24>
 800700a:	2302      	movs	r3, #2
 800700c:	75fb      	strb	r3, [r7, #23]
 800700e:	e03a      	b.n	8007086 <eMBMasterReqWriteHoldingRegister+0x9a>
    else if ( xMBMasterRunResTake( lTimeOut ) == FALSE ) eErrStatus = MB_MRE_MASTER_BUSY;
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fc17 	bl	8007844 <xMBMasterRunResTake>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <eMBMasterReqWriteHoldingRegister+0x36>
 800701c:	2305      	movs	r3, #5
 800701e:	75fb      	strb	r3, [r7, #23]
 8007020:	e031      	b.n	8007086 <eMBMasterReqWriteHoldingRegister+0x9a>
    else
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8007022:	f107 0310 	add.w	r3, r7, #16
 8007026:	4618      	mov	r0, r3
 8007028:	f001 f852 	bl	80080d0 <vMBMasterGetPDUSndBuf>
        vMBMasterSetDestAddress(ucSndAddr);
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fb4a 	bl	80076c8 <vMBMasterSetDestAddress>
        ucMBFrame[MB_PDU_FUNC_OFF]                = MB_FUNC_WRITE_REGISTER;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2206      	movs	r2, #6
 8007038:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF]      = usRegAddr >> 8; // MSB Byte
 800703a:	89bb      	ldrh	r3, [r7, #12]
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	b29a      	uxth	r2, r3
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	3301      	adds	r3, #1
 8007044:	b2d2      	uxtb	r2, r2
 8007046:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_ADDR_OFF + 1]  = usRegAddr && 0xFF; // LSB Byte
 8007048:	89bb      	ldrh	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2da      	uxtb	r2, r3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	3302      	adds	r3, #2
 8007058:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF]     = usRegData >> 8;
 800705a:	897b      	ldrh	r3, [r7, #10]
 800705c:	0a1b      	lsrs	r3, r3, #8
 800705e:	b29a      	uxth	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	3303      	adds	r3, #3
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
        ucMBFrame[MB_PDU_REQ_WRITE_VALUE_OFF + 1] = usRegData ;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	3304      	adds	r3, #4
 800706c:	897a      	ldrh	r2, [r7, #10]
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	701a      	strb	r2, [r3, #0]
        vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_SIZE );
 8007072:	2005      	movs	r0, #5
 8007074:	f001 f83c 	bl	80080f0 <vMBMasterSetPDUSndLength>
        ( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
 8007078:	2008      	movs	r0, #8
 800707a:	f000 fb6b 	bl	8007754 <xMBMasterPortEventPost>
        eErrStatus = eMBMasterWaitRequestFinish( );
 800707e:	f000 fc97 	bl	80079b0 <eMBMasterWaitRequestFinish>
 8007082:	4603      	mov	r3, r0
 8007084:	75fb      	strb	r3, [r7, #23]
    }
    return eErrStatus;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <eMBMasterFuncWriteHoldingRegister>:

eMBException
eMBMasterFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_SIZE_MIN + MB_PDU_FUNC_WRITE_SIZE ) )
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	d122      	bne.n	80070ec <eMBMasterFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3301      	adds	r3, #1
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3302      	adds	r3, #2
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	89bb      	ldrh	r3, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80070c0:	89bb      	ldrh	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	1cd8      	adds	r0, r3, #3
 80070ca:	89b9      	ldrh	r1, [r7, #12]
 80070cc:	2301      	movs	r3, #1
 80070ce:	2201      	movs	r2, #1
 80070d0:	f001 f8e8 	bl	80082a4 <eMBMasterRegHoldingCB>
 80070d4:	4603      	mov	r3, r0
 80070d6:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d008      	beq.n	80070f0 <eMBMasterFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 80070de:	7afb      	ldrb	r3, [r7, #11]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f8df 	bl	80072a4 <prveMBError2Exception>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
 80070ea:	e001      	b.n	80070f0 <eMBMasterFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80070ec:	2303      	movs	r3, #3
 80070ee:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <eMBMasterFuncReadHoldingRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 8007104:	2300      	movs	r3, #0
 8007106:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 8007108:	f001 f81e 	bl	8008148 <xMBMasterRequestIsBroadcast>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <eMBMasterFuncReadHoldingRegister+0x1e>
    {
        eStatus = MB_EX_NONE;
 8007112:	2300      	movs	r3, #0
 8007114:	75fb      	strb	r3, [r7, #23]
 8007116:	e047      	b.n	80071a8 <eMBMasterFuncReadHoldingRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	881b      	ldrh	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d941      	bls.n	80071a4 <eMBMasterFuncReadHoldingRegister+0xaa>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 8007120:	f107 030c 	add.w	r3, r7, #12
 8007124:	4618      	mov	r0, r3
 8007126:	f000 ffd3 	bl	80080d0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3301      	adds	r3, #1
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b29b      	uxth	r3, r3
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3302      	adds	r3, #2
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	b29a      	uxth	r2, r3
 800713e:	8abb      	ldrh	r3, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8007144:	8abb      	ldrh	r3, [r7, #20]
 8007146:	3301      	adds	r3, #1
 8007148:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	3303      	adds	r3, #3
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3304      	adds	r3, #4
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b29a      	uxth	r2, r3
 800715e:	8a7b      	ldrh	r3, [r7, #18]
 8007160:	4313      	orrs	r3, r2
 8007162:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 8007164:	8a7b      	ldrh	r3, [r7, #18]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d019      	beq.n	800719e <eMBMasterFuncReadHoldingRegister+0xa4>
 800716a:	8a7b      	ldrh	r3, [r7, #18]
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	3201      	adds	r2, #1
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	4293      	cmp	r3, r2
 8007176:	d112      	bne.n	800719e <eMBMasterFuncReadHoldingRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegHoldingCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount, MB_REG_READ );
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	1c98      	adds	r0, r3, #2
 800717c:	8a7a      	ldrh	r2, [r7, #18]
 800717e:	8ab9      	ldrh	r1, [r7, #20]
 8007180:	2300      	movs	r3, #0
 8007182:	f001 f88f 	bl	80082a4 <eMBMasterRegHoldingCB>
 8007186:	4603      	mov	r3, r0
 8007188:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800718a:	7c7b      	ldrb	r3, [r7, #17]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <eMBMasterFuncReadHoldingRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007190:	7c7b      	ldrb	r3, [r7, #17]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 f886 	bl	80072a4 <prveMBError2Exception>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800719c:	e004      	b.n	80071a8 <eMBMasterFuncReadHoldingRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800719e:	2303      	movs	r3, #3
 80071a0:	75fb      	strb	r3, [r7, #23]
 80071a2:	e001      	b.n	80071a8 <eMBMasterFuncReadHoldingRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80071a4:	2303      	movs	r3, #3
 80071a6:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <eMBMasterFuncReadInputRegister>:
    return eErrStatus;
}

eMBException
eMBMasterFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b086      	sub	sp, #24
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
    UCHAR          *ucMBFrame;
    USHORT          usRegAddress;
    USHORT          usRegCount;

    eMBException    eStatus = MB_EX_NONE;
 80071bc:	2300      	movs	r3, #0
 80071be:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    /* If this request is broadcast, and it's read mode. This request don't need execute. */
    if ( xMBMasterRequestIsBroadcast() )
 80071c0:	f000 ffc2 	bl	8008148 <xMBMasterRequestIsBroadcast>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <eMBMasterFuncReadInputRegister+0x1e>
    {
        eStatus = MB_EX_NONE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	75fb      	strb	r3, [r7, #23]
 80071ce:	e047      	b.n	8007260 <eMBMasterFuncReadInputRegister+0xae>
    }
    else if( *usLen >= MB_PDU_SIZE_MIN + MB_PDU_FUNC_READ_SIZE_MIN )
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d941      	bls.n	800725c <eMBMasterFuncReadInputRegister+0xaa>
    {
        vMBMasterGetPDUSndBuf(&ucMBFrame);
 80071d8:	f107 030c 	add.w	r3, r7, #12
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 ff77 	bl	80080d0 <vMBMasterGetPDUSndBuf>
        usRegAddress = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF] << 8 );
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_ADDR_OFF + 1] );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3302      	adds	r3, #2
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	8abb      	ldrh	r3, [r7, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80071fc:	8abb      	ldrh	r3, [r7, #20]
 80071fe:	3301      	adds	r3, #1
 8007200:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF] << 8 );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3303      	adds	r3, #3
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	b29b      	uxth	r3, r3
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( ucMBFrame[MB_PDU_REQ_READ_REGCNT_OFF + 1] );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3304      	adds	r3, #4
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	b29a      	uxth	r2, r3
 8007216:	8a7b      	ldrh	r3, [r7, #18]
 8007218:	4313      	orrs	r3, r2
 800721a:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception.
         */
        if( ( usRegCount >= 1 ) && ( 2 * usRegCount == pucFrame[MB_PDU_FUNC_READ_BYTECNT_OFF] ) )
 800721c:	8a7b      	ldrh	r3, [r7, #18]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d019      	beq.n	8007256 <eMBMasterFuncReadInputRegister+0xa4>
 8007222:	8a7b      	ldrh	r3, [r7, #18]
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	3201      	adds	r2, #1
 800722a:	7812      	ldrb	r2, [r2, #0]
 800722c:	4293      	cmp	r3, r2
 800722e:	d112      	bne.n	8007256 <eMBMasterFuncReadInputRegister+0xa4>
        {
            /* Make callback to fill the buffer. */
            eRegStatus = eMBMasterRegInputCB( &pucFrame[MB_PDU_FUNC_READ_VALUES_OFF], usRegAddress, usRegCount );
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3302      	adds	r3, #2
 8007234:	8a7a      	ldrh	r2, [r7, #18]
 8007236:	8ab9      	ldrh	r1, [r7, #20]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 ffd1 	bl	80081e0 <eMBMasterRegInputCB>
 800723e:	4603      	mov	r3, r0
 8007240:	747b      	strb	r3, [r7, #17]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8007242:	7c7b      	ldrb	r3, [r7, #17]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00b      	beq.n	8007260 <eMBMasterFuncReadInputRegister+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8007248:	7c7b      	ldrb	r3, [r7, #17]
 800724a:	4618      	mov	r0, r3
 800724c:	f000 f82a 	bl	80072a4 <prveMBError2Exception>
 8007250:	4603      	mov	r3, r0
 8007252:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8007254:	e004      	b.n	8007260 <eMBMasterFuncReadInputRegister+0xae>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8007256:	2303      	movs	r3, #3
 8007258:	75fb      	strb	r3, [r7, #23]
 800725a:	e001      	b.n	8007260 <eMBMasterFuncReadInputRegister+0xae>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800725c:	2303      	movs	r3, #3
 800725e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3301      	adds	r3, #1
 800727a:	4a08      	ldr	r2, [pc, #32]	; (800729c <eMBFuncReportSlaveID+0x30>)
 800727c:	8812      	ldrh	r2, [r2, #0]
 800727e:	4908      	ldr	r1, [pc, #32]	; (80072a0 <eMBFuncReportSlaveID+0x34>)
 8007280:	4618      	mov	r0, r3
 8007282:	f001 f8c3 	bl	800840c <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <eMBFuncReportSlaveID+0x30>)
 8007288:	881b      	ldrh	r3, [r3, #0]
 800728a:	3301      	adds	r3, #1
 800728c:	b29a      	uxth	r2, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	2000472c 	.word	0x2000472c
 80072a0:	2000470c 	.word	0x2000470c

080072a4 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 80072ae:	79fb      	ldrb	r3, [r7, #7]
 80072b0:	2b07      	cmp	r3, #7
 80072b2:	d00c      	beq.n	80072ce <prveMBError2Exception+0x2a>
 80072b4:	2b07      	cmp	r3, #7
 80072b6:	dc0d      	bgt.n	80072d4 <prveMBError2Exception+0x30>
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <prveMBError2Exception+0x1e>
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d003      	beq.n	80072c8 <prveMBError2Exception+0x24>
 80072c0:	e008      	b.n	80072d4 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
            break;
 80072c6:	e008      	b.n	80072da <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80072c8:	2302      	movs	r3, #2
 80072ca:	73fb      	strb	r3, [r7, #15]
            break;
 80072cc:	e005      	b.n	80072da <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80072ce:	2306      	movs	r3, #6
 80072d0:	73fb      	strb	r3, [r7, #15]
            break;
 80072d2:	e002      	b.n	80072da <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80072d4:	2304      	movs	r3, #4
 80072d6:	73fb      	strb	r3, [r7, #15]
            break;
 80072d8:	bf00      	nop
    }

    return eStatus;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <eMBMasterInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterInit( eMBMode eMode, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	603a      	str	r2, [r7, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	71fb      	strb	r3, [r7, #7]
 80072f6:	460b      	mov	r3, r1
 80072f8:	71bb      	strb	r3, [r7, #6]
 80072fa:	4613      	mov	r3, r2
 80072fc:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]

    switch (eMode)
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d120      	bne.n	800734a <eMBMasterInit+0x62>
    {
#if MB_MASTER_RTU_ENABLED > 0
    case MB_RTU:
        pvMBMasterFrameStartCur = eMBMasterRTUStart; /* pvMBMasterFrameStartCur -> function pointer*/
 8007308:	4b1c      	ldr	r3, [pc, #112]	; (800737c <eMBMasterInit+0x94>)
 800730a:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <eMBMasterInit+0x98>)
 800730c:	601a      	str	r2, [r3, #0]
        pvMBMasterFrameStopCur = eMBMasterRTUStop;
 800730e:	4b1d      	ldr	r3, [pc, #116]	; (8007384 <eMBMasterInit+0x9c>)
 8007310:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <eMBMasterInit+0xa0>)
 8007312:	601a      	str	r2, [r3, #0]
        peMBMasterFrameSendCur = eMBMasterRTUSend;
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <eMBMasterInit+0xa4>)
 8007316:	4a1e      	ldr	r2, [pc, #120]	; (8007390 <eMBMasterInit+0xa8>)
 8007318:	601a      	str	r2, [r3, #0]
        peMBMasterFrameReceiveCur = eMBMasterRTUReceive;
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <eMBMasterInit+0xac>)
 800731c:	4a1e      	ldr	r2, [pc, #120]	; (8007398 <eMBMasterInit+0xb0>)
 800731e:	601a      	str	r2, [r3, #0]
        pvMBMasterFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBMasterPortClose : NULL;
 8007320:	4b1e      	ldr	r3, [pc, #120]	; (800739c <eMBMasterInit+0xb4>)
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
        pxMBMasterFrameCBByteReceived = xMBMasterRTUReceiveFSM;
 8007326:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <eMBMasterInit+0xb8>)
 8007328:	4a1e      	ldr	r2, [pc, #120]	; (80073a4 <eMBMasterInit+0xbc>)
 800732a:	601a      	str	r2, [r3, #0]
        pxMBMasterFrameCBTransmitterEmpty = xMBMasterRTUTransmitFSM;
 800732c:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <eMBMasterInit+0xc0>)
 800732e:	4a1f      	ldr	r2, [pc, #124]	; (80073ac <eMBMasterInit+0xc4>)
 8007330:	601a      	str	r2, [r3, #0]
        pxMBMasterPortCBTimerExpired = xMBMasterRTUTimerExpired;
 8007332:	4b1f      	ldr	r3, [pc, #124]	; (80073b0 <eMBMasterInit+0xc8>)
 8007334:	4a1f      	ldr	r2, [pc, #124]	; (80073b4 <eMBMasterInit+0xcc>)
 8007336:	601a      	str	r2, [r3, #0]

        eStatus = eMBMasterRTUInit(ucPort, ulBaudRate, eParity);
 8007338:	797a      	ldrb	r2, [r7, #5]
 800733a:	79bb      	ldrb	r3, [r7, #6]
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fcb8 	bl	8007cb4 <eMBMasterRTUInit>
 8007344:	4603      	mov	r3, r0
 8007346:	73fb      	strb	r3, [r7, #15]
        break;
 8007348:	e002      	b.n	8007350 <eMBMasterInit+0x68>

        eStatus = eMBMasterASCIIInit(ucPort, ulBaudRate, eParity );
        break;
#endif
    default:
        eStatus = MB_EINVAL;
 800734a:	2302      	movs	r3, #2
 800734c:	73fb      	strb	r3, [r7, #15]
        break;
 800734e:	bf00      	nop
    }

    if (eStatus == MB_ENOERR)
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10c      	bne.n	8007370 <eMBMasterInit+0x88>
    {
        if (!xMBMasterPortEventInit())
 8007356:	f000 f9e3 	bl	8007720 <xMBMasterPortEventInit>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <eMBMasterInit+0x7e>
        {
            /* port dependent event module initalization failed. */
            eStatus = MB_EPORTERR;
 8007360:	2303      	movs	r3, #3
 8007362:	73fb      	strb	r3, [r7, #15]
 8007364:	e002      	b.n	800736c <eMBMasterInit+0x84>
        }
        else
        {
            eMBState = STATE_DISABLED;
 8007366:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <eMBMasterInit+0xd0>)
 8007368:	2201      	movs	r2, #1
 800736a:	701a      	strb	r2, [r3, #0]
        }
        /* initialize the OS resource for modbus master. */
        vMBMasterOsResInit();
 800736c:	f000 fa5a 	bl	8007824 <vMBMasterOsResInit>
    }
    return eStatus;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20004738 	.word	0x20004738
 8007380:	08007d25 	.word	0x08007d25
 8007384:	2000473c 	.word	0x2000473c
 8007388:	08007d4d 	.word	0x08007d4d
 800738c:	20004734 	.word	0x20004734
 8007390:	08007dd9 	.word	0x08007dd9
 8007394:	20004740 	.word	0x20004740
 8007398:	08007d69 	.word	0x08007d69
 800739c:	20004744 	.word	0x20004744
 80073a0:	20004b58 	.word	0x20004b58
 80073a4:	08007ead 	.word	0x08007ead
 80073a8:	20004b54 	.word	0x20004b54
 80073ac:	08007f69 	.word	0x08007f69
 80073b0:	20004b5c 	.word	0x20004b5c
 80073b4:	08008019 	.word	0x08008019
 80073b8:	20000010 	.word	0x20000010

080073bc <eMBMasterEnable>:
    return eStatus;
}

eMBErrorCode
eMBMasterEnable( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80073c2:	2300      	movs	r3, #0
 80073c4:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80073c6:	4b09      	ldr	r3, [pc, #36]	; (80073ec <eMBMasterEnable+0x30>)
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d106      	bne.n	80073dc <eMBMasterEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBMasterFrameStartCur(  );
 80073ce:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <eMBMasterEnable+0x34>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <eMBMasterEnable+0x30>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
 80073da:	e001      	b.n	80073e0 <eMBMasterEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80073dc:	2306      	movs	r3, #6
 80073de:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80073e0:	79fb      	ldrb	r3, [r7, #7]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000010 	.word	0x20000010
 80073f0:	20004738 	.word	0x20004738

080073f4 <eMBMasterPoll>:
}


eMBErrorCode
eMBMasterPoll( void )
{
 80073f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i , j;
    eMBErrorCode    eStatus = MB_ENOERR;
 80073fa:	2300      	movs	r3, #0
 80073fc:	71fb      	strb	r3, [r7, #7]
    eMBMasterEventType    eEvent;
    eMBMasterErrorEventType errorType;

    /* Check if the protocol stack is ready. */
    if(( eMBState != STATE_ENABLED ) && ( eMBState != STATE_ESTABLISHED))
 80073fe:	4b9b      	ldr	r3, [pc, #620]	; (800766c <eMBMasterPoll+0x278>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <eMBMasterPoll+0x1e>
 8007406:	4b99      	ldr	r3, [pc, #612]	; (800766c <eMBMasterPoll+0x278>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d001      	beq.n	8007412 <eMBMasterPoll+0x1e>
    {
        return MB_EILLSTATE;
 800740e:	2306      	movs	r3, #6
 8007410:	e127      	b.n	8007662 <eMBMasterPoll+0x26e>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBMasterPortEventGet( &eEvent ) == TRUE )
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f9c1 	bl	800779c <xMBMasterPortEventGet>
 800741a:	4603      	mov	r3, r0
 800741c:	2b01      	cmp	r3, #1
 800741e:	f040 811c 	bne.w	800765a <eMBMasterPoll+0x266>
    {
        switch ( eEvent )
 8007422:	88bb      	ldrh	r3, [r7, #4]
 8007424:	3b01      	subs	r3, #1
 8007426:	2b0f      	cmp	r3, #15
 8007428:	f200 8119 	bhi.w	800765e <eMBMasterPoll+0x26a>
 800742c:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <eMBMasterPoll+0x40>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	08007475 	.word	0x08007475
 8007438:	0800747d 	.word	0x0800747d
 800743c:	0800765f 	.word	0x0800765f
 8007440:	080074bb 	.word	0x080074bb
 8007444:	0800765f 	.word	0x0800765f
 8007448:	0800765f 	.word	0x0800765f
 800744c:	0800765f 	.word	0x0800765f
 8007450:	080075af 	.word	0x080075af
 8007454:	0800765f 	.word	0x0800765f
 8007458:	0800765f 	.word	0x0800765f
 800745c:	0800765f 	.word	0x0800765f
 8007460:	0800765f 	.word	0x0800765f
 8007464:	0800765f 	.word	0x0800765f
 8007468:	0800765f 	.word	0x0800765f
 800746c:	0800765f 	.word	0x0800765f
 8007470:	080075d9 	.word	0x080075d9
        {
        case EV_MASTER_READY:
            eMBState = STATE_ESTABLISHED;
 8007474:	4b7d      	ldr	r3, [pc, #500]	; (800766c <eMBMasterPoll+0x278>)
 8007476:	2203      	movs	r2, #3
 8007478:	701a      	strb	r2, [r3, #0]
            break;
 800747a:	e0f1      	b.n	8007660 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_RECEIVED:
            eStatus = peMBMasterFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 800747c:	4b7c      	ldr	r3, [pc, #496]	; (8007670 <eMBMasterPoll+0x27c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a7c      	ldr	r2, [pc, #496]	; (8007674 <eMBMasterPoll+0x280>)
 8007482:	497d      	ldr	r1, [pc, #500]	; (8007678 <eMBMasterPoll+0x284>)
 8007484:	487d      	ldr	r0, [pc, #500]	; (800767c <eMBMasterPoll+0x288>)
 8007486:	4798      	blx	r3
 8007488:	4603      	mov	r3, r0
 800748a:	71fb      	strb	r3, [r7, #7]
            /* Check if the frame is for us. If not ,send an error process event. */
            if ( ( eStatus == MB_ENOERR ) && ( ucRcvAddress == ucMBMasterGetDestAddress() ) )
 800748c:	79fb      	ldrb	r3, [r7, #7]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10c      	bne.n	80074ac <eMBMasterPoll+0xb8>
 8007492:	f000 f90d 	bl	80076b0 <ucMBMasterGetDestAddress>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	4b78      	ldr	r3, [pc, #480]	; (800767c <eMBMasterPoll+0x288>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d104      	bne.n	80074ac <eMBMasterPoll+0xb8>
            {
                ( void ) xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 80074a2:	2004      	movs	r0, #4
 80074a4:	f000 f956 	bl	8007754 <xMBMasterPortEventPost>
 80074a8:	bf00      	nop
            else
            {
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
            }
            break;
 80074aa:	e0d9      	b.n	8007660 <eMBMasterPoll+0x26c>
                vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 80074ac:	2001      	movs	r0, #1
 80074ae:	f000 f927 	bl	8007700 <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 80074b2:	2010      	movs	r0, #16
 80074b4:	f000 f94e 	bl	8007754 <xMBMasterPortEventPost>
            break;
 80074b8:	e0d2      	b.n	8007660 <eMBMasterPoll+0x26c>

        case EV_MASTER_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 80074ba:	4b6f      	ldr	r3, [pc, #444]	; (8007678 <eMBMasterPoll+0x284>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	4b6f      	ldr	r3, [pc, #444]	; (8007680 <eMBMasterPoll+0x28c>)
 80074c2:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 80074c4:	4b6f      	ldr	r3, [pc, #444]	; (8007684 <eMBMasterPoll+0x290>)
 80074c6:	2201      	movs	r2, #1
 80074c8:	701a      	strb	r2, [r3, #0]
            /* If receive frame has exception .The receive function code highest bit is 1.*/
            if(ucFunctionCode >> 7) {
 80074ca:	4b6d      	ldr	r3, [pc, #436]	; (8007680 <eMBMasterPoll+0x28c>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da06      	bge.n	80074e2 <eMBMasterPoll+0xee>
                eException = (eMBException)ucMBFrame[MB_PDU_DATA_OFF];
 80074d4:	4b68      	ldr	r3, [pc, #416]	; (8007678 <eMBMasterPoll+0x284>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	4b69      	ldr	r3, [pc, #420]	; (8007684 <eMBMasterPoll+0x290>)
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e055      	b.n	800758e <eMBMasterPoll+0x19a>
            }
            else
            {
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	e04d      	b.n	8007584 <eMBMasterPoll+0x190>
                {
                    /* No more function handlers registered. Abort. */
                    if (xMasterFuncHandlers[i].ucFunctionCode == 0) {
 80074e8:	4a67      	ldr	r2, [pc, #412]	; (8007688 <eMBMasterPoll+0x294>)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d04b      	beq.n	800758c <eMBMasterPoll+0x198>
                        break;
                    }
                    else if (xMasterFuncHandlers[i].ucFunctionCode == ucFunctionCode) {
 80074f4:	4a64      	ldr	r2, [pc, #400]	; (8007688 <eMBMasterPoll+0x294>)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80074fc:	4b60      	ldr	r3, [pc, #384]	; (8007680 <eMBMasterPoll+0x28c>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	d13c      	bne.n	800757e <eMBMasterPoll+0x18a>
                        vMBMasterSetCBRunInMasterMode(TRUE);
 8007504:	2001      	movs	r0, #1
 8007506:	f000 f8c3 	bl	8007690 <vMBMasterSetCBRunInMasterMode>
                        /* If master request is broadcast,
                         * the master need execute function for all slave.
                         */
                        if ( xMBMasterRequestIsBroadcast() ) {
 800750a:	f000 fe1d 	bl	8008148 <xMBMasterRequestIsBroadcast>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d022      	beq.n	800755a <eMBMasterPoll+0x166>
                            usLength = usMBMasterGetPDUSndLength();
 8007514:	f000 fdfc 	bl	8008110 <usMBMasterGetPDUSndLength>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	4b55      	ldr	r3, [pc, #340]	; (8007674 <eMBMasterPoll+0x280>)
 800751e:	801a      	strh	r2, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 8007520:	2301      	movs	r3, #1
 8007522:	60bb      	str	r3, [r7, #8]
 8007524:	e015      	b.n	8007552 <eMBMasterPoll+0x15e>
                                vMBMasterSetDestAddress(j);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f8cc 	bl	80076c8 <vMBMasterSetDestAddress>
                                eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 8007530:	4a55      	ldr	r2, [pc, #340]	; (8007688 <eMBMasterPoll+0x294>)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	4413      	add	r3, r2
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4a4f      	ldr	r2, [pc, #316]	; (8007678 <eMBMasterPoll+0x284>)
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	494d      	ldr	r1, [pc, #308]	; (8007674 <eMBMasterPoll+0x280>)
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
 8007544:	4603      	mov	r3, r0
 8007546:	461a      	mov	r2, r3
 8007548:	4b4e      	ldr	r3, [pc, #312]	; (8007684 <eMBMasterPoll+0x290>)
 800754a:	701a      	strb	r2, [r3, #0]
                            for(j = 1; j <= MB_MASTER_TOTAL_SLAVE_NUM; j++){
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	3301      	adds	r3, #1
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b10      	cmp	r3, #16
 8007556:	dde6      	ble.n	8007526 <eMBMasterPoll+0x132>
 8007558:	e00d      	b.n	8007576 <eMBMasterPoll+0x182>
                            }
                        }
                        else {
                            eException = xMasterFuncHandlers[i].pxHandler(ucMBFrame, &usLength);
 800755a:	4a4b      	ldr	r2, [pc, #300]	; (8007688 <eMBMasterPoll+0x294>)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	4413      	add	r3, r2
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4a44      	ldr	r2, [pc, #272]	; (8007678 <eMBMasterPoll+0x284>)
 8007566:	6812      	ldr	r2, [r2, #0]
 8007568:	4942      	ldr	r1, [pc, #264]	; (8007674 <eMBMasterPoll+0x280>)
 800756a:	4610      	mov	r0, r2
 800756c:	4798      	blx	r3
 800756e:	4603      	mov	r3, r0
 8007570:	461a      	mov	r2, r3
 8007572:	4b44      	ldr	r3, [pc, #272]	; (8007684 <eMBMasterPoll+0x290>)
 8007574:	701a      	strb	r2, [r3, #0]
                        }
                        vMBMasterSetCBRunInMasterMode(FALSE);
 8007576:	2000      	movs	r0, #0
 8007578:	f000 f88a 	bl	8007690 <vMBMasterSetCBRunInMasterMode>
                        break;
 800757c:	e007      	b.n	800758e <eMBMasterPoll+0x19a>
                for (i = 0; i < MB_FUNC_HANDLERS_MAX; i++)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3301      	adds	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	ddae      	ble.n	80074e8 <eMBMasterPoll+0xf4>
 800758a:	e000      	b.n	800758e <eMBMasterPoll+0x19a>
                        break;
 800758c:	bf00      	nop
                    }
                }
            }
            /* If master has exception ,Master will send error process.Otherwise the Master is idle.*/
            if (eException != MB_EX_NONE) {
 800758e:	4b3d      	ldr	r3, [pc, #244]	; (8007684 <eMBMasterPoll+0x290>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d006      	beq.n	80075a4 <eMBMasterPoll+0x1b0>
                vMBMasterSetErrorType(EV_ERROR_EXECUTE_FUNCTION);
 8007596:	2002      	movs	r0, #2
 8007598:	f000 f8b2 	bl	8007700 <vMBMasterSetErrorType>
                ( void ) xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 800759c:	2010      	movs	r0, #16
 800759e:	f000 f8d9 	bl	8007754 <xMBMasterPortEventPost>
            }
            else {
                vMBMasterCBRequestScuuess( );
                vMBMasterRunResRelease( );
            }
            break;
 80075a2:	e05d      	b.n	8007660 <eMBMasterPoll+0x26c>
                vMBMasterCBRequestScuuess( );
 80075a4:	f000 f972 	bl	800788c <vMBMasterCBRequestScuuess>
                vMBMasterRunResRelease( );
 80075a8:	f000 f964 	bl	8007874 <vMBMasterRunResRelease>
            break;
 80075ac:	e058      	b.n	8007660 <eMBMasterPoll+0x26c>

        case EV_MASTER_FRAME_SENT:
            /* Master is busy now. */
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 80075ae:	4832      	ldr	r0, [pc, #200]	; (8007678 <eMBMasterPoll+0x284>)
 80075b0:	f000 fd8e 	bl	80080d0 <vMBMasterGetPDUSndBuf>
            eStatus = peMBMasterFrameSendCur( ucMBMasterGetDestAddress(), ucMBFrame, usMBMasterGetPDUSndLength() );
 80075b4:	4b35      	ldr	r3, [pc, #212]	; (800768c <eMBMasterPoll+0x298>)
 80075b6:	681c      	ldr	r4, [r3, #0]
 80075b8:	f000 f87a 	bl	80076b0 <ucMBMasterGetDestAddress>
 80075bc:	4603      	mov	r3, r0
 80075be:	461e      	mov	r6, r3
 80075c0:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <eMBMasterPoll+0x284>)
 80075c2:	681d      	ldr	r5, [r3, #0]
 80075c4:	f000 fda4 	bl	8008110 <usMBMasterGetPDUSndLength>
 80075c8:	4603      	mov	r3, r0
 80075ca:	461a      	mov	r2, r3
 80075cc:	4629      	mov	r1, r5
 80075ce:	4630      	mov	r0, r6
 80075d0:	47a0      	blx	r4
 80075d2:	4603      	mov	r3, r0
 80075d4:	71fb      	strb	r3, [r7, #7]
            break;
 80075d6:	e043      	b.n	8007660 <eMBMasterPoll+0x26c>

        case EV_MASTER_ERROR_PROCESS:
            /* Execute specified error process callback function. */
            errorType = eMBMasterGetErrorType();
 80075d8:	f000 f886 	bl	80076e8 <eMBMasterGetErrorType>
 80075dc:	4603      	mov	r3, r0
 80075de:	71bb      	strb	r3, [r7, #6]
            vMBMasterGetPDUSndBuf( &ucMBFrame );
 80075e0:	4825      	ldr	r0, [pc, #148]	; (8007678 <eMBMasterPoll+0x284>)
 80075e2:	f000 fd75 	bl	80080d0 <vMBMasterGetPDUSndBuf>
            switch (errorType) {
 80075e6:	79bb      	ldrb	r3, [r7, #6]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d024      	beq.n	8007636 <eMBMasterPoll+0x242>
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	dc31      	bgt.n	8007654 <eMBMasterPoll+0x260>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <eMBMasterPoll+0x206>
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d00f      	beq.n	8007618 <eMBMasterPoll+0x224>
 80075f8:	e02c      	b.n	8007654 <eMBMasterPoll+0x260>
            case EV_ERROR_RESPOND_TIMEOUT:
                vMBMasterErrorCBRespondTimeout(ucMBMasterGetDestAddress(),
 80075fa:	f000 f859 	bl	80076b0 <ucMBMasterGetDestAddress>
 80075fe:	4603      	mov	r3, r0
 8007600:	461d      	mov	r5, r3
 8007602:	4b1d      	ldr	r3, [pc, #116]	; (8007678 <eMBMasterPoll+0x284>)
 8007604:	681c      	ldr	r4, [r3, #0]
 8007606:	f000 fd83 	bl	8008110 <usMBMasterGetPDUSndLength>
 800760a:	4603      	mov	r3, r0
 800760c:	461a      	mov	r2, r3
 800760e:	4621      	mov	r1, r4
 8007610:	4628      	mov	r0, r5
 8007612:	f000 f95b 	bl	80078cc <vMBMasterErrorCBRespondTimeout>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 8007616:	e01d      	b.n	8007654 <eMBMasterPoll+0x260>
            case EV_ERROR_RECEIVE_DATA:
                vMBMasterErrorCBReceiveData(ucMBMasterGetDestAddress(),
 8007618:	f000 f84a 	bl	80076b0 <ucMBMasterGetDestAddress>
 800761c:	4603      	mov	r3, r0
 800761e:	461d      	mov	r5, r3
 8007620:	4b15      	ldr	r3, [pc, #84]	; (8007678 <eMBMasterPoll+0x284>)
 8007622:	681c      	ldr	r4, [r3, #0]
 8007624:	f000 fd74 	bl	8008110 <usMBMasterGetPDUSndLength>
 8007628:	4603      	mov	r3, r0
 800762a:	461a      	mov	r2, r3
 800762c:	4621      	mov	r1, r4
 800762e:	4628      	mov	r0, r5
 8007630:	f000 f972 	bl	8007918 <vMBMasterErrorCBReceiveData>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 8007634:	e00e      	b.n	8007654 <eMBMasterPoll+0x260>
            case EV_ERROR_EXECUTE_FUNCTION:
                vMBMasterErrorCBExecuteFunction(ucMBMasterGetDestAddress(),
 8007636:	f000 f83b 	bl	80076b0 <ucMBMasterGetDestAddress>
 800763a:	4603      	mov	r3, r0
 800763c:	461d      	mov	r5, r3
 800763e:	4b0e      	ldr	r3, [pc, #56]	; (8007678 <eMBMasterPoll+0x284>)
 8007640:	681c      	ldr	r4, [r3, #0]
 8007642:	f000 fd65 	bl	8008110 <usMBMasterGetPDUSndLength>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	4621      	mov	r1, r4
 800764c:	4628      	mov	r0, r5
 800764e:	f000 f989 	bl	8007964 <vMBMasterErrorCBExecuteFunction>
                        ucMBFrame, usMBMasterGetPDUSndLength());
                break;
 8007652:	bf00      	nop
            }
            vMBMasterRunResRelease();
 8007654:	f000 f90e 	bl	8007874 <vMBMasterRunResRelease>
            break;
 8007658:	e002      	b.n	8007660 <eMBMasterPoll+0x26c>

        default:
            break;
        }

    }
 800765a:	bf00      	nop
 800765c:	e000      	b.n	8007660 <eMBMasterPoll+0x26c>
            break;
 800765e:	bf00      	nop
    return MB_ENOERR;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766a:	bf00      	nop
 800766c:	20000010 	.word	0x20000010
 8007670:	20004740 	.word	0x20004740
 8007674:	20004750 	.word	0x20004750
 8007678:	2000474c 	.word	0x2000474c
 800767c:	20004748 	.word	0x20004748
 8007680:	20004752 	.word	0x20004752
 8007684:	20004753 	.word	0x20004753
 8007688:	20000014 	.word	0x20000014
 800768c:	20004734 	.word	0x20004734

08007690 <vMBMasterSetCBRunInMasterMode>:
{
    return xMBRunInMasterMode;
}
/* Set whether the Modbus Master is run in master mode.*/
void vMBMasterSetCBRunInMasterMode( BOOL IsMasterMode )
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	4603      	mov	r3, r0
 8007698:	71fb      	strb	r3, [r7, #7]
    xMBRunInMasterMode = IsMasterMode;
 800769a:	4a04      	ldr	r2, [pc, #16]	; (80076ac <vMBMasterSetCBRunInMasterMode+0x1c>)
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	7013      	strb	r3, [r2, #0]
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	2000472f 	.word	0x2000472f

080076b0 <ucMBMasterGetDestAddress>:
/* Get Modbus Master send destination address. */
UCHAR ucMBMasterGetDestAddress( void )
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
    return ucMBMasterDestAddress;
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <ucMBMasterGetDestAddress+0x14>)
 80076b6:	781b      	ldrb	r3, [r3, #0]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000472e 	.word	0x2000472e

080076c8 <vMBMasterSetDestAddress>:
/* Set Modbus Master send destination address. */
void vMBMasterSetDestAddress( UCHAR Address )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	71fb      	strb	r3, [r7, #7]
    ucMBMasterDestAddress = Address;
 80076d2:	4a04      	ldr	r2, [pc, #16]	; (80076e4 <vMBMasterSetDestAddress+0x1c>)
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	7013      	strb	r3, [r2, #0]
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	2000472e 	.word	0x2000472e

080076e8 <eMBMasterGetErrorType>:
/* Get Modbus Master current error event type. */
eMBMasterErrorEventType eMBMasterGetErrorType( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
    return eMBMasterCurErrorType;
 80076ec:	4b03      	ldr	r3, [pc, #12]	; (80076fc <eMBMasterGetErrorType+0x14>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	20004730 	.word	0x20004730

08007700 <vMBMasterSetErrorType>:
/* Set Modbus Master current error event type. */
void vMBMasterSetErrorType( eMBMasterErrorEventType errorType )
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	4603      	mov	r3, r0
 8007708:	71fb      	strb	r3, [r7, #7]
    eMBMasterCurErrorType = errorType;
 800770a:	4a04      	ldr	r2, [pc, #16]	; (800771c <vMBMasterSetErrorType+0x1c>)
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	7013      	strb	r3, [r2, #0]
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20004730 	.word	0x20004730

08007720 <xMBMasterPortEventInit>:
static osSemaphoreDef_t   mbEvtSemp_m;
static SemaphoreHandle_t  mbEvtSempId_m;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortEventInit( void )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
    xMasterOsEvent_h = xEventGroupCreateStatic( &xMasterOsEventGroup );
 8007724:	4807      	ldr	r0, [pc, #28]	; (8007744 <xMBMasterPortEventInit+0x24>)
 8007726:	f7fc f9c7 	bl	8003ab8 <xEventGroupCreateStatic>
 800772a:	4603      	mov	r3, r0
 800772c:	4a06      	ldr	r2, [pc, #24]	; (8007748 <xMBMasterPortEventInit+0x28>)
 800772e:	6013      	str	r3, [r2, #0]
    xWaitReqEvent_h = xEventGroupCreateStatic( &xMasterWaitReqEventGroup );
 8007730:	4806      	ldr	r0, [pc, #24]	; (800774c <xMBMasterPortEventInit+0x2c>)
 8007732:	f7fc f9c1 	bl	8003ab8 <xEventGroupCreateStatic>
 8007736:	4603      	mov	r3, r0
 8007738:	4a05      	ldr	r2, [pc, #20]	; (8007750 <xMBMasterPortEventInit+0x30>)
 800773a:	6013      	str	r3, [r2, #0]

    return TRUE;
 800773c:	2301      	movs	r3, #1
}
 800773e:	4618      	mov	r0, r3
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20004758 	.word	0x20004758
 8007748:	20004754 	.word	0x20004754
 800774c:	2000477c 	.word	0x2000477c
 8007750:	20004778 	.word	0x20004778

08007754 <xMBMasterPortEventPost>:

BOOL
xMBMasterPortEventPost( eMBMasterEventType eEvent )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	80fb      	strh	r3, [r7, #6]
	BaseType_t pxTaskWoken = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]

    xEventGroupSetBitsFromISR(xMasterOsEvent_h, eEvent, &pxTaskWoken);
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <xMBMasterPortEventPost+0x40>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	88f9      	ldrh	r1, [r7, #6]
 8007768:	f107 020c 	add.w	r2, r7, #12
 800776c:	4618      	mov	r0, r3
 800776e:	f7fc fb63 	bl	8003e38 <xEventGroupSetBitsFromISR>

    if ( pxTaskWoken ){
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <xMBMasterPortEventPost+0x34>
    	taskYIELD();
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <xMBMasterPortEventPost+0x44>)
 800777a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	f3bf 8f6f 	isb	sy
    }

    return TRUE;
 8007788:	2301      	movs	r3, #1
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20004754 	.word	0x20004754
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <xMBMasterPortEventGet>:

BOOL
xMBMasterPortEventGet( eMBMasterEventType * eEvent )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	6078      	str	r0, [r7, #4]
    EventBits_t uxBits;
    const TickType_t xTicksToWait = 0xFFFFFFFF;
 80077a4:	f04f 33ff 	mov.w	r3, #4294967295
 80077a8:	60fb      	str	r3, [r7, #12]

    /* waiting forever OS event */
    uxBits  = xEventGroupWaitBits(xMasterOsEvent_h,
 80077aa:	4b1d      	ldr	r3, [pc, #116]	; (8007820 <xMBMasterPortEventGet+0x84>)
 80077ac:	6818      	ldr	r0, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	2300      	movs	r3, #0
 80077b4:	2201      	movs	r2, #1
 80077b6:	211f      	movs	r1, #31
 80077b8:	f7fc f9b6 	bl	8003b28 <xEventGroupWaitBits>
 80077bc:	60b8      	str	r0, [r7, #8]
            EV_MASTER_FRAME_SENT | EV_MASTER_ERROR_PROCESS,
            pdTRUE,
            pdFALSE,
            xTicksToWait );

    if (uxBits & EV_MASTER_READY) {
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d003      	beq.n	80077d0 <xMBMasterPortEventGet+0x34>
        *eEvent = EV_MASTER_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e022      	b.n	8007816 <xMBMasterPortEventGet+0x7a>
    }else if (uxBits & EV_MASTER_FRAME_RECEIVED) {
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <xMBMasterPortEventGet+0x46>
        *eEvent = EV_MASTER_FRAME_RECEIVED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	e019      	b.n	8007816 <xMBMasterPortEventGet+0x7a>
    }else if (uxBits & EV_MASTER_EXECUTE){
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f003 0304 	and.w	r3, r3, #4
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d003      	beq.n	80077f4 <xMBMasterPortEventGet+0x58>
        *eEvent = EV_MASTER_EXECUTE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2204      	movs	r2, #4
 80077f0:	801a      	strh	r2, [r3, #0]
 80077f2:	e010      	b.n	8007816 <xMBMasterPortEventGet+0x7a>
    }else if (uxBits & EV_MASTER_FRAME_SENT) {
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	f003 0308 	and.w	r3, r3, #8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <xMBMasterPortEventGet+0x6a>
        *eEvent = EV_MASTER_FRAME_SENT;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2208      	movs	r2, #8
 8007802:	801a      	strh	r2, [r3, #0]
 8007804:	e007      	b.n	8007816 <xMBMasterPortEventGet+0x7a>
    }else if (uxBits & EV_MASTER_FRAME_SENT) {
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <xMBMasterPortEventGet+0x7a>
        *eEvent = EV_MASTER_FRAME_SENT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2208      	movs	r2, #8
 8007814:	801a      	strh	r2, [r3, #0]
    }else {

    }

    return TRUE;
 8007816:	2301      	movs	r3, #1
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20004754 	.word	0x20004754

08007824 <vMBMasterOsResInit>:
 * This function is initialize the OS resource for modbus master.
 * Note:The resource is define by OS.If you not use OS this function can be empty.
 *
 */
void vMBMasterOsResInit( void )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
	mbEvtSempId_m = osSemaphoreCreate(&mbEvtSemp_m, 1);
 8007828:	2101      	movs	r1, #1
 800782a:	4804      	ldr	r0, [pc, #16]	; (800783c <vMBMasterOsResInit+0x18>)
 800782c:	f7fc f88d 	bl	800394a <osSemaphoreCreate>
 8007830:	4603      	mov	r3, r0
 8007832:	4a03      	ldr	r2, [pc, #12]	; (8007840 <vMBMasterOsResInit+0x1c>)
 8007834:	6013      	str	r3, [r2, #0]
}
 8007836:	bf00      	nop
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	2000479c 	.word	0x2000479c
 8007840:	200047a4 	.word	0x200047a4

08007844 <xMBMasterRunResTake>:
 * @param lTimeOut the waiting time.
 *
 * @return resource taked result
 */
BOOL xMBMasterRunResTake( LONG lTimeOut )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	const TickType_t xTicksToWait = lTimeOut / portTICK_PERIOD_MS;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	60fb      	str	r3, [r7, #12]
    /*If waiting time is -1 .It will wait forever */
    return (osSemaphoreWait(mbEvtSempId_m, xTicksToWait) == 0);
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <xMBMasterRunResTake+0x2c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	4618      	mov	r0, r3
 8007858:	f7fc f8aa 	bl	80039b0 <osSemaphoreWait>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	bf0c      	ite	eq
 8007862:	2301      	moveq	r3, #1
 8007864:	2300      	movne	r3, #0
 8007866:	b2db      	uxtb	r3, r3
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	200047a4 	.word	0x200047a4

08007874 <vMBMasterRunResRelease>:
 * This function is release Mobus Master running resource.
 * Note:The resource is define by Operating System.If you not use OS this function can be empty.
 *
 */
void vMBMasterRunResRelease( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
    /* release resource */
	osSemaphoreRelease(mbEvtSempId_m);
 8007878:	4b03      	ldr	r3, [pc, #12]	; (8007888 <vMBMasterRunResRelease+0x14>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f7fc f8e5 	bl	8003a4c <osSemaphoreRelease>
}
 8007882:	bf00      	nop
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200047a4 	.word	0x200047a4

0800788c <vMBMasterCBRequestScuuess>:
 * This is modbus master request process success callback function.
 * @note There functions will block modbus master poll while execute OS waiting.
 * So,for real-time of system.Do not execute too much waiting process.
 *
 */
void vMBMasterCBRequestScuuess( void ) {
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	BaseType_t  xIsTaskWoken = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	607b      	str	r3, [r7, #4]

    xEventGroupSetBitsFromISR(xWaitReqEvent_h, EV_MASTER_PROCESS_SUCESS, &xIsTaskWoken);
 8007896:	4b0b      	ldr	r3, [pc, #44]	; (80078c4 <vMBMasterCBRequestScuuess+0x38>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	1d3a      	adds	r2, r7, #4
 800789c:	2120      	movs	r1, #32
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fc faca 	bl	8003e38 <xEventGroupSetBitsFromISR>

    if ( xIsTaskWoken )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <vMBMasterCBRequestScuuess+0x2e>
    {
    	taskYIELD();
 80078aa:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <vMBMasterCBRequestScuuess+0x3c>)
 80078ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	f3bf 8f6f 	isb	sy
    }

    /* You can add your code under here. */

}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20004778 	.word	0x20004778
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <vMBMasterErrorCBRespondTimeout>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBRespondTimeout(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
 80078d8:	4613      	mov	r3, r2
 80078da:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	BaseType_t  xIsTaskWoken = pdFALSE;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]

    xEventGroupSetBitsFromISR(xWaitReqEvent_h, EV_MASTER_ERROR_RESPOND_TIMEOUT, &xIsTaskWoken);
 80078e0:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <vMBMasterErrorCBRespondTimeout+0x44>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f107 020c 	add.w	r2, r7, #12
 80078e8:	2140      	movs	r1, #64	; 0x40
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fc faa4 	bl	8003e38 <xEventGroupSetBitsFromISR>

    if ( xIsTaskWoken )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <vMBMasterErrorCBRespondTimeout+0x3a>
    {
    	taskYIELD();
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <vMBMasterErrorCBRespondTimeout+0x48>)
 80078f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	f3bf 8f6f 	isb	sy
    }
    /* You can add your code under here. */

}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20004778 	.word	0x20004778
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <vMBMasterErrorCBReceiveData>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBReceiveData(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
 8007924:	4613      	mov	r3, r2
 8007926:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	BaseType_t  xIsTaskWoken = pdFALSE;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]

    xEventGroupSetBitsFromISR(xWaitReqEvent_h, EV_MASTER_ERROR_RECEIVE_DATA, &xIsTaskWoken);
 800792c:	4b0b      	ldr	r3, [pc, #44]	; (800795c <vMBMasterErrorCBReceiveData+0x44>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f107 020c 	add.w	r2, r7, #12
 8007934:	2180      	movs	r1, #128	; 0x80
 8007936:	4618      	mov	r0, r3
 8007938:	f7fc fa7e 	bl	8003e38 <xEventGroupSetBitsFromISR>

    if ( xIsTaskWoken )
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <vMBMasterErrorCBReceiveData+0x3a>
    {
    	taskYIELD();
 8007942:	4b07      	ldr	r3, [pc, #28]	; (8007960 <vMBMasterErrorCBReceiveData+0x48>)
 8007944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	f3bf 8f6f 	isb	sy
    }
    /* You can add your code under here. */

}
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20004778 	.word	0x20004778
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <vMBMasterErrorCBExecuteFunction>:
 * @param pucPDUData PDU buffer data
 * @param ucPDULength PDU buffer length
 *
 */
void vMBMasterErrorCBExecuteFunction(UCHAR ucDestAddress, const UCHAR* pucPDUData,
        USHORT ucPDULength) {
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
 8007970:	4613      	mov	r3, r2
 8007972:	80bb      	strh	r3, [r7, #4]
    /**
     * @note This code is use OS's event mechanism for modbus master protocol stack.
     * If you don't use OS, you can change it.
     */
	BaseType_t  xIsTaskWoken = pdFALSE;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

    xEventGroupSetBitsFromISR(xWaitReqEvent_h, EV_MASTER_ERROR_EXECUTE_FUNCTION, &xIsTaskWoken);
 8007978:	4b0b      	ldr	r3, [pc, #44]	; (80079a8 <vMBMasterErrorCBExecuteFunction+0x44>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f107 020c 	add.w	r2, r7, #12
 8007980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007984:	4618      	mov	r0, r3
 8007986:	f7fc fa57 	bl	8003e38 <xEventGroupSetBitsFromISR>

    if ( xIsTaskWoken )
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d007      	beq.n	80079a0 <vMBMasterErrorCBExecuteFunction+0x3c>
    {
    	taskYIELD();
 8007990:	4b06      	ldr	r3, [pc, #24]	; (80079ac <vMBMasterErrorCBExecuteFunction+0x48>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
    }
    /* You can add your code under here. */

}
 80079a0:	bf00      	nop
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20004778 	.word	0x20004778
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <eMBMasterWaitRequestFinish>:
 * @note If you are use OS, you can use OS's event mechanism. Otherwise you have to run
 * much user custom delay for waiting.
 *
 * @return request error code
 */
eMBMasterReqErrCode eMBMasterWaitRequestFinish( void ) {
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af02      	add	r7, sp, #8
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
    EventBits_t uxBits;
    const TickType_t xTicksToWait = 0xFFFFFFFF;
 80079ba:	f04f 33ff 	mov.w	r3, #4294967295
 80079be:	60bb      	str	r3, [r7, #8]

    /* waiting forever OS event */
    uxBits  = xEventGroupWaitBits(xWaitReqEvent_h,
 80079c0:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <eMBMasterWaitRequestFinish+0x60>)
 80079c2:	6818      	ldr	r0, [r3, #0]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	2300      	movs	r3, #0
 80079ca:	2201      	movs	r2, #1
 80079cc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80079d0:	f7fc f8aa 	bl	8003b28 <xEventGroupWaitBits>
 80079d4:	6078      	str	r0, [r7, #4]
            pdTRUE,
            pdFALSE,
            xTicksToWait );

    /* waiting for OS event */
    if (uxBits & EV_MASTER_ERROR_RESPOND_TIMEOUT) {
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <eMBMasterWaitRequestFinish+0x36>
    	eErrStatus = MB_MRE_TIMEDOUT;
 80079e0:	2304      	movs	r3, #4
 80079e2:	73fb      	strb	r3, [r7, #15]
 80079e4:	e00e      	b.n	8007a04 <eMBMasterWaitRequestFinish+0x54>
    } else  if (uxBits & EV_MASTER_ERROR_RECEIVE_DATA) {
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <eMBMasterWaitRequestFinish+0x46>
    	eErrStatus = MB_MRE_REV_DATA;
 80079f0:	2303      	movs	r3, #3
 80079f2:	73fb      	strb	r3, [r7, #15]
 80079f4:	e006      	b.n	8007a04 <eMBMasterWaitRequestFinish+0x54>
    } else  if (uxBits & EV_MASTER_ERROR_EXECUTE_FUNCTION) {
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <eMBMasterWaitRequestFinish+0x54>
    	eErrStatus = MB_MRE_EXE_FUN;
 8007a00:	2306      	movs	r3, #6
 8007a02:	73fb      	strb	r3, [r7, #15]
    } else {

    }

    return eErrStatus;
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20004778 	.word	0x20004778

08007a14 <vMBMasterPortSerialEnable>:
extern UART_HandleTypeDef huart2;
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBMasterPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	460a      	mov	r2, r1
 8007a1e:	71fb      	strb	r3, [r7, #7]
 8007a20:	4613      	mov	r3, r2
 8007a22:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <vMBMasterPortSerialEnable+0x28>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8007a2a:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <vMBMasterPortSerialEnable+0x6c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68da      	ldr	r2, [r3, #12]
 8007a30:	4b13      	ldr	r3, [pc, #76]	; (8007a80 <vMBMasterPortSerialEnable+0x6c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0220 	orr.w	r2, r2, #32
 8007a38:	60da      	str	r2, [r3, #12]
 8007a3a:	e007      	b.n	8007a4c <vMBMasterPortSerialEnable+0x38>
  } else {    
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <vMBMasterPortSerialEnable+0x6c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <vMBMasterPortSerialEnable+0x6c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0220 	bic.w	r2, r2, #32
 8007a4a:	60da      	str	r2, [r3, #12]
  }
  
  if (xTxEnable) {    
 8007a4c:	79bb      	ldrb	r3, [r7, #6]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d008      	beq.n	8007a64 <vMBMasterPortSerialEnable+0x50>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8007a52:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <vMBMasterPortSerialEnable+0x6c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <vMBMasterPortSerialEnable+0x6c>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a60:	60da      	str	r2, [r3, #12]
  } else {
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
  }  
}
 8007a62:	e007      	b.n	8007a74 <vMBMasterPortSerialEnable+0x60>
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8007a64:	4b06      	ldr	r3, [pc, #24]	; (8007a80 <vMBMasterPortSerialEnable+0x6c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <vMBMasterPortSerialEnable+0x6c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a72:	60da      	str	r2, [r3, #12]
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr
 8007a80:	20004a34 	.word	0x20004a34

08007a84 <xMBMasterPortSerialInit>:
 
BOOL
xMBMasterPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6039      	str	r1, [r7, #0]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4603      	mov	r3, r0
 8007a92:	71fb      	strb	r3, [r7, #7]
 8007a94:	460b      	mov	r3, r1
 8007a96:	71bb      	strb	r3, [r7, #6]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	717b      	strb	r3, [r7, #5]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8007a9c:	2301      	movs	r3, #1
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <xMBMasterPortSerialPutByte>:
  
}

BOOL
xMBMasterPortSerialPutByte( CHAR ucByte )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 1000));
 8007ab6:	1df9      	adds	r1, r7, #7
 8007ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007abc:	2201      	movs	r2, #1
 8007abe:	4806      	ldr	r0, [pc, #24]	; (8007ad8 <xMBMasterPortSerialPutByte+0x2c>)
 8007ac0:	f7fa ff97 	bl	80029f2 <HAL_UART_Transmit>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bf0c      	ite	eq
 8007aca:	2301      	moveq	r3, #1
 8007acc:	2300      	movne	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20004a34 	.word	0x20004a34

08007adc <xMBMasterPortSerialGetByte>:
 
BOOL
xMBMasterPortSerialGetByte( CHAR * pucByte )
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);  
 8007ae4:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <xMBMasterPortSerialGetByte+0x24>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	701a      	strb	r2, [r3, #0]
  return TRUE;
 8007af0:	2301      	movs	r3, #1
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20004a34 	.word	0x20004a34

08007b04 <xMBMasterPortTimersInit>:
extern TIM_HandleTypeDef htim7;
volatile USHORT usT35TimeOut50us = 0;
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBMasterPortTimersInit( USHORT usTim1Timerout50us )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  usT35TimeOut50us = usTim1Timerout50us;
 8007b0e:	4a1c      	ldr	r2, [pc, #112]	; (8007b80 <xMBMasterPortTimersInit+0x7c>)
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	8013      	strh	r3, [r2, #0]

  htim7.Instance = TIM7;
 8007b14:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <xMBMasterPortTimersInit+0x80>)
 8007b16:	4a1c      	ldr	r2, [pc, #112]	; (8007b88 <xMBMasterPortTimersInit+0x84>)
 8007b18:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8007b1a:	f7fa fb73 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	4a1a      	ldr	r2, [pc, #104]	; (8007b8c <xMBMasterPortTimersInit+0x88>)
 8007b22:	fba2 2303 	umull	r2, r3, r2, r3
 8007b26:	0c9b      	lsrs	r3, r3, #18
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4a16      	ldr	r2, [pc, #88]	; (8007b84 <xMBMasterPortTimersInit+0x80>)
 8007b2c:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b2e:	4b15      	ldr	r3, [pc, #84]	; (8007b84 <xMBMasterPortTimersInit+0x80>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (50 - 1) * usTim1Timerout50us;
 8007b34:	88fa      	ldrh	r2, [r7, #6]
 8007b36:	4613      	mov	r3, r2
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	00da      	lsls	r2, r3, #3
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	461a      	mov	r2, r3
 8007b42:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <xMBMasterPortTimersInit+0x80>)
 8007b44:	60da      	str	r2, [r3, #12]
  
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007b46:	480f      	ldr	r0, [pc, #60]	; (8007b84 <xMBMasterPortTimersInit+0x80>)
 8007b48:	f7fa fbb6 	bl	80022b8 <HAL_TIM_Base_Init>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <xMBMasterPortTimersInit+0x52>
  {
    return FALSE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e00f      	b.n	8007b76 <xMBMasterPortTimersInit+0x72>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007b56:	2320      	movs	r3, #32
 8007b58:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007b5e:	f107 0308 	add.w	r3, r7, #8
 8007b62:	4619      	mov	r1, r3
 8007b64:	4807      	ldr	r0, [pc, #28]	; (8007b84 <xMBMasterPortTimersInit+0x80>)
 8007b66:	f7fa fe67 	bl	8002838 <HAL_TIMEx_MasterConfigSynchronization>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <xMBMasterPortTimersInit+0x70>
  {
    return FALSE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	e000      	b.n	8007b76 <xMBMasterPortTimersInit+0x72>
  }
  
  return TRUE;
 8007b74:	2301      	movs	r3, #1
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	200047a8 	.word	0x200047a8
 8007b84:	20004a78 	.word	0x20004a78
 8007b88:	40001400 	.word	0x40001400
 8007b8c:	431bde83 	.word	0x431bde83

08007b90 <vMBMasterPortTimersT35Enable>:
 /*TODO: stop before restart T35 timer */
void vMBMasterPortTimersT35Enable()
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
  LONG timer_tick = (50 - 1) * usT35TimeOut50us;
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <vMBMasterPortTimersT35Enable+0x3c>)
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	00da      	lsls	r2, r3, #3
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	607b      	str	r3, [r7, #4]
    /* Set current timer mode, don't change it.*/
  vMBMasterSetCurTimerMode(MB_TMODE_T35);
 8007baa:	2000      	movs	r0, #0
 8007bac:	f000 fabc 	bl	8008128 <vMBMasterSetCurTimerMode>
   __HAL_TIM_SET_AUTORELOAD(&htim7, timer_tick);
 8007bb0:	4b07      	ldr	r3, [pc, #28]	; (8007bd0 <vMBMasterPortTimersT35Enable+0x40>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	4a05      	ldr	r2, [pc, #20]	; (8007bd0 <vMBMasterPortTimersT35Enable+0x40>)
 8007bbc:	60d3      	str	r3, [r2, #12]
   HAL_TIM_Base_Start_IT(&htim7);
 8007bbe:	4804      	ldr	r0, [pc, #16]	; (8007bd0 <vMBMasterPortTimersT35Enable+0x40>)
 8007bc0:	f7fa fbca 	bl	8002358 <HAL_TIM_Base_Start_IT>
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	200047a8 	.word	0x200047a8
 8007bd0:	20004a78 	.word	0x20004a78

08007bd4 <vMBMasterPortTimersConvertDelayEnable>:

void vMBMasterPortTimersConvertDelayEnable()
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
    LONG timer_tick = MB_MASTER_DELAY_MS_CONVERT;
 8007bda:	23c8      	movs	r3, #200	; 0xc8
 8007bdc:	607b      	str	r3, [r7, #4]

    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_CONVERT_DELAY);
 8007bde:	2002      	movs	r0, #2
 8007be0:	f000 faa2 	bl	8008128 <vMBMasterSetCurTimerMode>

     __HAL_TIM_SET_AUTORELOAD(&htim7, timer_tick);
 8007be4:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <vMBMasterPortTimersConvertDelayEnable+0x2c>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	62da      	str	r2, [r3, #44]	; 0x2c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <vMBMasterPortTimersConvertDelayEnable+0x2c>)
 8007bf0:	60d3      	str	r3, [r2, #12]
    HAL_TIM_Base_Start_IT(&htim7);
 8007bf2:	4803      	ldr	r0, [pc, #12]	; (8007c00 <vMBMasterPortTimersConvertDelayEnable+0x2c>)
 8007bf4:	f7fa fbb0 	bl	8002358 <HAL_TIM_Base_Start_IT>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20004a78 	.word	0x20004a78

08007c04 <vMBMasterPortTimersRespondTimeoutEnable>:

/* User defined */
void vMBMasterPortTimersRespondTimeoutEnable()
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
    LONG timer_tick = MB_MASTER_TIMEOUT_MS_RESPOND ;
 8007c0a:	2364      	movs	r3, #100	; 0x64
 8007c0c:	607b      	str	r3, [r7, #4]
  
    /* Set current timer mode, don't change it.*/
    vMBMasterSetCurTimerMode(MB_TMODE_RESPOND_TIMEOUT);
 8007c0e:	2001      	movs	r0, #1
 8007c10:	f000 fa8a 	bl	8008128 <vMBMasterSetCurTimerMode>
     __HAL_TIM_SET_AUTORELOAD(&htim7, timer_tick);
 8007c14:	4b06      	ldr	r3, [pc, #24]	; (8007c30 <vMBMasterPortTimersRespondTimeoutEnable+0x2c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a04      	ldr	r2, [pc, #16]	; (8007c30 <vMBMasterPortTimersRespondTimeoutEnable+0x2c>)
 8007c20:	60d3      	str	r3, [r2, #12]
    HAL_TIM_Base_Start_IT(&htim7);
 8007c22:	4803      	ldr	r0, [pc, #12]	; (8007c30 <vMBMasterPortTimersRespondTimeoutEnable+0x2c>)
 8007c24:	f7fa fb98 	bl	8002358 <HAL_TIM_Base_Start_IT>
}
 8007c28:	bf00      	nop
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	20004a78 	.word	0x20004a78

08007c34 <vMBMasterPortTimersDisable>:

void
vMBMasterPortTimersDisable(  )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim7);
 8007c38:	4802      	ldr	r0, [pc, #8]	; (8007c44 <vMBMasterPortTimersDisable+0x10>)
 8007c3a:	f7fa fbfd 	bl	8002438 <HAL_TIM_Base_Stop_IT>
}
 8007c3e:	bf00      	nop
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20004a78 	.word	0x20004a78

08007c48 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8007c54:	23ff      	movs	r3, #255	; 0xff
 8007c56:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8007c58:	23ff      	movs	r3, #255	; 0xff
 8007c5a:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8007c5c:	e013      	b.n	8007c86 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	781a      	ldrb	r2, [r3, #0]
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	4053      	eors	r3, r2
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8007c6e:	4a0f      	ldr	r2, [pc, #60]	; (8007cac <usMBCRC16+0x64>)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	4413      	add	r3, r2
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	4053      	eors	r3, r2
 8007c7a:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8007c7c:	4a0c      	ldr	r2, [pc, #48]	; (8007cb0 <usMBCRC16+0x68>)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4413      	add	r3, r2
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8007c86:	887b      	ldrh	r3, [r7, #2]
 8007c88:	1e5a      	subs	r2, r3, #1
 8007c8a:	807a      	strh	r2, [r7, #2]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e6      	bne.n	8007c5e <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	b21a      	sxth	r2, r3
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	b21b      	sxth	r3, r3
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	b21b      	sxth	r3, r3
 8007c9e:	b29b      	uxth	r3, r3
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	08008698 	.word	0x08008698
 8007cb0:	08008798 	.word	0x08008798

08007cb4 <eMBMasterRTUInit>:
static volatile eMBMasterTimerMode eMasterCurTimerMode;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBMasterRTUInit(UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	4603      	mov	r3, r0
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	71fb      	strb	r3, [r7, #7]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	71bb      	strb	r3, [r7, #6]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
    ULONG           usTimerT35_50us;

    ENTER_CRITICAL_SECTION(  );
 8007cc8:	f7fe fe84 	bl	80069d4 <vPortEnterCritical>

    /* Modbus RTU uses 8 Databits. */
    if( xMBMasterPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8007ccc:	79bb      	ldrb	r3, [r7, #6]
 8007cce:	79f8      	ldrb	r0, [r7, #7]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	f7ff fed6 	bl	8007a84 <xMBMasterPortSerialInit>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d002      	beq.n	8007ce4 <eMBMasterRTUInit+0x30>
    {
        eStatus = MB_EPORTERR;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	73fb      	strb	r3, [r7, #15]
 8007ce2:	e016      	b.n	8007d12 <eMBMasterRTUInit+0x5e>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8007cea:	d902      	bls.n	8007cf2 <eMBMasterRTUInit+0x3e>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8007cec:	2323      	movs	r3, #35	; 0x23
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	e005      	b.n	8007cfe <eMBMasterRTUInit+0x4a>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	4a0a      	ldr	r2, [pc, #40]	; (8007d20 <eMBMasterRTUInit+0x6c>)
 8007cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfc:	60bb      	str	r3, [r7, #8]
        }
        if( xMBMasterPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fefe 	bl	8007b04 <xMBMasterPortTimersInit>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d001      	beq.n	8007d12 <eMBMasterRTUInit+0x5e>
        {
            eStatus = MB_EPORTERR;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	73fb      	strb	r3, [r7, #15]
        }
    }
    EXIT_CRITICAL_SECTION(  );
 8007d12:	f7fe fe8f 	bl	8006a34 <vPortExitCritical>

    return eStatus;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	00177fa0 	.word	0x00177fa0

08007d24 <eMBMasterRTUStart>:

void
eMBMasterRTUStart( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8007d28:	f7fe fe54 	bl	80069d4 <vPortEnterCritical>
    /* Initially the receiver is in the state STATE_M_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_M_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_M_RX_INIT;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <eMBMasterRTUStart+0x24>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]
    vMBMasterPortSerialEnable( TRUE, FALSE );
 8007d32:	2100      	movs	r1, #0
 8007d34:	2001      	movs	r0, #1
 8007d36:	f7ff fe6d 	bl	8007a14 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersT35Enable(  );
 8007d3a:	f7ff ff29 	bl	8007b90 <vMBMasterPortTimersT35Enable>

    EXIT_CRITICAL_SECTION(  );
 8007d3e:	f7fe fe79 	bl	8006a34 <vPortExitCritical>
}
 8007d42:	bf00      	nop
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	200047ab 	.word	0x200047ab

08007d4c <eMBMasterRTUStop>:

void
eMBMasterRTUStop( void )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
    ENTER_CRITICAL_SECTION(  );
 8007d50:	f7fe fe40 	bl	80069d4 <vPortEnterCritical>
    vMBMasterPortSerialEnable( FALSE, FALSE );
 8007d54:	2100      	movs	r1, #0
 8007d56:	2000      	movs	r0, #0
 8007d58:	f7ff fe5c 	bl	8007a14 <vMBMasterPortSerialEnable>
    vMBMasterPortTimersDisable(  );
 8007d5c:	f7ff ff6a 	bl	8007c34 <vMBMasterPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
 8007d60:	f7fe fe68 	bl	8006a34 <vPortExitCritical>
}
 8007d64:	bf00      	nop
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <eMBMasterRTUReceive>:

eMBErrorCode
eMBMasterRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75fb      	strb	r3, [r7, #23]

    ENTER_CRITICAL_SECTION(  );
 8007d78:	f7fe fe2c 	bl	80069d4 <vPortEnterCritical>
    assert_param( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usMasterRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8007d7c:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <eMBMasterRTUReceive+0x64>)
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d919      	bls.n	8007dba <eMBMasterRTUReceive+0x52>
        && ( usMBCRC16( ( UCHAR * ) ucMasterRTURcvBuf, usMasterRcvBufferPos ) == 0 ) )
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <eMBMasterRTUReceive+0x64>)
 8007d88:	881b      	ldrh	r3, [r3, #0]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4810      	ldr	r0, [pc, #64]	; (8007dd0 <eMBMasterRTUReceive+0x68>)
 8007d90:	f7ff ff5a 	bl	8007c48 <usMBCRC16>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10f      	bne.n	8007dba <eMBMasterRTUReceive+0x52>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucMasterRTURcvBuf[MB_SER_PDU_ADDR_OFF];
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <eMBMasterRTUReceive+0x68>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usMasterRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <eMBMasterRTUReceive+0x64>)
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b03      	subs	r3, #3
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucMasterRTURcvBuf[MB_SER_PDU_PDU_OFF];
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4a07      	ldr	r2, [pc, #28]	; (8007dd4 <eMBMasterRTUReceive+0x6c>)
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e001      	b.n	8007dbe <eMBMasterRTUReceive+0x56>
    }
    else
    {
        eStatus = MB_EIO;
 8007dba:	2305      	movs	r3, #5
 8007dbc:	75fb      	strb	r3, [r7, #23]
    }

    EXIT_CRITICAL_SECTION(  );
 8007dbe:	f7fe fe39 	bl	8006a34 <vPortExitCritical>
    return eStatus;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	200049b6 	.word	0x200049b6
 8007dd0:	200048ac 	.word	0x200048ac
 8007dd4:	200048ad 	.word	0x200048ad

08007dd8 <eMBMasterRTUSend>:

eMBErrorCode
eMBMasterRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
 8007de4:	4613      	mov	r3, r2
 8007de6:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
    USHORT          usCRC16;

    if ( ucSlaveAddress > MB_MASTER_TOTAL_SLAVE_NUM ) return MB_EINVAL;
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d901      	bls.n	8007df6 <eMBMasterRTUSend+0x1e>
 8007df2:	2302      	movs	r3, #2
 8007df4:	e04b      	b.n	8007e8e <eMBMasterRTUSend+0xb6>

    ENTER_CRITICAL_SECTION(  );
 8007df6:	f7fe fded 	bl	80069d4 <vPortEnterCritical>

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_M_RX_IDLE )
 8007dfa:	4b27      	ldr	r3, [pc, #156]	; (8007e98 <eMBMasterRTUSend+0xc0>)
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d13f      	bne.n	8007e84 <eMBMasterRTUSend+0xac>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucMasterSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	4a24      	ldr	r2, [pc, #144]	; (8007e9c <eMBMasterRTUSend+0xc4>)
 8007e0a:	6013      	str	r3, [r2, #0]
        usMasterSndBufferCount = 1;
 8007e0c:	4b24      	ldr	r3, [pc, #144]	; (8007ea0 <eMBMasterRTUSend+0xc8>)
 8007e0e:	2201      	movs	r2, #1
 8007e10:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucMasterSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8007e12:	4b22      	ldr	r3, [pc, #136]	; (8007e9c <eMBMasterRTUSend+0xc4>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	79fa      	ldrb	r2, [r7, #7]
 8007e18:	701a      	strb	r2, [r3, #0]
        usMasterSndBufferCount += usLength;
 8007e1a:	4b21      	ldr	r3, [pc, #132]	; (8007ea0 <eMBMasterRTUSend+0xc8>)
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	88bb      	ldrh	r3, [r7, #4]
 8007e22:	4413      	add	r3, r2
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	4b1e      	ldr	r3, [pc, #120]	; (8007ea0 <eMBMasterRTUSend+0xc8>)
 8007e28:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucMasterSndBufferCur, usMasterSndBufferCount );
 8007e2a:	4b1c      	ldr	r3, [pc, #112]	; (8007e9c <eMBMasterRTUSend+0xc4>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a1c      	ldr	r2, [pc, #112]	; (8007ea0 <eMBMasterRTUSend+0xc8>)
 8007e30:	8812      	ldrh	r2, [r2, #0]
 8007e32:	b292      	uxth	r2, r2
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ff06 	bl	8007c48 <usMBCRC16>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	81bb      	strh	r3, [r7, #12]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8007e40:	4b17      	ldr	r3, [pc, #92]	; (8007ea0 <eMBMasterRTUSend+0xc8>)
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	b291      	uxth	r1, r2
 8007e4a:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <eMBMasterRTUSend+0xc8>)
 8007e4c:	8011      	strh	r1, [r2, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	89bb      	ldrh	r3, [r7, #12]
 8007e52:	b2d9      	uxtb	r1, r3
 8007e54:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <eMBMasterRTUSend+0xcc>)
 8007e56:	5499      	strb	r1, [r3, r2]
        ucMasterRTUSndBuf[usMasterSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8007e58:	89bb      	ldrh	r3, [r7, #12]
 8007e5a:	0a1b      	lsrs	r3, r3, #8
 8007e5c:	b299      	uxth	r1, r3
 8007e5e:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <eMBMasterRTUSend+0xc8>)
 8007e60:	881b      	ldrh	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	b290      	uxth	r0, r2
 8007e68:	4a0d      	ldr	r2, [pc, #52]	; (8007ea0 <eMBMasterRTUSend+0xc8>)
 8007e6a:	8010      	strh	r0, [r2, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	b2c9      	uxtb	r1, r1
 8007e70:	4b0c      	ldr	r3, [pc, #48]	; (8007ea4 <eMBMasterRTUSend+0xcc>)
 8007e72:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_M_TX_XMIT;
 8007e74:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <eMBMasterRTUSend+0xd0>)
 8007e76:	2201      	movs	r2, #1
 8007e78:	701a      	strb	r2, [r3, #0]
        vMBMasterPortSerialEnable( FALSE, TRUE );
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	f7ff fdc9 	bl	8007a14 <vMBMasterPortSerialEnable>
 8007e82:	e001      	b.n	8007e88 <eMBMasterRTUSend+0xb0>
    }
    else
    {
        eStatus = MB_EIO;
 8007e84:	2305      	movs	r3, #5
 8007e86:	73fb      	strb	r3, [r7, #15]
    }
    EXIT_CRITICAL_SECTION(  );
 8007e88:	f7fe fdd4 	bl	8006a34 <vPortExitCritical>
    return eStatus;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	200047ab 	.word	0x200047ab
 8007e9c:	200049b0 	.word	0x200049b0
 8007ea0:	200049b4 	.word	0x200049b4
 8007ea4:	200047ac 	.word	0x200047ac
 8007ea8:	200047aa 	.word	0x200047aa

08007eac <xMBMasterRTUReceiveFSM>:

BOOL
xMBMasterRTUReceiveFSM( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert_param(( eSndState == STATE_M_TX_IDLE ) || ( eSndState == STATE_M_TX_XFWR ));

    /* Always read the character. */
    ( void )xMBMasterPortSerialGetByte( ( CHAR * ) & ucByte );
 8007eb6:	1dbb      	adds	r3, r7, #6
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff fe0f 	bl	8007adc <xMBMasterPortSerialGetByte>

    switch ( eRcvState )
 8007ebe:	4b26      	ldr	r3, [pc, #152]	; (8007f58 <xMBMasterRTUReceiveFSM+0xac>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d841      	bhi.n	8007f4c <xMBMasterRTUReceiveFSM+0xa0>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <xMBMasterRTUReceiveFSM+0x24>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007eed 	.word	0x08007eed
 8007ed8:	08007f1f 	.word	0x08007f1f
 8007edc:	08007ee7 	.word	0x08007ee7
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_M_RX_INIT:
        vMBMasterPortTimersT35Enable( );
 8007ee0:	f7ff fe56 	bl	8007b90 <vMBMasterPortTimersT35Enable>
        break;
 8007ee4:	e032      	b.n	8007f4c <xMBMasterRTUReceiveFSM+0xa0>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_M_RX_ERROR:
        vMBMasterPortTimersT35Enable( );
 8007ee6:	f7ff fe53 	bl	8007b90 <vMBMasterPortTimersT35Enable>
        break;
 8007eea:	e02f      	b.n	8007f4c <xMBMasterRTUReceiveFSM+0xa0>
         */
    case STATE_M_RX_IDLE:
        /* In time of respond timeout,the receiver receive a frame.
         * Disable timer of respond timeout and change the transmiter state to idle.
         */
        vMBMasterPortTimersDisable( );
 8007eec:	f7ff fea2 	bl	8007c34 <vMBMasterPortTimersDisable>
        eSndState = STATE_M_TX_IDLE;
 8007ef0:	4b1a      	ldr	r3, [pc, #104]	; (8007f5c <xMBMasterRTUReceiveFSM+0xb0>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	701a      	strb	r2, [r3, #0]

        usMasterRcvBufferPos = 0;
 8007ef6:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <xMBMasterRTUReceiveFSM+0xb4>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	801a      	strh	r2, [r3, #0]
        ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8007efc:	4b18      	ldr	r3, [pc, #96]	; (8007f60 <xMBMasterRTUReceiveFSM+0xb4>)
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	b291      	uxth	r1, r2
 8007f06:	4a16      	ldr	r2, [pc, #88]	; (8007f60 <xMBMasterRTUReceiveFSM+0xb4>)
 8007f08:	8011      	strh	r1, [r2, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	79b9      	ldrb	r1, [r7, #6]
 8007f0e:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <xMBMasterRTUReceiveFSM+0xb8>)
 8007f10:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_M_RX_RCV;
 8007f12:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <xMBMasterRTUReceiveFSM+0xac>)
 8007f14:	2202      	movs	r2, #2
 8007f16:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBMasterPortTimersT35Enable( );
 8007f18:	f7ff fe3a 	bl	8007b90 <vMBMasterPortTimersT35Enable>
        break;
 8007f1c:	e016      	b.n	8007f4c <xMBMasterRTUReceiveFSM+0xa0>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_M_RX_RCV:
        if( usMasterRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <xMBMasterRTUReceiveFSM+0xb4>)
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	2bff      	cmp	r3, #255	; 0xff
 8007f26:	d80b      	bhi.n	8007f40 <xMBMasterRTUReceiveFSM+0x94>
        {
            ucMasterRTURcvBuf[usMasterRcvBufferPos++] = ucByte;
 8007f28:	4b0d      	ldr	r3, [pc, #52]	; (8007f60 <xMBMasterRTUReceiveFSM+0xb4>)
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	b291      	uxth	r1, r2
 8007f32:	4a0b      	ldr	r2, [pc, #44]	; (8007f60 <xMBMasterRTUReceiveFSM+0xb4>)
 8007f34:	8011      	strh	r1, [r2, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	79b9      	ldrb	r1, [r7, #6]
 8007f3a:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <xMBMasterRTUReceiveFSM+0xb8>)
 8007f3c:	5499      	strb	r1, [r3, r2]
 8007f3e:	e002      	b.n	8007f46 <xMBMasterRTUReceiveFSM+0x9a>
        }
        else
        {
            eRcvState = STATE_M_RX_ERROR;
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <xMBMasterRTUReceiveFSM+0xac>)
 8007f42:	2203      	movs	r2, #3
 8007f44:	701a      	strb	r2, [r3, #0]
        }
        vMBMasterPortTimersT35Enable();
 8007f46:	f7ff fe23 	bl	8007b90 <vMBMasterPortTimersT35Enable>
        break;
 8007f4a:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	200047ab 	.word	0x200047ab
 8007f5c:	200047aa 	.word	0x200047aa
 8007f60:	200049b6 	.word	0x200049b6
 8007f64:	200048ac 	.word	0x200048ac

08007f68 <xMBMasterRTUTransmitFSM>:

BOOL
xMBMasterRTUTransmitFSM( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	71fb      	strb	r3, [r7, #7]

    assert_param( eRcvState == STATE_M_RX_IDLE );

    switch ( eSndState )
 8007f72:	4b24      	ldr	r3, [pc, #144]	; (8008004 <xMBMasterRTUTransmitFSM+0x9c>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <xMBMasterRTUTransmitFSM+0x1a>
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d005      	beq.n	8007f8c <xMBMasterRTUTransmitFSM+0x24>
            }
        }
        break;

    default:
        break;
 8007f80:	e03a      	b.n	8007ff8 <xMBMasterRTUTransmitFSM+0x90>
        vMBMasterPortSerialEnable( TRUE, FALSE );
 8007f82:	2100      	movs	r1, #0
 8007f84:	2001      	movs	r0, #1
 8007f86:	f7ff fd45 	bl	8007a14 <vMBMasterPortSerialEnable>
        break;
 8007f8a:	e035      	b.n	8007ff8 <xMBMasterRTUTransmitFSM+0x90>
        if( usMasterSndBufferCount != 0 )
 8007f8c:	4b1e      	ldr	r3, [pc, #120]	; (8008008 <xMBMasterRTUTransmitFSM+0xa0>)
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d013      	beq.n	8007fbe <xMBMasterRTUTransmitFSM+0x56>
            xMBMasterPortSerialPutByte( ( CHAR )*pucMasterSndBufferCur );
 8007f96:	4b1d      	ldr	r3, [pc, #116]	; (800800c <xMBMasterRTUTransmitFSM+0xa4>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7ff fd84 	bl	8007aac <xMBMasterPortSerialPutByte>
            pucMasterSndBufferCur++;  /* next byte in sendbuffer. */
 8007fa4:	4b19      	ldr	r3, [pc, #100]	; (800800c <xMBMasterRTUTransmitFSM+0xa4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	4a18      	ldr	r2, [pc, #96]	; (800800c <xMBMasterRTUTransmitFSM+0xa4>)
 8007fac:	6013      	str	r3, [r2, #0]
            usMasterSndBufferCount--;
 8007fae:	4b16      	ldr	r3, [pc, #88]	; (8008008 <xMBMasterRTUTransmitFSM+0xa0>)
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	4b13      	ldr	r3, [pc, #76]	; (8008008 <xMBMasterRTUTransmitFSM+0xa0>)
 8007fba:	801a      	strh	r2, [r3, #0]
        break;
 8007fbc:	e01b      	b.n	8007ff6 <xMBMasterRTUTransmitFSM+0x8e>
            xFrameIsBroadcast = ( ucMasterRTUSndBuf[MB_SER_PDU_ADDR_OFF] == MB_ADDRESS_BROADCAST ) ? TRUE : FALSE;
 8007fbe:	4b14      	ldr	r3, [pc, #80]	; (8008010 <xMBMasterRTUTransmitFSM+0xa8>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2301      	moveq	r3, #1
 8007fca:	2300      	movne	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4b10      	ldr	r3, [pc, #64]	; (8008014 <xMBMasterRTUTransmitFSM+0xac>)
 8007fd2:	701a      	strb	r2, [r3, #0]
            vMBMasterPortSerialEnable( TRUE, FALSE );
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	2001      	movs	r0, #1
 8007fd8:	f7ff fd1c 	bl	8007a14 <vMBMasterPortSerialEnable>
            eSndState = STATE_M_TX_XFWR;
 8007fdc:	4b09      	ldr	r3, [pc, #36]	; (8008004 <xMBMasterRTUTransmitFSM+0x9c>)
 8007fde:	2202      	movs	r2, #2
 8007fe0:	701a      	strb	r2, [r3, #0]
            if ( xFrameIsBroadcast == TRUE )
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	; (8008014 <xMBMasterRTUTransmitFSM+0xac>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d102      	bne.n	8007ff2 <xMBMasterRTUTransmitFSM+0x8a>
                vMBMasterPortTimersConvertDelayEnable( ); /* Turnaround delay */
 8007fec:	f7ff fdf2 	bl	8007bd4 <vMBMasterPortTimersConvertDelayEnable>
        break;
 8007ff0:	e001      	b.n	8007ff6 <xMBMasterRTUTransmitFSM+0x8e>
                vMBMasterPortTimersRespondTimeoutEnable( );
 8007ff2:	f7ff fe07 	bl	8007c04 <vMBMasterPortTimersRespondTimeoutEnable>
        break;
 8007ff6:	bf00      	nop
    }

    return xNeedPoll;
 8007ff8:	79fb      	ldrb	r3, [r7, #7]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200047aa 	.word	0x200047aa
 8008008:	200049b4 	.word	0x200049b4
 800800c:	200049b0 	.word	0x200049b0
 8008010:	200047ac 	.word	0x200047ac
 8008014:	200049b8 	.word	0x200049b8

08008018 <xMBMasterRTUTimerExpired>:

BOOL
xMBMasterRTUTimerExpired(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
    BOOL xNeedPoll = FALSE;
 800801e:	2300      	movs	r3, #0
 8008020:	71fb      	strb	r3, [r7, #7]

    switch (eRcvState)
 8008022:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <xMBMasterRTUTimerExpired+0xa8>)
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b03      	cmp	r3, #3
 800802a:	d012      	beq.n	8008052 <xMBMasterRTUTimerExpired+0x3a>
 800802c:	2b03      	cmp	r3, #3
 800802e:	dc19      	bgt.n	8008064 <xMBMasterRTUTimerExpired+0x4c>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d002      	beq.n	800803a <xMBMasterRTUTimerExpired+0x22>
 8008034:	2b02      	cmp	r3, #2
 8008036:	d006      	beq.n	8008046 <xMBMasterRTUTimerExpired+0x2e>
        /* Function called in an illegal state. */
    default:
        assert_param(
                ( eRcvState == STATE_M_RX_INIT ) || ( eRcvState == STATE_M_RX_RCV ) ||
                ( eRcvState == STATE_M_RX_ERROR ) || ( eRcvState == STATE_M_RX_IDLE ));
        break;
 8008038:	e014      	b.n	8008064 <xMBMasterRTUTimerExpired+0x4c>
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_READY);
 800803a:	2001      	movs	r0, #1
 800803c:	f7ff fb8a 	bl	8007754 <xMBMasterPortEventPost>
 8008040:	4603      	mov	r3, r0
 8008042:	71fb      	strb	r3, [r7, #7]
        break;
 8008044:	e00f      	b.n	8008066 <xMBMasterRTUTimerExpired+0x4e>
        xNeedPoll = xMBMasterPortEventPost(EV_MASTER_FRAME_RECEIVED);
 8008046:	2002      	movs	r0, #2
 8008048:	f7ff fb84 	bl	8007754 <xMBMasterPortEventPost>
 800804c:	4603      	mov	r3, r0
 800804e:	71fb      	strb	r3, [r7, #7]
        break;
 8008050:	e009      	b.n	8008066 <xMBMasterRTUTimerExpired+0x4e>
        vMBMasterSetErrorType(EV_ERROR_RECEIVE_DATA);
 8008052:	2001      	movs	r0, #1
 8008054:	f7ff fb54 	bl	8007700 <vMBMasterSetErrorType>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_ERROR_PROCESS );
 8008058:	2010      	movs	r0, #16
 800805a:	f7ff fb7b 	bl	8007754 <xMBMasterPortEventPost>
 800805e:	4603      	mov	r3, r0
 8008060:	71fb      	strb	r3, [r7, #7]
        break;
 8008062:	e000      	b.n	8008066 <xMBMasterRTUTimerExpired+0x4e>
        break;
 8008064:	bf00      	nop
    }
    eRcvState = STATE_M_RX_IDLE;
 8008066:	4b16      	ldr	r3, [pc, #88]	; (80080c0 <xMBMasterRTUTimerExpired+0xa8>)
 8008068:	2201      	movs	r2, #1
 800806a:	701a      	strb	r2, [r3, #0]

    switch (eSndState)
 800806c:	4b15      	ldr	r3, [pc, #84]	; (80080c4 <xMBMasterRTUTimerExpired+0xac>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d10d      	bne.n	8008092 <xMBMasterRTUTimerExpired+0x7a>
    {
        /* A frame was send finish and convert delay or respond timeout expired.
         * If the frame is broadcast,The master will idle,and if the frame is not
         * broadcast.Notify the listener process error.*/
    case STATE_M_TX_XFWR:
        if ( xFrameIsBroadcast == FALSE ) {
 8008076:	4b14      	ldr	r3, [pc, #80]	; (80080c8 <xMBMasterRTUTimerExpired+0xb0>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xMBMasterRTUTimerExpired+0x7e>
            vMBMasterSetErrorType(EV_ERROR_RESPOND_TIMEOUT);
 8008080:	2000      	movs	r0, #0
 8008082:	f7ff fb3d 	bl	8007700 <vMBMasterSetErrorType>
            xNeedPoll = xMBMasterPortEventPost(EV_MASTER_ERROR_PROCESS);
 8008086:	2010      	movs	r0, #16
 8008088:	f7ff fb64 	bl	8007754 <xMBMasterPortEventPost>
 800808c:	4603      	mov	r3, r0
 800808e:	71fb      	strb	r3, [r7, #7]
        }
        break;
 8008090:	e001      	b.n	8008096 <xMBMasterRTUTimerExpired+0x7e>
        /* Function called in an illegal state. */
    default:
        assert_param(
                ( eSndState == STATE_M_TX_XFWR ) || ( eSndState == STATE_M_TX_IDLE ));
        break;
 8008092:	bf00      	nop
 8008094:	e000      	b.n	8008098 <xMBMasterRTUTimerExpired+0x80>
        break;
 8008096:	bf00      	nop
    }
    eSndState = STATE_M_TX_IDLE;
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <xMBMasterRTUTimerExpired+0xac>)
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]

    vMBMasterPortTimersDisable( );
 800809e:	f7ff fdc9 	bl	8007c34 <vMBMasterPortTimersDisable>
    /* If timer mode is convert delay, the master event then turns EV_MASTER_EXECUTE status. */
    if (eMasterCurTimerMode == MB_TMODE_CONVERT_DELAY) {
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <xMBMasterRTUTimerExpired+0xb4>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d104      	bne.n	80080b6 <xMBMasterRTUTimerExpired+0x9e>
        xNeedPoll = xMBMasterPortEventPost( EV_MASTER_EXECUTE );
 80080ac:	2004      	movs	r0, #4
 80080ae:	f7ff fb51 	bl	8007754 <xMBMasterPortEventPost>
 80080b2:	4603      	mov	r3, r0
 80080b4:	71fb      	strb	r3, [r7, #7]
    }

    return xNeedPoll;
 80080b6:	79fb      	ldrb	r3, [r7, #7]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	200047ab 	.word	0x200047ab
 80080c4:	200047aa 	.word	0x200047aa
 80080c8:	200049b8 	.word	0x200049b8
 80080cc:	200049b9 	.word	0x200049b9

080080d0 <vMBMasterGetPDUSndBuf>:
    *pucFrame = ( UCHAR * ) ucMasterRTUSndBuf;
}

/* Get Modbus Master send PDU's buffer address pointer.*/
void vMBMasterGetPDUSndBuf( UCHAR ** pucFrame )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
    *pucFrame = ( UCHAR * ) &ucMasterRTUSndBuf[MB_SER_PDU_PDU_OFF];
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a04      	ldr	r2, [pc, #16]	; (80080ec <vMBMasterGetPDUSndBuf+0x1c>)
 80080dc:	601a      	str	r2, [r3, #0]
}
 80080de:	bf00      	nop
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	200047ad 	.word	0x200047ad

080080f0 <vMBMasterSetPDUSndLength>:

/* Set Modbus Master send PDU's buffer length.*/
void vMBMasterSetPDUSndLength( USHORT SendPDULength )
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	80fb      	strh	r3, [r7, #6]
    usMasterSendPDULength = SendPDULength;
 80080fa:	4a04      	ldr	r2, [pc, #16]	; (800810c <vMBMasterSetPDUSndLength+0x1c>)
 80080fc:	88fb      	ldrh	r3, [r7, #6]
 80080fe:	8013      	strh	r3, [r2, #0]
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	200049ac 	.word	0x200049ac

08008110 <usMBMasterGetPDUSndLength>:

/* Get Modbus Master send PDU's buffer length.*/
USHORT usMBMasterGetPDUSndLength( void )
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
    return usMasterSendPDULength;
 8008114:	4b03      	ldr	r3, [pc, #12]	; (8008124 <usMBMasterGetPDUSndLength+0x14>)
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b29b      	uxth	r3, r3
}
 800811a:	4618      	mov	r0, r3
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	200049ac 	.word	0x200049ac

08008128 <vMBMasterSetCurTimerMode>:

/* Set Modbus Master current timer mode.*/
void vMBMasterSetCurTimerMode( eMBMasterTimerMode eMBTimerMode )
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	71fb      	strb	r3, [r7, #7]
    eMasterCurTimerMode = eMBTimerMode;
 8008132:	4a04      	ldr	r2, [pc, #16]	; (8008144 <vMBMasterSetCurTimerMode+0x1c>)
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	7013      	strb	r3, [r2, #0]
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	200049b9 	.word	0x200049b9

08008148 <xMBMasterRequestIsBroadcast>:

/* The master request is broadcast? */
BOOL xMBMasterRequestIsBroadcast( void ){
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0
    return xFrameIsBroadcast;
 800814c:	4b03      	ldr	r3, [pc, #12]	; (800815c <xMBMasterRequestIsBroadcast+0x14>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	b2db      	uxtb	r3, r3
}
 8008152:	4618      	mov	r0, r3
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	200049b8 	.word	0x200049b8

08008160 <ModbusMasterStackInit>:

USHORT  usModbusUserData[MB_PDU_SIZE_MAX];
UCHAR   ucModbusUserData[MB_PDU_SIZE_MAX];

void ModbusMasterStackInit(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0

	eMBMasterInit(MB_RTU, 1, 19200,  MB_PAR_NONE);
 8008164:	2300      	movs	r3, #0
 8008166:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800816a:	2101      	movs	r1, #1
 800816c:	2000      	movs	r0, #0
 800816e:	f7ff f8bb 	bl	80072e8 <eMBMasterInit>
	eMBMasterEnable();
 8008172:	f7ff f923 	bl	80073bc <eMBMasterEnable>
}
 8008176:	bf00      	nop
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <ModbusMasterUserRTUTask>:

void ModbusMasterUserRTUTask(void const * argument)
{ 
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  eMBMasterReqErrCode    errorCode = MB_MRE_NO_ERR;
 8008184:	2300      	movs	r3, #0
 8008186:	737b      	strb	r3, [r7, #13]
  uint16_t errorCount = 0;
 8008188:	2300      	movs	r3, #0
 800818a:	81fb      	strh	r3, [r7, #14]

  while(1) {
	osDelay(1000);
 800818c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008190:	f7fb fbc7 	bl	8003922 <osDelay>
    usModbusUserData[0] = (USHORT)(1);
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <ModbusMasterUserRTUTask+0x4c>)
 8008196:	2201      	movs	r2, #1
 8008198:	801a      	strh	r2, [r3, #0]
    usModbusUserData[1] = (USHORT)(2);
 800819a:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <ModbusMasterUserRTUTask+0x4c>)
 800819c:	2202      	movs	r2, #2
 800819e:	805a      	strh	r2, [r3, #2]
    ucModbusUserData[0] = 0x1F;    
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <ModbusMasterUserRTUTask+0x50>)
 80081a2:	221f      	movs	r2, #31
 80081a4:	701a      	strb	r2, [r3, #0]
    errorCode = eMBMasterReqWriteHoldingRegister(1, 3, usModbusUserData[0], 0x00);
 80081a6:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <ModbusMasterUserRTUTask+0x4c>)
 80081a8:	881a      	ldrh	r2, [r3, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	2103      	movs	r1, #3
 80081ae:	2001      	movs	r0, #1
 80081b0:	f7fe ff1c 	bl	8006fec <eMBMasterReqWriteHoldingRegister>
 80081b4:	4603      	mov	r3, r0
 80081b6:	737b      	strb	r3, [r7, #13]
    if (errorCode != MB_MRE_NO_ERR) {
 80081b8:	7b7b      	ldrb	r3, [r7, #13]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0e6      	beq.n	800818c <ModbusMasterUserRTUTask+0x10>
        errorCount++;
 80081be:	89fb      	ldrh	r3, [r7, #14]
 80081c0:	3301      	adds	r3, #1
 80081c2:	81fb      	strh	r3, [r7, #14]
	osDelay(1000);
 80081c4:	e7e2      	b.n	800818c <ModbusMasterUserRTUTask+0x10>
 80081c6:	bf00      	nop
 80081c8:	20005980 	.word	0x20005980
 80081cc:	20005880 	.word	0x20005880

080081d0 <ModbusMasterRTUTask>:
    }
  }
}

void ModbusMasterRTUTask(void const * argument)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]

  while(1) {
	  eMBMasterPoll();
 80081d8:	f7ff f90c 	bl	80073f4 <eMBMasterPoll>
 80081dc:	e7fc      	b.n	80081d8 <ModbusMasterRTUTask+0x8>
	...

080081e0 <eMBMasterRegInputCB>:
 * @param usNRegs input register number
 *
 * @return result
 */
eMBErrorCode eMBMasterRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	807b      	strh	r3, [r7, #2]
 80081ec:	4613      	mov	r3, r2
 80081ee:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]
    USHORT *        pusRegInputBuf;
    USHORT          REG_INPUT_START;
    USHORT          REG_INPUT_NREGS;
    USHORT          usRegInStart;

    pusRegInputBuf = usMRegInBuf[ucMBMasterGetDestAddress() - 1];
 80081f4:	f7ff fa5c 	bl	80076b0 <ucMBMasterGetDestAddress>
 80081f8:	4603      	mov	r3, r0
 80081fa:	3b01      	subs	r3, #1
 80081fc:	22c8      	movs	r2, #200	; 0xc8
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	4a26      	ldr	r2, [pc, #152]	; (800829c <eMBMasterRegInputCB+0xbc>)
 8008204:	4413      	add	r3, r2
 8008206:	613b      	str	r3, [r7, #16]
    REG_INPUT_START = M_REG_INPUT_START;
 8008208:	2300      	movs	r3, #0
 800820a:	81fb      	strh	r3, [r7, #14]
    REG_INPUT_NREGS = M_REG_INPUT_NREGS;
 800820c:	2364      	movs	r3, #100	; 0x64
 800820e:	81bb      	strh	r3, [r7, #12]
    usRegInStart = usMRegInStart;
 8008210:	4b23      	ldr	r3, [pc, #140]	; (80082a0 <eMBMasterRegInputCB+0xc0>)
 8008212:	881b      	ldrh	r3, [r3, #0]
 8008214:	817b      	strh	r3, [r7, #10]

    /* it already plus one in modbus function method. */
    usAddress--;
 8008216:	887b      	ldrh	r3, [r7, #2]
 8008218:	3b01      	subs	r3, #1
 800821a:	807b      	strh	r3, [r7, #2]

    if ((usAddress >= REG_INPUT_START)
 800821c:	887a      	ldrh	r2, [r7, #2]
 800821e:	89fb      	ldrh	r3, [r7, #14]
 8008220:	429a      	cmp	r2, r3
 8008222:	d333      	bcc.n	800828c <eMBMasterRegInputCB+0xac>
            && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
 8008224:	887a      	ldrh	r2, [r7, #2]
 8008226:	883b      	ldrh	r3, [r7, #0]
 8008228:	441a      	add	r2, r3
 800822a:	89f9      	ldrh	r1, [r7, #14]
 800822c:	89bb      	ldrh	r3, [r7, #12]
 800822e:	440b      	add	r3, r1
 8008230:	429a      	cmp	r2, r3
 8008232:	dc2b      	bgt.n	800828c <eMBMasterRegInputCB+0xac>
    {
        iRegIndex = usAddress - usRegInStart;
 8008234:	887a      	ldrh	r2, [r7, #2]
 8008236:	897b      	ldrh	r3, [r7, #10]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	82bb      	strh	r3, [r7, #20]
        while (usNRegs > 0)
 800823c:	e022      	b.n	8008284 <eMBMasterRegInputCB+0xa4>
        {
            pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	b29a      	uxth	r2, r3
 8008248:	8abb      	ldrh	r3, [r7, #20]
 800824a:	005b      	lsls	r3, r3, #1
 800824c:	6939      	ldr	r1, [r7, #16]
 800824e:	440b      	add	r3, r1
 8008250:	0212      	lsls	r2, r2, #8
 8008252:	b292      	uxth	r2, r2
 8008254:	801a      	strh	r2, [r3, #0]
            pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	7818      	ldrb	r0, [r3, #0]
 800825e:	8abb      	ldrh	r3, [r7, #20]
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4413      	add	r3, r2
 8008266:	8819      	ldrh	r1, [r3, #0]
 8008268:	b282      	uxth	r2, r0
 800826a:	8abb      	ldrh	r3, [r7, #20]
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	6938      	ldr	r0, [r7, #16]
 8008270:	4403      	add	r3, r0
 8008272:	430a      	orrs	r2, r1
 8008274:	b292      	uxth	r2, r2
 8008276:	801a      	strh	r2, [r3, #0]
            iRegIndex++;
 8008278:	8abb      	ldrh	r3, [r7, #20]
 800827a:	3301      	adds	r3, #1
 800827c:	82bb      	strh	r3, [r7, #20]
            usNRegs--;
 800827e:	883b      	ldrh	r3, [r7, #0]
 8008280:	3b01      	subs	r3, #1
 8008282:	803b      	strh	r3, [r7, #0]
        while (usNRegs > 0)
 8008284:	883b      	ldrh	r3, [r7, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1d9      	bne.n	800823e <eMBMasterRegInputCB+0x5e>
    if ((usAddress >= REG_INPUT_START)
 800828a:	e001      	b.n	8008290 <eMBMasterRegInputCB+0xb0>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 800828c:	2301      	movs	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]
    }

    return eStatus;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	20005b7c 	.word	0x20005b7c
 80082a0:	200049ba 	.word	0x200049ba

080082a4 <eMBMasterRegHoldingCB>:
 *
 * @return result
 */
eMBErrorCode eMBMasterRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress,
        USHORT usNRegs, eMBRegisterMode eMode)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b088      	sub	sp, #32
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	4608      	mov	r0, r1
 80082ae:	4611      	mov	r1, r2
 80082b0:	461a      	mov	r2, r3
 80082b2:	4603      	mov	r3, r0
 80082b4:	817b      	strh	r3, [r7, #10]
 80082b6:	460b      	mov	r3, r1
 80082b8:	813b      	strh	r3, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode    eStatus = MB_ENOERR;
 80082be:	2300      	movs	r3, #0
 80082c0:	77fb      	strb	r3, [r7, #31]
    USHORT *        pusRegHoldingBuf;
    USHORT          REG_HOLDING_START;
    USHORT          REG_HOLDING_NREGS;
    USHORT          usRegHoldStart;

    pusRegHoldingBuf = usMRegHoldBuf[ucMBMasterGetDestAddress() - 1];
 80082c2:	f7ff f9f5 	bl	80076b0 <ucMBMasterGetDestAddress>
 80082c6:	4603      	mov	r3, r0
 80082c8:	3b01      	subs	r3, #1
 80082ca:	22c8      	movs	r2, #200	; 0xc8
 80082cc:	fb02 f303 	mul.w	r3, r2, r3
 80082d0:	4a39      	ldr	r2, [pc, #228]	; (80083b8 <eMBMasterRegHoldingCB+0x114>)
 80082d2:	4413      	add	r3, r2
 80082d4:	61bb      	str	r3, [r7, #24]
    REG_HOLDING_START = M_REG_HOLDING_START;
 80082d6:	2300      	movs	r3, #0
 80082d8:	82fb      	strh	r3, [r7, #22]
    REG_HOLDING_NREGS = M_REG_HOLDING_NREGS;
 80082da:	2364      	movs	r3, #100	; 0x64
 80082dc:	82bb      	strh	r3, [r7, #20]
    usRegHoldStart = usMRegHoldStart;
 80082de:	4b37      	ldr	r3, [pc, #220]	; (80083bc <eMBMasterRegHoldingCB+0x118>)
 80082e0:	881b      	ldrh	r3, [r3, #0]
 80082e2:	827b      	strh	r3, [r7, #18]
    /* if mode is read, the master will write the received date to buffer. */
    eMode = MB_REG_WRITE;
 80082e4:	2301      	movs	r3, #1
 80082e6:	71fb      	strb	r3, [r7, #7]

    /* it already plus one in modbus function method. */
    usAddress--;
 80082e8:	897b      	ldrh	r3, [r7, #10]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	817b      	strh	r3, [r7, #10]

    if ((usAddress >= REG_HOLDING_START)
 80082ee:	897a      	ldrh	r2, [r7, #10]
 80082f0:	8afb      	ldrh	r3, [r7, #22]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d359      	bcc.n	80083aa <eMBMasterRegHoldingCB+0x106>
            && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 80082f6:	897a      	ldrh	r2, [r7, #10]
 80082f8:	893b      	ldrh	r3, [r7, #8]
 80082fa:	441a      	add	r2, r3
 80082fc:	8af9      	ldrh	r1, [r7, #22]
 80082fe:	8abb      	ldrh	r3, [r7, #20]
 8008300:	440b      	add	r3, r1
 8008302:	429a      	cmp	r2, r3
 8008304:	dc51      	bgt.n	80083aa <eMBMasterRegHoldingCB+0x106>
    {
        iRegIndex = usAddress - usRegHoldStart;
 8008306:	897a      	ldrh	r2, [r7, #10]
 8008308:	8a7b      	ldrh	r3, [r7, #18]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	83bb      	strh	r3, [r7, #28]
        switch (eMode)
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01e      	beq.n	8008352 <eMBMasterRegHoldingCB+0xae>
 8008314:	2b01      	cmp	r3, #1
 8008316:	d043      	beq.n	80083a0 <eMBMasterRegHoldingCB+0xfc>
 8008318:	e049      	b.n	80083ae <eMBMasterRegHoldingCB+0x10a>
        {
        /* read current register values from the protocol stack. */
        case MB_REG_READ:
            while (usNRegs > 0)
            {
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] >> 8);
 800831a:	8bbb      	ldrh	r3, [r7, #28]
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	4413      	add	r3, r2
 8008322:	881b      	ldrh	r3, [r3, #0]
 8008324:	0a1b      	lsrs	r3, r3, #8
 8008326:	b299      	uxth	r1, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	60fa      	str	r2, [r7, #12]
 800832e:	b2ca      	uxtb	r2, r1
 8008330:	701a      	strb	r2, [r3, #0]
                *pucRegBuffer++ = (UCHAR) (pusRegHoldingBuf[iRegIndex] & 0xFF);
 8008332:	8bbb      	ldrh	r3, [r7, #28]
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4413      	add	r3, r2
 800833a:	8819      	ldrh	r1, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	60fa      	str	r2, [r7, #12]
 8008342:	b2ca      	uxtb	r2, r1
 8008344:	701a      	strb	r2, [r3, #0]
                iRegIndex++;
 8008346:	8bbb      	ldrh	r3, [r7, #28]
 8008348:	3301      	adds	r3, #1
 800834a:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 800834c:	893b      	ldrh	r3, [r7, #8]
 800834e:	3b01      	subs	r3, #1
 8008350:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 8008352:	893b      	ldrh	r3, [r7, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e0      	bne.n	800831a <eMBMasterRegHoldingCB+0x76>
            }
            break;
 8008358:	e026      	b.n	80083a8 <eMBMasterRegHoldingCB+0x104>
        /* write current register values with new values from the protocol stack. */
        case MB_REG_WRITE:
            while (usNRegs > 0)
            {
                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	60fa      	str	r2, [r7, #12]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b29a      	uxth	r2, r3
 8008364:	8bbb      	ldrh	r3, [r7, #28]
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	69b9      	ldr	r1, [r7, #24]
 800836a:	440b      	add	r3, r1
 800836c:	0212      	lsls	r2, r2, #8
 800836e:	b292      	uxth	r2, r2
 8008370:	801a      	strh	r2, [r3, #0]
                pusRegHoldingBuf[iRegIndex] |= *pucRegBuffer++;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	60fa      	str	r2, [r7, #12]
 8008378:	7818      	ldrb	r0, [r3, #0]
 800837a:	8bbb      	ldrh	r3, [r7, #28]
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	69ba      	ldr	r2, [r7, #24]
 8008380:	4413      	add	r3, r2
 8008382:	8819      	ldrh	r1, [r3, #0]
 8008384:	b282      	uxth	r2, r0
 8008386:	8bbb      	ldrh	r3, [r7, #28]
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	69b8      	ldr	r0, [r7, #24]
 800838c:	4403      	add	r3, r0
 800838e:	430a      	orrs	r2, r1
 8008390:	b292      	uxth	r2, r2
 8008392:	801a      	strh	r2, [r3, #0]
                iRegIndex++;
 8008394:	8bbb      	ldrh	r3, [r7, #28]
 8008396:	3301      	adds	r3, #1
 8008398:	83bb      	strh	r3, [r7, #28]
                usNRegs--;
 800839a:	893b      	ldrh	r3, [r7, #8]
 800839c:	3b01      	subs	r3, #1
 800839e:	813b      	strh	r3, [r7, #8]
            while (usNRegs > 0)
 80083a0:	893b      	ldrh	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1d9      	bne.n	800835a <eMBMasterRegHoldingCB+0xb6>
            }
            break;
 80083a6:	bf00      	nop
        switch (eMode)
 80083a8:	e001      	b.n	80083ae <eMBMasterRegHoldingCB+0x10a>
        }
    }
    else
    {
        eStatus = MB_ENOREG;
 80083aa:	2301      	movs	r3, #1
 80083ac:	77fb      	strb	r3, [r7, #31]
    }
    return eStatus;
 80083ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20004c00 	.word	0x20004c00
 80083bc:	200049bc 	.word	0x200049bc

080083c0 <__libc_init_array>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	4d0d      	ldr	r5, [pc, #52]	; (80083f8 <__libc_init_array+0x38>)
 80083c4:	4c0d      	ldr	r4, [pc, #52]	; (80083fc <__libc_init_array+0x3c>)
 80083c6:	1b64      	subs	r4, r4, r5
 80083c8:	10a4      	asrs	r4, r4, #2
 80083ca:	2600      	movs	r6, #0
 80083cc:	42a6      	cmp	r6, r4
 80083ce:	d109      	bne.n	80083e4 <__libc_init_array+0x24>
 80083d0:	4d0b      	ldr	r5, [pc, #44]	; (8008400 <__libc_init_array+0x40>)
 80083d2:	4c0c      	ldr	r4, [pc, #48]	; (8008404 <__libc_init_array+0x44>)
 80083d4:	f000 f8f6 	bl	80085c4 <_init>
 80083d8:	1b64      	subs	r4, r4, r5
 80083da:	10a4      	asrs	r4, r4, #2
 80083dc:	2600      	movs	r6, #0
 80083de:	42a6      	cmp	r6, r4
 80083e0:	d105      	bne.n	80083ee <__libc_init_array+0x2e>
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e8:	4798      	blx	r3
 80083ea:	3601      	adds	r6, #1
 80083ec:	e7ee      	b.n	80083cc <__libc_init_array+0xc>
 80083ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80083f2:	4798      	blx	r3
 80083f4:	3601      	adds	r6, #1
 80083f6:	e7f2      	b.n	80083de <__libc_init_array+0x1e>
 80083f8:	08008900 	.word	0x08008900
 80083fc:	08008900 	.word	0x08008900
 8008400:	08008900 	.word	0x08008900
 8008404:	08008904 	.word	0x08008904

08008408 <__retarget_lock_acquire_recursive>:
 8008408:	4770      	bx	lr

0800840a <__retarget_lock_release_recursive>:
 800840a:	4770      	bx	lr

0800840c <memcpy>:
 800840c:	440a      	add	r2, r1
 800840e:	4291      	cmp	r1, r2
 8008410:	f100 33ff 	add.w	r3, r0, #4294967295
 8008414:	d100      	bne.n	8008418 <memcpy+0xc>
 8008416:	4770      	bx	lr
 8008418:	b510      	push	{r4, lr}
 800841a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800841e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008422:	4291      	cmp	r1, r2
 8008424:	d1f9      	bne.n	800841a <memcpy+0xe>
 8008426:	bd10      	pop	{r4, pc}

08008428 <memset>:
 8008428:	4402      	add	r2, r0
 800842a:	4603      	mov	r3, r0
 800842c:	4293      	cmp	r3, r2
 800842e:	d100      	bne.n	8008432 <memset+0xa>
 8008430:	4770      	bx	lr
 8008432:	f803 1b01 	strb.w	r1, [r3], #1
 8008436:	e7f9      	b.n	800842c <memset+0x4>

08008438 <cleanup_glue>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	460c      	mov	r4, r1
 800843c:	6809      	ldr	r1, [r1, #0]
 800843e:	4605      	mov	r5, r0
 8008440:	b109      	cbz	r1, 8008446 <cleanup_glue+0xe>
 8008442:	f7ff fff9 	bl	8008438 <cleanup_glue>
 8008446:	4621      	mov	r1, r4
 8008448:	4628      	mov	r0, r5
 800844a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800844e:	f000 b869 	b.w	8008524 <_free_r>
	...

08008454 <_reclaim_reent>:
 8008454:	4b2c      	ldr	r3, [pc, #176]	; (8008508 <_reclaim_reent+0xb4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4283      	cmp	r3, r0
 800845a:	b570      	push	{r4, r5, r6, lr}
 800845c:	4604      	mov	r4, r0
 800845e:	d051      	beq.n	8008504 <_reclaim_reent+0xb0>
 8008460:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008462:	b143      	cbz	r3, 8008476 <_reclaim_reent+0x22>
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d14a      	bne.n	8008500 <_reclaim_reent+0xac>
 800846a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800846c:	6819      	ldr	r1, [r3, #0]
 800846e:	b111      	cbz	r1, 8008476 <_reclaim_reent+0x22>
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f857 	bl	8008524 <_free_r>
 8008476:	6961      	ldr	r1, [r4, #20]
 8008478:	b111      	cbz	r1, 8008480 <_reclaim_reent+0x2c>
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f852 	bl	8008524 <_free_r>
 8008480:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008482:	b111      	cbz	r1, 800848a <_reclaim_reent+0x36>
 8008484:	4620      	mov	r0, r4
 8008486:	f000 f84d 	bl	8008524 <_free_r>
 800848a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800848c:	b111      	cbz	r1, 8008494 <_reclaim_reent+0x40>
 800848e:	4620      	mov	r0, r4
 8008490:	f000 f848 	bl	8008524 <_free_r>
 8008494:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008496:	b111      	cbz	r1, 800849e <_reclaim_reent+0x4a>
 8008498:	4620      	mov	r0, r4
 800849a:	f000 f843 	bl	8008524 <_free_r>
 800849e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084a0:	b111      	cbz	r1, 80084a8 <_reclaim_reent+0x54>
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 f83e 	bl	8008524 <_free_r>
 80084a8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80084aa:	b111      	cbz	r1, 80084b2 <_reclaim_reent+0x5e>
 80084ac:	4620      	mov	r0, r4
 80084ae:	f000 f839 	bl	8008524 <_free_r>
 80084b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80084b4:	b111      	cbz	r1, 80084bc <_reclaim_reent+0x68>
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 f834 	bl	8008524 <_free_r>
 80084bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084be:	b111      	cbz	r1, 80084c6 <_reclaim_reent+0x72>
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 f82f 	bl	8008524 <_free_r>
 80084c6:	69a3      	ldr	r3, [r4, #24]
 80084c8:	b1e3      	cbz	r3, 8008504 <_reclaim_reent+0xb0>
 80084ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084cc:	4620      	mov	r0, r4
 80084ce:	4798      	blx	r3
 80084d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80084d2:	b1b9      	cbz	r1, 8008504 <_reclaim_reent+0xb0>
 80084d4:	4620      	mov	r0, r4
 80084d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80084da:	f7ff bfad 	b.w	8008438 <cleanup_glue>
 80084de:	5949      	ldr	r1, [r1, r5]
 80084e0:	b941      	cbnz	r1, 80084f4 <_reclaim_reent+0xa0>
 80084e2:	3504      	adds	r5, #4
 80084e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e6:	2d80      	cmp	r5, #128	; 0x80
 80084e8:	68d9      	ldr	r1, [r3, #12]
 80084ea:	d1f8      	bne.n	80084de <_reclaim_reent+0x8a>
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 f819 	bl	8008524 <_free_r>
 80084f2:	e7ba      	b.n	800846a <_reclaim_reent+0x16>
 80084f4:	680e      	ldr	r6, [r1, #0]
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 f814 	bl	8008524 <_free_r>
 80084fc:	4631      	mov	r1, r6
 80084fe:	e7ef      	b.n	80084e0 <_reclaim_reent+0x8c>
 8008500:	2500      	movs	r5, #0
 8008502:	e7ef      	b.n	80084e4 <_reclaim_reent+0x90>
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	bf00      	nop
 8008508:	20000094 	.word	0x20000094

0800850c <__malloc_lock>:
 800850c:	4801      	ldr	r0, [pc, #4]	; (8008514 <__malloc_lock+0x8>)
 800850e:	f7ff bf7b 	b.w	8008408 <__retarget_lock_acquire_recursive>
 8008512:	bf00      	nop
 8008514:	20006800 	.word	0x20006800

08008518 <__malloc_unlock>:
 8008518:	4801      	ldr	r0, [pc, #4]	; (8008520 <__malloc_unlock+0x8>)
 800851a:	f7ff bf76 	b.w	800840a <__retarget_lock_release_recursive>
 800851e:	bf00      	nop
 8008520:	20006800 	.word	0x20006800

08008524 <_free_r>:
 8008524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008526:	2900      	cmp	r1, #0
 8008528:	d048      	beq.n	80085bc <_free_r+0x98>
 800852a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852e:	9001      	str	r0, [sp, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f1a1 0404 	sub.w	r4, r1, #4
 8008536:	bfb8      	it	lt
 8008538:	18e4      	addlt	r4, r4, r3
 800853a:	f7ff ffe7 	bl	800850c <__malloc_lock>
 800853e:	4a20      	ldr	r2, [pc, #128]	; (80085c0 <_free_r+0x9c>)
 8008540:	9801      	ldr	r0, [sp, #4]
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	4615      	mov	r5, r2
 8008546:	b933      	cbnz	r3, 8008556 <_free_r+0x32>
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	6014      	str	r4, [r2, #0]
 800854c:	b003      	add	sp, #12
 800854e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008552:	f7ff bfe1 	b.w	8008518 <__malloc_unlock>
 8008556:	42a3      	cmp	r3, r4
 8008558:	d90b      	bls.n	8008572 <_free_r+0x4e>
 800855a:	6821      	ldr	r1, [r4, #0]
 800855c:	1862      	adds	r2, r4, r1
 800855e:	4293      	cmp	r3, r2
 8008560:	bf04      	itt	eq
 8008562:	681a      	ldreq	r2, [r3, #0]
 8008564:	685b      	ldreq	r3, [r3, #4]
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	bf04      	itt	eq
 800856a:	1852      	addeq	r2, r2, r1
 800856c:	6022      	streq	r2, [r4, #0]
 800856e:	602c      	str	r4, [r5, #0]
 8008570:	e7ec      	b.n	800854c <_free_r+0x28>
 8008572:	461a      	mov	r2, r3
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	b10b      	cbz	r3, 800857c <_free_r+0x58>
 8008578:	42a3      	cmp	r3, r4
 800857a:	d9fa      	bls.n	8008572 <_free_r+0x4e>
 800857c:	6811      	ldr	r1, [r2, #0]
 800857e:	1855      	adds	r5, r2, r1
 8008580:	42a5      	cmp	r5, r4
 8008582:	d10b      	bne.n	800859c <_free_r+0x78>
 8008584:	6824      	ldr	r4, [r4, #0]
 8008586:	4421      	add	r1, r4
 8008588:	1854      	adds	r4, r2, r1
 800858a:	42a3      	cmp	r3, r4
 800858c:	6011      	str	r1, [r2, #0]
 800858e:	d1dd      	bne.n	800854c <_free_r+0x28>
 8008590:	681c      	ldr	r4, [r3, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	6053      	str	r3, [r2, #4]
 8008596:	4421      	add	r1, r4
 8008598:	6011      	str	r1, [r2, #0]
 800859a:	e7d7      	b.n	800854c <_free_r+0x28>
 800859c:	d902      	bls.n	80085a4 <_free_r+0x80>
 800859e:	230c      	movs	r3, #12
 80085a0:	6003      	str	r3, [r0, #0]
 80085a2:	e7d3      	b.n	800854c <_free_r+0x28>
 80085a4:	6825      	ldr	r5, [r4, #0]
 80085a6:	1961      	adds	r1, r4, r5
 80085a8:	428b      	cmp	r3, r1
 80085aa:	bf04      	itt	eq
 80085ac:	6819      	ldreq	r1, [r3, #0]
 80085ae:	685b      	ldreq	r3, [r3, #4]
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	bf04      	itt	eq
 80085b4:	1949      	addeq	r1, r1, r5
 80085b6:	6021      	streq	r1, [r4, #0]
 80085b8:	6054      	str	r4, [r2, #4]
 80085ba:	e7c7      	b.n	800854c <_free_r+0x28>
 80085bc:	b003      	add	sp, #12
 80085be:	bd30      	pop	{r4, r5, pc}
 80085c0:	200049c0 	.word	0x200049c0

080085c4 <_init>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr

080085d0 <_fini>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr
